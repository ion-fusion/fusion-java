// Copyright (c) 2012-2022 Amazon.com, Inc.  All rights reserved.

{
  all_defined_out: '''
    (all_defined_out)

A `provide` clause that exports all bindings `define`d by the enclosing module.
Imported bindings are not exported.

This form can only appear within `provide`.
  ''',


  begin: '''
    (begin expr ...)

Evaluates the `expr`s in order, returning the final result.  The last `expr` is
in tail position.  If there are no `expr`s the result is void.
  ''',


  current_directory: '''
    (current_directory)

Returns the absolute path of the current working directory.

This is a [parameter](fusion/parameter.html), so the value is thread-local and
dynamically scoped via [`parameterize`](fusion/parameter.html#parameterize).
  ''',


  current_namespace: '''
    (current_namespace)

Returns the current namespace, the default context for [`eval`](fusion/eval.html#eval)
and similar dynamic evaluation features.
This value has no direct relationship to the namespace lexically enclosing the
parameter call.

This is a [parameter](fusion/parameter.html), so the value is thread-local and
dynamically scoped via [`parameterize`](fusion/parameter.html#parameterize).
  ''',


  define_syntax: '''
    (define_syntax id xform)

Binds the identifier ID to a syntax transformer XFORM. The transformer must be
a procedure that accepts an syntax object and returns a syntax object.
  ''',


  define_values: '''
    (define_values (id ...) expr)

Binds a number of namespace-level variables to the multiple results of an
expression.  If the `expr` returns a different number of values than there are
`id`s, a contract exception is raised.

At top-level, the `expr` is evaluated before top-level bindings for the `id`s
are created.
  ''',


  eof: '''
A unique value that denotes an end-of-file condition.
  ''',


  java_new: '''
    (java_new classname arg ...)

Instantiates a new Fusion value that's implemented by a Java class. `classname`
is the fully-qualified Java class name. A constructor with the appropriate
number of `Object` arguments will be invoked and the result returned.
  ''',


  lambda: '''
    (lambda (arg ...) body ...+)

Returns a procedure.  When invoked, the caller's arguments are bound to the
`arg` identifiers (the formal arguments) and the `body` is evaluated and
returned.
`body` may be one or more forms; the last form is in tail position and its
result is the result of the procedure invocation.

The Fusion runtime system may optimize procedure instantiation, so it is
unspecified whether one or more `lambda` expressions will return distinct
or identical objects for any evaluation.

    (lambda rest_id body ...+)

This variant, which declares a single formal argument rather than a sequence
of them, returns a procedure that accepts any number of values, which are
collected into an immutable sexp and bound to the `rest_id`:

    ((lambda args args) 8 9 10)   --> (8 9 10)
  ''',


  load: '''
    (load filename)

Opens the Fusion source file named by the given string and evaluates each
expression in sequence, returning the last result.  The `filename` is resolved
relative to the value of the [`current_directory`](fusion/io.html#current_directory)
parameter.  The evaluation is performed within the [current namespace](fusion/namespace.html#current_namespace).
  ''',


  module: '''
    (module name language body ...+)

Declares a module containing the given body. The `name` must be a symbol; it is
ignored when loading a module from a file.

The `language` must be an absolute [module path][]. The denoted module is
instantiated and all of its `provide`d bindings are immediately imported.  This
"bootstraps" the module with a set of bindings that form the base semantics
for the body.  Unlike bindings that are `require`d, these bindings can be
shadowed by module-level definitions and by `require` statements.

When compiling a module, the `body` forms are partially macro-expanded in
order to discover certain core forms like `require` and `provide`.  The former
are handled immediately, before other forms.  The latter are handled _after_
all other forms.
At module level, the elements within `begin` forms are spliced into the
enclosing module body, replacing the single `begin` form with its elements.
This effectively enables module-level macro uses to expand into multiple forms.

[module path]: fusion/module.html#ref
  ''',


  only_in: '''
    (only_in module_path id ...)

A `require` clause that imports only the given `id`s from a module.
If an `id` is not provided by the module, a syntax error is reported.

Bindings introduced by this form use the lexical context of the module path,
not that of the given identifiers.

This form can only appear within `require`.
  ''',


  prefix_in: '''
    (prefix_in prefix_id module_path)

A `require` clause that adjusts each identifier to be bound by prefixing it
with `prefix_id`.

Bindings introduced by this form use the lexical context of the module path,
not that of the prefix identifier.

This form can only appear within `require`.
  ''',


  provide: '''
    (provide provide_clause ...)

Declares bindings to be exported from the enclosing module.  This form may only
appear at module level.

Each `provide_clause` denotes some names to be exported. The following clause
forms are allowed:

  * An identifier defined at module-level or imported from another module.
  * [`all_defined_out`][all_defined_out] exports all module-level definitions.
  * [`rename_out`][rename_out] exports selected bindings, giving them new names
    on the way out.

Within a module, a single `provide` form with multiple clauses behaves
identically to multiple `provide` forms with single clauses.

[all_defined_out]: fusion/module.html#all_defined_out
[rename_out]:      fusion/module.html#rename_out
  ''',


  rename_in: '''
    (rename_in module_path (exported_id local_id) ...)

A `require` clause that imports each `exported_id` using the name `local_id`.
If an `exported_id` is not provided by the module, a syntax error is reported.

In contrast to other require-clauses, bindings introduced by this form use the
lexical context of the `local_id`s, not that of the module path.

This form can only appear within `require`.

**Warning:** This behaves differently than Racket's `rename-in`, which imports
everything from the given module (or nested require-clause) while renaming
selected items from that set.  In contrast, this form ignores exported bindings
that are not renamed.
  ''',


  rename_out: '''
    (rename_out (local_id exported_id) ...)

A `provide` clause that exports each `local_id` using the name `exported_id`.
This effectively renames the binding on export.

This form can only appear within `provide`.
  ''',


  require: '''
    (require require_clause ...+)

Declares bindings to be imported into the enclosing namespace. This form may
only appear at module level or top level.

Each `require_clause` denotes some bindings to be imported. The following
clause forms are allowed:

  * A string or symbol containing a [module path][]; all names `provide`d by
    the referenced module are imported.  The bindings introduced by this form
    use the lexical context of the module path.
  * [`only_in`][only_in] enumerates a set of names to import.
  * [`prefix_in`][prefix_in] provides a prefix to imported bindings.
  * [`rename_in`][rename_in] renames specified bindings.

Within a module, `require` declarations are processed before other forms,
regardless of their order within the module source, and imported bindings are
scoped across the entire module. No identifier may be imported multiple times,
unless all such bindings refer to the same originating definition. Furthermore,
no identifier may have both an import and a module-level definition.
In other words: module-level bindings introduced by `require` or `define` must
not conflict, although either may shadow same-named bindings introduced by the
module's language declaration.

At top level, `require` will replace an existing import, and may shadow an
existing top-level definition.

[module path]: fusion/module.html#ref
[only_in]:     fusion/module.html#only_in
[prefix_in]:   fusion/module.html#prefix_in
[rename_in]:   fusion/module.html#rename_in
  ''',
}
