// Copyright (c) 2013-2014 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
  "/testutils"
)


(expect_arity_exn (read 1))

(expect_arity_exn (write))
(expect_arity_exn (write 1 2))

(expect_arity_exn (ionize))
(expect_arity_exn (ionize 1 2))


// This assumes that current_directory is at the project root.
(with_ion_from_file "tst-data/ints.ion"
  (lambda ()
    (check === 0 (read))
    (check === 1 (read))
    (with_ion_from_file "tst-data/hello.ion"
      (lambda ()
        (check = "hello" (read))
        (check_true (is_eof (read)))))
    (check === 2 (read))
    (check === 3 (read))
    (check_true (is_eof (read)))))

// A nice shortcut for reading a single value.
(check = "hello"
  (with_ion_from_file "tst-data/hello.ion" read))

(check_true (is_eof eof))


// Lob I/O

(define_check (check_lob_io value)
  (let [(lob (ionize_to_blob value))]
    (check_pred is_blob lob)
    (check_pred (negate is_null) lob)
    (let [(v (with_ion_from_lob lob
               (thunk
                 (let [(v (read))]
                   (check_pred (negate is_eof) v)
                   (check_pred is_eof (read))
                   v))))]
      (check === value v))))

(map (lambda (v) (check_lob_io v)) representative_ion_data)

// Make sure we can read Ion text
(check === (quote [only_me])
  (with_ion_from_lob {{"[only_me]"}} read))

(expect_arity_exn (ionize_to_blob))
(expect_arity_exn (ionize_to_blob 1 2))


// ionize_to_string

(check === "1"             (ionize_to_string 1))
(check === "[1,true]"      (ionize_to_string [1,true]))
(check === "{f:\"hi\"}"    (ionize_to_string {f:"hi"}))
(check === "\"\\\"!\\\"\"" (ionize_to_string "\"!\""))

(expect_arity_exn (ionize_to_string))
(expect_arity_exn (ionize_to_string 1 2))
