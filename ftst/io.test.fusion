// Copyright (c) 2013-2018 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
  "/testutils"
)


(expect_arity_exn (read 1))

(expect_arity_exn (write))
(expect_arity_exn (write 1 2))

(expect_arity_exn (ionize))
(expect_arity_exn (ionize 1 2))

(expect_arity_exn (with_ion_from_string))
(expect_arity_exn (with_ion_from_string ""))
(expect_arity_exn (with_ion_from_string "" read 1))

(expect_arity_exn (with_ion_from_lob))
(expect_arity_exn (with_ion_from_lob {{""}}))
(expect_arity_exn (with_ion_from_lob {{""}} read 1))

(expect_arity_exn (with_ion_from_file))
(expect_arity_exn (with_ion_from_file "tst-data-ints.ion"))
(expect_arity_exn (with_ion_from_file "tst-data-ints.ion" read 1))


(with_ion_from_string "0 1 2 3"
  (lambda ()
    (check === 0 (read))
    (check === 1 (read))
    (with_ion_from_string " \"hello\" "
      (lambda ()
        (check = "hello" (read))
        (check_true (is_eof (read)))))
    (check === 2 (read))
    (check === 3 (read))
    (check_true (is_eof (read)))))


// This assumes that current_directory is at the project root.
(with_ion_from_file "tst-data/ints.ion"
  (lambda ()
    (check === 0 (read))
    (check === 1 (read))
    (with_ion_from_file "tst-data/hello.ion"
      (lambda ()
        (check = "hello" (read))
        (check_true (is_eof (read)))))
    (check === 2 (read))
    (check === 3 (read))
    (check_true (is_eof (read)))))

// A nice shortcut for reading a single value.
(check = "hello"
  (with_ion_from_file "tst-data/hello.ion" read))

(check_true (is_eof eof))


//=============================================================================
// Lob I/O

(define_check (check_lob_io value)
  (let [(lob (ionize_to_blob value))]
    (check_pred is_blob lob)
    (check_pred (negate is_null) lob)
    (let [(v (with_ion_from_lob lob
               (thunk
                 (let [(v (read))]
                   (check_pred (negate is_eof) v)
                   (check_pred is_eof (read))
                   v))))]
      (check === value v))))

(map (lambda (v) (check_lob_io v)) representative_ion_data)

// Make sure we can read Ion text
(check === (quote [only_me])
  (with_ion_from_lob {{"[only_me]"}} read))

(expect_arity_exn (ionize_to_blob))
(expect_arity_exn (ionize_to_blob 1 2))


// ionize_to_string

(check === "1"             (ionize_to_string 1))
(check === "[1,true]"      (ionize_to_string [1,true]))
(check === "{f:\"hi\"}"    (ionize_to_string {f:"hi"}))
(check === "\"\\\"!\\\"\"" (ionize_to_string "\"!\""))

(expect_arity_exn (ionize_to_string))
(expect_arity_exn (ionize_to_string 1 2))


// jsonize_to_string

(check === "null"                          (jsonize_to_string null.int))
(check === "1"                             (jsonize_to_string 1))
(check === "[1,true]"                      (jsonize_to_string (sexp 1 true)))
(check === "{\"f\":\"hi\"}"                (jsonize_to_string {f:"hi"}))
(check === "\"\\\"!\\\"\""                 (jsonize_to_string (quote '\"!\"')))
(check === "\"2021-06-08T10:19:00-07:00\"" (jsonize_to_string 2021-06-08T10:19:00-07:00))

(expect_arity_exn (jsonize_to_string))
(expect_arity_exn (jsonize_to_string 1 2))


//=============================================================================
// display_to_string

(check === ""                (display_to_string))
(check === "1"               (display_to_string 1))
(check === "12"              (display_to_string 1 2))
(check === "12null.int"      (display_to_string 1 2 null.int))
(check === "hello"           (display_to_string "hel" (quote lo)))
(check === "[\"a\", b]"      (display_to_string (quote [ "a", b ])))
(check === "2018-11T"        (display_to_string 2018-11T))

(check === "{{{anonymous procedure}}}" (display_to_string (|| null)))
(check === "{{{procedure 'void'}}}"    (display_to_string void))
(check === "{{{void}}}"                (display_to_string (void)))

(check === "a::1"            (display_to_string (quote a::1)))
(check === "a::1b::2"        (display_to_string (quote a::1) (quote b::2)))
(check === "a::\"hel\"b::lo" (display_to_string (quote a::"hel") (quote b::lo)))

// Structs are tricky
(check === "{f:\"a\"}" (display_to_string { f: "a" }))

(check_pred (|r| (or (=== "{f:a,g:b}" r)
                     (=== "{g:b,f:a}" r)))
  (display_to_string (quote { f: a, g: b })))
