// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// A module can `define` a name that's bound by the module's language.
// Unlike binding introduced via `require`, language bindings can be
// shadowed by module-level `define`s.

(require "/fusion/experimental/check")


// Make sure `apply` has a language binding, otherwise we're not checking what
// we want to test.
(check === 3 (apply + 1 [2]))


(module export_fusion_apply "/fusion"
  (provide apply))

(module export_unique_apply "/fusion"
  (define apply 990)
  (provide apply))



(module local "/fusion"
  (define apply 99)
  (define result (+ apply 1))
  (provide result))

(require local)
(check === 100 result)

// Make sure `apply` still has the language binding.
(check === 3 (apply + 1 [2]))


// Module-level `require` can also shadow a language binding.

(module local3 "/fusion"
  (require export_unique_apply)
  (define result (+ apply 1))
  (provide result))

(require local3)
(check === 991 result)

// Make sure `apply` still has the language binding.
(check === 3 (apply + 1 [2]))


// In a module, you cannot redefine a binding that's required, even if the same
// binding is also in the language.

(expect_syntax_exn
  (module redefine_unique_require "/fusion"
    // This imports a different `apply` than the language provides.
    (require (only_in export_fusion_apply apply))
    (define apply 404)))

(expect_syntax_exn
  (module redefine_required_language_binding "/fusion"
    // This imports the same `apply` that the language provides.
    (require (only_in export_fusion_apply apply))
    (define apply 404)))
