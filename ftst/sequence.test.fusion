// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/check"
  "/fusion/list"
  "/fusion/sequence"
  "/testutils")


//==========================================================================
// is_sequence

(check_true (is_sequence null.list))
(check_true (is_sequence []))
(check_true (is_sequence [1]))
(check_true (is_sequence NULL_SEXP))
(check_true (is_sequence EMPTY_SEXP))
(check_true (is_sequence (sexp 1)))
(check_false (is_sequence {}))
(check_false (is_sequence null.null))
(check_false (is_sequence 1))
(check_false (is_sequence "asdf"))
(check_false (is_sequence (quote 'asdf')))
(check_false (is_sequence 1d-1))
(check_false (is_sequence 1e-1))
(check_false (is_sequence 1970-01-01))


//==========================================================================
// append

(define_check (check_same_type seqA seqB)
  (check === (is_sexp seqA) (is_sexp seqB))
  (check === (is_list seqA) (is_list seqB))
  (check === (is_immutable_list seqA) (is_immutable_list seqB))
  (check === (is_mutable_list   seqA) (is_mutable_list   seqB))
  (check === (is_stretchy_list  seqA) (is_stretchy_list  seqB)))


(define (copy_if_mutable s)
  (cond
    ((is_stretchy_list s) (apply annotate (apply stretchy_list s) (annotations s)))
    ((is_mutable_list  s) (apply annotate (apply mutable_list  s) (annotations s)))
    (true s)))


(define adds
  "Like `add` but accepts more than one element to add."
  (lambda rest
    (let [(seq  (head rest)),
          (elts (tail rest))]
      (let loop [(elts elts)]
        (if (is_empty elts)
          seq
          (add (loop (tail elts)) (head elts)))))))


(define_check (check_append_result seqR sequences)
  (lets [(arg0 (element sequences 0)),
         (expected (apply annotate seqR (annotations arg0))),
         (result (apply append sequences))]
//    (displayln "sequences: " sequences)
//    (displayln "expected:" expected)
    (check_same_type arg0 result)
    // Note that we use == rather than === since resulting sexps may have
    // annotations on some of the intermediate pairs.
    (check == expected result)

    // Before calling append_m make sure we don't mutate the original.
    (lets [(arg0_m (copy_if_mutable arg0)),
           (result (apply append_m arg0_m (tail sequences)))]
      (check_same_type arg0 result)
      (check == expected result)
      (unless (is_stretchy_list arg0)
        (check === arg0 arg0_m)))))


(define (fanout sequences)
  '''
Returns sexp of argument-sexps each of which is a sexp of sequences (the
arguments).
  '''
  (let loop [(i 0), (sequences sequences)]
    (if (is_empty sequences)
      (quote (()))
      (let [(arg (head sequences)),
            (ann (int_to_string i))]
        (fold_left
          (lambda (res seq)
            (adds
              (if (is_empty arg)
                // If the argument is empty, add variants
                // that use null instead.
                (let [(the_null (if (is_sexp arg)
                                  (quote null.sexp)
                                  null.list))]
                  (adds res
                    (pair (annotate the_null ann) seq)
                    (pair the_null seq)))
                res)
              (pair (annotate arg ann) seq)
              (pair arg seq)))
          (sexp)
          (loop (+ i 1) (tail sequences)))))))

(define_check (check_append_n seqR sequences)
  (map
    (lambda (args)
      (check_append_result seqR args))
    (fanout sequences)))

(define do_check_append_n
  (lambda rest
    (let [(seqR (head rest)), (sequences (tail rest))]
      (check_append_n seqR sequences))))


(define_check (check_append1 ctorA)
//  (displayln "CHECK2: " ctorA)
  (do_check_append_n (ctorA)     (ctorA))
  (do_check_append_n (ctorA 1)   (ctorA 1))
  (do_check_append_n (ctorA 1 2) (ctorA 1 2)))


(define_check (check_append2 ctorA ctorB)
//  (displayln "CHECK2: " ctorA " " ctorB)
  (do_check_append_n (ctorA)         (ctorA)     (ctorB)     )
  (do_check_append_n (ctorA 3)       (ctorA)     (ctorB 3)   )
  (do_check_append_n (ctorA 3 4)     (ctorA)     (ctorB 3 4) )
  (do_check_append_n (ctorA 1)       (ctorA 1)   (ctorB)     )
  (do_check_append_n (ctorA 1 3)     (ctorA 1)   (ctorB 3)   )
  (do_check_append_n (ctorA 1 3 4)   (ctorA 1)   (ctorB 3 4) )
  (do_check_append_n (ctorA 1 2)     (ctorA 1 2) (ctorB)     )
  (do_check_append_n (ctorA 1 2 3)   (ctorA 1 2) (ctorB 3)   )
  (do_check_append_n (ctorA 1 2 3 4) (ctorA 1 2) (ctorB 3 4) ))

(define_check (check_append3 ctorA ctorB ctorC)
//  (displayln "CHECK3: " ctorA " " ctorB " " ctorC)
  (do_check_append_n (ctorA)             (ctorA)     (ctorB)     (ctorC)     )
  (do_check_append_n (ctorA 5)           (ctorA)     (ctorB)     (ctorC 5)   )
  (do_check_append_n (ctorA 5 6)         (ctorA)     (ctorB)     (ctorC 5 6) )
  (do_check_append_n (ctorA 3)           (ctorA)     (ctorB 3)   (ctorC)     )
  (do_check_append_n (ctorA 3 5)         (ctorA)     (ctorB 3)   (ctorC 5)   )
  (do_check_append_n (ctorA 3 5 6)       (ctorA)     (ctorB 3)   (ctorC 5 6) )
  (do_check_append_n (ctorA 3 4)         (ctorA)     (ctorB 3 4) (ctorC)     )
  (do_check_append_n (ctorA 3 4 5)       (ctorA)     (ctorB 3 4) (ctorC 5)   )
  (do_check_append_n (ctorA 3 4 5 6)     (ctorA)     (ctorB 3 4) (ctorC 5 6) )
  (do_check_append_n (ctorA 1)           (ctorA 1)   (ctorB)     (ctorC)     )
  (do_check_append_n (ctorA 1 5)         (ctorA 1)   (ctorB)     (ctorC 5)   )
  (do_check_append_n (ctorA 1 5 6)       (ctorA 1)   (ctorB)     (ctorC 5 6) )
  (do_check_append_n (ctorA 1 3)         (ctorA 1)   (ctorB 3)   (ctorC)     )
  (do_check_append_n (ctorA 1 3 5)       (ctorA 1)   (ctorB 3)   (ctorC 5)   )
  (do_check_append_n (ctorA 1 3 5 6)     (ctorA 1)   (ctorB 3)   (ctorC 5 6) )
  (do_check_append_n (ctorA 1 3 4)       (ctorA 1)   (ctorB 3 4) (ctorC)     )
  (do_check_append_n (ctorA 1 3 4 5)     (ctorA 1)   (ctorB 3 4) (ctorC 5)   )
  (do_check_append_n (ctorA 1 3 4 5 6)   (ctorA 1)   (ctorB 3 4) (ctorC 5 6) )
  (do_check_append_n (ctorA 1 2)         (ctorA 1 2) (ctorB)     (ctorC)     )
  (do_check_append_n (ctorA 1 2 5)       (ctorA 1 2) (ctorB)     (ctorC 5)   )
  (do_check_append_n (ctorA 1 2 5 6)     (ctorA 1 2) (ctorB)     (ctorC 5 6) )
  (do_check_append_n (ctorA 1 2 3)       (ctorA 1 2) (ctorB 3)   (ctorC)     )
  (do_check_append_n (ctorA 1 2 3 5)     (ctorA 1 2) (ctorB 3)   (ctorC 5)   )
  (do_check_append_n (ctorA 1 2 3 5 6)   (ctorA 1 2) (ctorB 3)   (ctorC 5 6) )
  (do_check_append_n (ctorA 1 2 3 4)     (ctorA 1 2) (ctorB 3 4) (ctorC)     )
  (do_check_append_n (ctorA 1 2 3 4 5)   (ctorA 1 2) (ctorB 3 4) (ctorC 5)   )
  (do_check_append_n (ctorA 1 2 3 4 5 6) (ctorA 1 2) (ctorB 3 4) (ctorC 5 6) ))


(define seqCtors
  (sexp
    sexp list mutable_list stretchy_list))


(let loopA [(ctors seqCtors)]
  (unless (is_empty ctors)
    (let [(ctorA  (head ctors)),
          (others (tail ctors))]
      (check_append1 ctorA)
      (check_append2 ctorA ctorA)
      (check_append3 ctorA ctorA ctorA)
      (unless (is_empty others)
        (let loopB [(ctors others)]
          (unless (is_empty ctors)
            (let [(ctorB  (head ctors)),
                  (others (tail ctors))]
              (check_append2 ctorA ctorB)
              (check_append2 ctorB ctorA)
              (check_append3 ctorA ctorA ctorB)
              (check_append3 ctorA ctorB ctorA)
              (check_append3 ctorA ctorB ctorB)
              (check_append3 ctorB ctorA ctorA)
              (check_append3 ctorB ctorA ctorB)
              (check_append3 ctorB ctorB ctorA)
              (unless (is_empty others)
                (let loopC [(ctors others)]
                (unless (is_empty ctors)
                  (let [(ctorC (head ctors))]
                    (check_append3 ctorA ctorB ctorC)
                    (check_append3 ctorA ctorC ctorB)
                    (check_append3 ctorB ctorA ctorC)
                    (check_append3 ctorB ctorC ctorA)
                    (check_append3 ctorC ctorA ctorB)
                    (check_append3 ctorC ctorB ctorA))
                  (loopC (tail ctors))))))
            (loopB (tail ctors))))))
    (loopA (tail ctors))))


(expect_arity_exn (append))

(expect_argument_exn (append 1))
(expect_argument_exn (append [] 1))
(expect_argument_exn (append [] 1 []))

(expect_argument_exn (append (list) (pair 1 2) []))  // Improper sexp
(expect_argument_exn (append (sexp) (pair 1 2) []))  // Improper sexp


//==========================================================================
// subseq

(define_check (check_subseq orig from to expect)
  (check === expect (subseq orig from to))
  (let [(s (subseq (apply mutable_list orig) from to))]
    (check === expect s)
    (check_pred is_mutable_list s))
  (let [(s (subseq (apply stretchy_list orig) from to))]
    (check === expect s)
    (check_pred is_stretchy_list s))
  (check === (apply sexp expect)
    (subseq (apply sexp orig) from to)))


(check_subseq []      0 0 [])
(check_subseq [1]     0 0 [])
(check_subseq [1]     0 1 [1])
(check_subseq [1]     1 1 [])
(check_subseq [1,2,3] 0 0 [])
(check_subseq [1,2,3] 0 1 [1])
(check_subseq [1,2,3] 0 3 [1,2,3])
(check_subseq [1,2,3] 1 1 [])
(check_subseq [1,2,3] 1 2 [2])
(check_subseq [1,2,3] 1 3 [2,3])
(check_subseq [1,2,3] 0 3 [1,2,3])
(check_subseq [1,2,3] 3 3 [])

(expect_arity_exn (subseq))
(expect_arity_exn (subseq []))
(expect_arity_exn (subseq [] 0 0 0))
(expect_arity_exn (subseq EMPTY_SEXP))
(expect_arity_exn (subseq EMPTY_SEXP 0 0 0))

(expect_argument_exn (subseq 99 0 0))       // 1st arg not a sequence

(expect_argument_exn (subseq null.list 0 0))
(expect_argument_exn (subseq NULL_SEXP 0 0))

(define_check (check_subseq_args ctor)
  (let [(seq (ctor 1 2 3))]
    (expect_argument_exn (subseq seq 4 4))  // expects from <= size
    (expect_argument_exn (subseq seq 1 4))  // expects to <= size
    (expect_argument_exn (subseq seq 2 1))  // expects from <= to

    (expect_argument_exn (subseq seq 4 4))  // expects from <= size
    (expect_argument_exn (subseq seq 1 4))  // expects to <= size
    (expect_argument_exn (subseq seq 2 1))  // expects from <= to

    (expect_argument_exn (subseq seq -1  0 ))   // Negative position
    (expect_argument_exn (subseq seq  0 -1 ))
    (expect_argument_exn (subseq seq "0" 1 ))   // Non-int position
    (expect_argument_exn (subseq seq  0 "1"))
    (expect_argument_exn (subseq seq null.int 1)) // Null position
    (expect_argument_exn (subseq seq 0 null.int))
  )
)

(check_subseq_args list)
(check_subseq_args sexp)


//==========================================================================
// map, choose   (see also list.test.fusion and sexp.test.fusion

(expect_argument_exn (map + null.struct))
(expect_argument_exn (map + {}))

(expect_argument_exn (choose T null.struct))
(expect_argument_exn (choose T {}))


(check === []     (map + null.list))
(check === []     (map + []))
(check === [1, 2] (map + [1, 2]))
(check === [4, 5] (map (lambda (n) (+ 3 n)) [1, 2]))

(check === []    (choose T null.list))
(check === []    (choose F null.list))
(check === []    (choose T []))
(check === []    (choose F []))
(check === [1,2] (choose T [1, 2]))
(check === []    (choose F [1, 2]))

(check === [11, 12]
  (choose (lambda (n) (< 10 n)) [1, 11, 10, 12]))


//==========================================================================
// fold_left

(check ===  0 (fold_left + 0))
(check ===  0 (fold_left + 0 NULL_SEXP))
(check ===  0 (fold_left + 0 EMPTY_SEXP))
(check ===  0 (fold_left + 0 null.list))
(check ===  0 (fold_left + 0 []))
(check === 10 (fold_left + 1 (sexp 2 3 4)))
(check === 10 (fold_left + 1 [2, 3, 4]))
(check === 45 (fold_left + 1 (sexp 2 3) [4, 5] [6, 7] (sexp 8 9)))
(check === 28 (fold_left + 1 (sexp 2 3 4) (sexp 5 6 7 8)))
(check === 28 (fold_left + 1 (sexp 2 3 4 8) (sexp 5 6 7)))
(check === 28 (fold_left + 1 [2, 3, 4] [5, 6, 7, 8]))
(check === 28 (fold_left + 1 [2, 3, 4, 8] [5, 6, 7]))
(check === 28 (fold_left + 1 [2, 3, 4] (sexp 5 6 7 8)))
(check === 28 (fold_left + 1 [2, 3, 4, 8] (sexp 5 6 7)))
(check ===  1 (fold_left + 1 (sexp 2 3) [4, 5] EMPTY_SEXP [6, 7] (sexp 8 9)))
(check ===  1 (fold_left + 1 (sexp 2 3) [4, 5] [] [6, 7] (sexp 8 9)))
(check ===  1 (fold_left + 1 (sexp 2 3) [4, 5] NULL_SEXP [6, 7] (sexp 8 9)))
(check ===  1 (fold_left + 1 (sexp 2 3) [4, 5] null.list [6, 7] (sexp 8 9)))
(let [(v (stretchy_list))]
  (check === 28
    (fold_left (lambda (result a b) (add_m v (sexp result a b)) (+ result a b))
      1 (sexp 2 3 4) [5, 6, 7, 8]))
  // Check visit order
  (check === [(sexp 1 2 5), (sexp 8 3 6), (sexp 17 4 7)] v))
(check === (sexp 5 4 3 2 1)
  (fold_left (lambda (accum e) (pair e accum)) EMPTY_SEXP (sexp 1 2 3 4 5))
  "fold_left reverse sexp")
(check === {a:1,b:2,c:3}
  (fold_left
    (lambda (accum s) (struct_merge accum s))
    {}
    [{a:1}, {b:2}, {c:3}]))

(expect_arity_exn (fold_left +))
(expect_argument_exn (fold_left + 0 {}))
(expect_argument_exn (fold_left + 0 (sexp 2 3 4) {}))
(expect_argument_exn (fold_left + 0 {} (sexp 2 3 4)))
(expect_argument_exn (fold_left {} 0))
