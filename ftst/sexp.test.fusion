// Copyright (c) 2012-2023 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
  "/fusion/list"
  "/fusion/private/sexp"
  "/testutils"
  )


(define valNull  (quote null.sexp))
(define valEmpty (quote ()))
(define val12    (quote (1 2)))


(define _sexp_copy
  (lambda (ctor v)
    (apply annotate
      (if (is_null v)
        v
        (apply ctor v))
      (annotations v))))

(define sexp_copy
  (lambda (v)
    (_sexp_copy sexp v)))

(define mutable_list_copy
  (lambda (v)
    (_sexp_copy mutable_sexp v)))


(define_check (check_mod_f op val args expect)
  "Functional modification check"
  (let [(v (sexp_copy val))]
    (let [(result (apply op v args))]
      (check === expect result "Unexpected result on immutable arg")
      (check === val v "Immutable arg was mutated"))))


//==========================================================================
// Literals

//(check_true (is_null  null.sexp))  // Not valid syntax
//(check_true (is_empty null.sexp))
(check_true (is_null  (quote null.sexp)))
(check_true (is_empty (quote null.sexp)))
(check_true (is_null  (quote a::null.sexp)))
(check_true (is_empty (quote a::null.sexp)))

(check_false (is_null (quote ())))
(check_false (is_null (quote a::())))


(define_check (check_predicates sexp empty)
  (check_pred is_collection sexp)
  (check_pred is_sequence sexp)
  (check_pred is_sexp sexp)
  (check === empty (is_empty sexp))
  // TODO ...
  )


// Construction via literals

(define x "anything")

(check_predicates (quote ())    true)
(check_predicates (quote (0))   false)
(check_predicates (quote (0 T)) false)


// Construction via procedures

(define_check (check_makers maker)
  (check_predicates (apply maker (quote ())) true)
  (check_predicates (apply maker (quote (0))) false)
  (check === EMPTY_SEXP    (apply maker (quote ())))
  (check === (quote (0 1)) (apply maker (quote (0 1)))))

(check_makers sexp)


(check_annotations []            (quote ()))
(check_annotations ["a"]         (quote a::(c)))
(check_annotations ["a","b"]     (quote a::b::(c d)))
(check_annotations ["a","b","a"] (quote a::b::a::(a)))


//==========================================================================
// pair, head, tail


// TODO FUSION-268 is_sexp/is_collection accept any pair, not just proper sexp
// Need to analyze that before releasing this!
(lets [(h (list 1)),
       (t (list 2)),
       (p (pair h t))]
  (check_pred is_collection p)
  (check_pred is_sequence p)
  (check_pred is_sexp p)
  (check ident (head p) h)
  (check ident (tail p) t)
  (check === (pair [1] [2]) p))

(check_void (head NULL_SEXP))
(check_void (tail NULL_SEXP))

(check_void (head EMPTY_SEXP))
(check_void (tail EMPTY_SEXP))


(expect_arity_exn (pair))
(expect_arity_exn (pair 1))
(expect_arity_exn (pair 1 2 3))

(expect_arity_exn (head))
(expect_arity_exn (head (pair 1 2) 3))
(expect_arity_exn (tail))
(expect_arity_exn (tail (pair 1 2) 3))

(expect_argument_exn (head VOID))
(expect_argument_exn (tail VOID))


//==========================================================================
// annotate

(check_mod_f annotate NULL_SEXP []         (quote       null.sexp))
(check_mod_f annotate NULL_SEXP [""]       (quote   ''::null.sexp))
(check_mod_f annotate NULL_SEXP ["a"]      (quote a::   null.sexp))
(check_mod_f annotate NULL_SEXP ["a", "b"] (quote a::b::null.sexp))

(check_mod_f annotate valEmpty []         (quote       ()))
(check_mod_f annotate valEmpty [""]       (quote   ''::()))
(check_mod_f annotate valEmpty ["a"]      (quote a::   ()))
(check_mod_f annotate valEmpty ["a", "b"] (quote a::b::()))

(check_mod_f annotate val12 []         (quote       (1 2)))
(check_mod_f annotate val12 [""]       (quote   ''::(1 2)))
(check_mod_f annotate val12 ["a"]      (quote a::   (1 2)))
(check_mod_f annotate val12 ["a", "b"] (quote a::b::(1 2)))


// Replacing existing annotations
(check_mod_f annotate (quote x::null.sexp) [""]       (quote   ''::null.sexp))
(check_mod_f annotate (quote x::null.sexp) ["a"]      (quote a::   null.sexp))
(check_mod_f annotate (quote x::null.sexp) ["a", "b"] (quote a::b::null.sexp))

(check_mod_f annotate (quote x::()) []         (quote       ()))
(check_mod_f annotate (quote x::()) [""]       (quote   ''::()))
(check_mod_f annotate (quote x::()) ["a"]      (quote a::   ()))
(check_mod_f annotate (quote x::()) ["a", "b"] (quote a::b::()))

(check_mod_f annotate (quote x::(1)) []         (quote       (1)))
(check_mod_f annotate (quote x::(1)) [""]       (quote   ''::(1)))
(check_mod_f annotate (quote x::(1)) ["a"]      (quote a::   (1)))
(check_mod_f annotate (quote x::(1)) ["a", "b"] (quote a::b::(1)))


(expect_argument_exn (annotate NULL_SEXP null))
(expect_argument_exn (annotate NULL_SEXP null.string))
(expect_argument_exn (annotate NULL_SEXP (quote null.symbol)))
(expect_argument_exn (annotate NULL_SEXP 12))


//==========================================================================
// has_key

(check_false (has_key valNull ""))
(check_false (has_key valNull null.int))
(check_false (has_key valNull -1))
(check_false (has_key valNull 0))
(check_false (has_key valNull 1))

(check_false (has_key valEmpty ""))
(check_false (has_key valEmpty null.int))
(check_false (has_key valEmpty -1))
(check_false (has_key valEmpty 0))
(check_false (has_key valEmpty 1))

(check_false (has_key val12 null.string))
(check_false (has_key val12 -1))
(check_false (has_key val12 3))

(check_true (has_key val12 0))
(check_true (has_key val12 1))

(check_true (has_key (sexp null)   0))
(check_true (has_key (sexp false)  0))
(check_true (has_key (sexp (void)) 0))

(expect_arity_exn (has_key))
(expect_arity_exn (has_key []))


//==========================================================================
// first

(check === 1 (first (quote (1))))
(check === 1 (first (sexp 1 2)))

(expect_argument_exn (first (quote null.sexp)))
(expect_argument_exn (first (sexp)))


//==========================================================================
// last

(check === 1 (last (quote (1))))
(check === 2 (last (sexp 1 2)))

(expect_argument_exn (last (quote null.sexp)))
(expect_argument_exn (last (sexp)))


//==========================================================================
// add

(check === (sexp 3 1 2)   (add (sexp 1 2) 3)  )
(check === (sexp [3] 1 2) (add (sexp 1 2) [3])  )


//==========================================================================
// find

(check_void (find F valNull))
(check_void (find F valEmpty))
(check_void (find F val12))
(check === 1 (find T val12))
(check === 2 (find (lambda (e) (= e 2)) val12))


//==========================================================================
// any

(check_false (any T valNull))
(check_false (any T valEmpty))
(check_false (any F val12))
(check_true  (any T val12))

(check_true  (any (lambda (e) (= e "hi")) (sexp "oh" "hi")))
(check_false (any (lambda (e) (= e "ho")) (sexp "oh" "hi")))

// Check that it returns the truthy predicate result, not the selected element
(check === 408
  (any (lambda (e) (when (= e 204) (* e 2)))
    (sexp 123 204 567)))
(check === 1134
  (any (lambda (e) (when (= e 567) (* e 2)))
    (sexp 123 204 567)))

// Check than it returns the last predicate result if none are truthy
(check_pred (conjoin is_null is_int)
  (any (lambda (s) (if (is_void s) null.int null))
    (sexp false (void))))
(check_pred (conjoin is_null is_int)
  (any (lambda (s) (if (is_null s) null.int null))
    (sexp false null.int)))
(check_void
  (any (lambda (s) (if (is_null s) (void) null))
    (sexp false null.int null.list)))


//==========================================================================
// none

(check_true  (none is_truthy valNull))
(check_true  (none is_truthy valEmpty))
(check_true  (none is_truthy (sexp null false)))
(check_false (none is_truthy (sexp 1 2)))

(check_false (none (lambda (e) (= e "hi")) (sexp "oh" "hi")))
(check_true  (none (lambda (e) (= e "ho")) (sexp "oh" "hi")))


//==========================================================================
// every

(check_true (every T valNull))
(check_true (every T valEmpty))
(check_false (every F val12))
(check_true  (every T val12))

(check_false (every (lambda (e) (= e "hi")) (sexp "oh" "hi")))
(check_true  (every (lambda (e) (= e "hi")) (sexp "hi" "hi")))

// Check that it returns the untruthy predicate result
(check_void
  (every (lambda (e) (when (= e 204) e))
    (sexp 123 204 567)))
(check_pred is_null
  (every (lambda (e) (if (= e 123) e null))
    (sexp 123 456 678)))

// Check that `every` returns the last predicate result if all are truthy
(check === 1134
  (every (lambda (e) (when (or (= e 123) (= e 567)) (* e 2)))
    (sexp 123 123 567)))


//==========================================================================
// map

(check === EMPTY_SEXP (map + NULL_SEXP))
(check === EMPTY_SEXP (map + EMPTY_SEXP))
(check === (sexp 1 2) (map + (sexp 1 2)))
(check === (sexp 4 5) (map (lambda (n) (+ 3 n)) (sexp 1 2)))

(check === EMPTY_SEXP (choose T EMPTY_SEXP))
(check === EMPTY_SEXP (choose F EMPTY_SEXP))
(check === EMPTY_SEXP (choose T NULL_SEXP))
(check === EMPTY_SEXP (choose F NULL_SEXP))
(check === (sexp 1 2) (choose T (sexp 1 2)))
(check === EMPTY_SEXP (choose F (sexp 1 2)))

(check === (sexp 11 12)
  (choose (lambda (n) (< 10 n)) (sexp 1 11 10 12)))


//==========================================================================
// do

(check_void (do (lambda (x) (+ 1 x)) (quote (2 3))))

(let [(v (stretchy_list))]
  (do (lambda (x) (add_m v (+ 1 x))) (quote (2 3)))
  (check === [3, 4] v))


//==========================================================================
// size

(check === 0 (size (quote ())))
(check === 1 (size (sexp 1)))
(check === 2 (size (sexp 1 51)))
(check === 2 (size (pair 1 (pair 2 (quote ())))))

(expect_argument_exn (size (pair 1 215)))


//==========================================================================
// sexp_append

(check === EMPTY_SEXP
  (sexp_append EMPTY_SEXP EMPTY_SEXP))
(check === EMPTY_SEXP
  (sexp_append EMPTY_SEXP NULL_SEXP))
(check === EMPTY_SEXP
  (sexp_append NULL_SEXP EMPTY_SEXP))
(check === EMPTY_SEXP
  (sexp_append NULL_SEXP NULL_SEXP))

(check === (sexp 1)
  (sexp_append (sexp 1) EMPTY_SEXP))
(check === (sexp 1)
  (sexp_append (sexp 1) NULL_SEXP))

(check === (sexp 1 2 3)
  (sexp_append (sexp 1 2 3) EMPTY_SEXP))
(check === (sexp 1 2 3)
  (sexp_append (sexp 1 2 3) NULL_SEXP))

(let [(s123 (sexp 1 2 3))]
  (check ident s123
    (sexp_append EMPTY_SEXP s123))
  (check ident s123
    (sexp_append NULL_SEXP s123))
  (let [(r (sexp_append (sexp 4 5 6) s123))]
    (check === (sexp 4 5 6 1 2 3) r)
    (check ident s123 (tail (tail (tail r))))))

(check === (sexp 1 2)
  (sexp_append (sexp 1) (sexp 2)))

(expect_argument_exn (sexp_append (sexp) (list)))
(expect_argument_exn (sexp_append (list) (sexp)))

// TODO test annotations


//==========================================================================
// reverse

(check === EMPTY_SEXP
  (reverse EMPTY_SEXP))
(check === EMPTY_SEXP
  (reverse (quote ann::())))
(check === NULL_SEXP
  (reverse NULL_SEXP))
(check === NULL_SEXP
  (reverse (quote ann::null.sexp)))

(check === (quote (   1))     (reverse (quote    (   1))))
(check === (quote (   1))     (reverse (quote a::(   1))))
(check === (quote (a::1))     (reverse (quote a::(a::1))))

(check === (quote (3    2 1)) (reverse (quote    (1    2 3))))
(check === (quote (3    2 1)) (reverse (quote a::(1    2 3))))
(check === (quote (3 a::2 1)) (reverse (quote a::(1 a::2 3))))

(check === (quote (null.sexp)) (reverse (quote (null.sexp))))


// Non-sexp arguments
(expect_argument_error (reverse []))
(expect_argument_error (reverse "hello"))
(expect_argument_error (reverse {}))

// Improper sexps
(expect_argument_error (reverse (pair 1 2)))
(expect_argument_error (reverse (pair 1 (quote null.sexp))))


"SUCCESS"
