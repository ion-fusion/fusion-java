// Copyright (c) 2013 Amazon.com, Inc.  All rights reserved.

(require "/check")
(require "/fusion/syntax")


// Here we are making sure that the macro-introduced binding `c` is visible
// to other code from the macro.
(define_syntax define_c
  (lambda (stx)
    (quasisyntax
      (define (c) c))))
(define_c)

// Similar, but within a module.  Here `d` is unbound where it occurs.
(module M1 '/fusion/base'
  (require "/fusion/syntax")
  (define_syntax define_d
    (lambda (stx)
      (quasisyntax
        (define (d) d))))
  (provide define_d))
(require M1)
(define_d)


//============================================================================


(define top "outside")

// Macro that defines a binding with "private" identifier.
// Use of this macro crashed the compiler at one point.
(define_syntax define_top
  (lambda (stx)
    (quasisyntax
      (define top (unsyntax (syntax_get stx 1))))))
(define_top "macro1")
(check = top "outside")


// Similar for macro exported from a module
(module M2 '/fusion/base'
  (require "/fusion/syntax")
  (define_syntax define_top
    (lambda (stx)
      (quasisyntax
        (begin
          (define top (unsyntax (syntax_get stx 1)))
          (define (unsyntax (syntax_get stx 2)) (lambda () top))
          ))))
   (provide define_top))
(require M2)
(define_top "macro2" get_top_1)
(check = top "outside")
(check = (get_top_1) "macro2")


// Now try using the macro at module level
(module M3 '/fusion/base'
  (require M2 "/check")
  (define top "in_M3")
  (define_top "macro_in1" get_top_in1)
  (check = top "in_M3")
  (check = (get_top_in1) "macro_in1")
  (define_top "macro_in2" get_top_in2)
  (check = top "in_M3")
  (check = (get_top_in2) "macro_in2")
  )
(require M3)
