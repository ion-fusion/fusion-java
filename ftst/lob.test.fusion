// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/check"
  "/fusion/procedure"
  "/fusion/lob")

(module check_bindings '/fusion/lob'
  lob_to_hex)

(define is_not_blob (negate is_blob))
(define is_not_clob (negate is_clob))

(check === "08107f" (lob_to_hex {{ CBB/ }}))
(check === "" (lob_to_hex {{ }}))
(check === null.string (lob_to_hex null.blob))

(check === "48656c6c6f" (lob_to_hex {{ "Hello" }}))
(check === "" (lob_to_hex {{ "" }}))
(check === null.string (lob_to_hex null.clob))

(expect_arity_exn (lob_to_hex))
(expect_arity_exn (lob_to_hex {{ CBB/ }} {{ }}))

(expect_argument_exn (lob_to_hex "not_a_lob"))

(check_pred is_blob null.blob)
(check_pred is_blob (quote null.blob))
(check_pred is_blob {{}})
(check_pred is_blob (quote {{}}))
(check_pred is_blob {{1234}})
(check_pred is_blob (quote {{1234}}))

(check_pred is_not_blob null.clob)
(check_pred is_not_blob {{""}})
(check_pred is_not_blob {{"abcd"}})


(check_pred is_clob null.clob)
(check_pred is_clob (quote null.clob))
(check_pred is_clob {{""}})
(check_pred is_clob (quote {{""}}))
(check_pred is_clob {{"abcd"}})
(check_pred is_clob (quote {{"abcd"}}))

(check_pred is_not_clob null.blob)
(check_pred is_not_clob {{}})
(check_pred is_not_clob {{1234}})


//==========================================================================
// lob_digest

(define test_vectors  // From https://www.di-mgt.com.au/sha_testvectors.html
  [
    { data:      {{}},
      'SHA-256': {{47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=}},
      'SHA-512': {{z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg==}},
    },
    { data:      {{YWJj}},   // "abc"
      'SHA-256': {{ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0=}},
      'SHA-512': {{3a81oZNherrMQXNJriBBMRLm+k6JqX6iCp7u5ktV05ohkpkqJ0/BqDa6PCOj/uu9RU1EI2Q86A4qmslPpUyknw==}},
    },
    { data:      {{"abc"}},
      'SHA-256': {{ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0=}},
      'SHA-512': {{3a81oZNherrMQXNJriBBMRLm+k6JqX6iCp7u5ktV05ohkpkqJ0/BqDa6PCOj/uu9RU1EI2Q86A4qmslPpUyknw==}},
    },
    { data:      {{"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"}},
      'SHA-256': {{JI1qYdIGOLjlwCaTDD5gOaM85Flk/yFn9uzt1BnbBsE=}},
      'SHA-512': {{IEqPxt2oLwoM7XvrjgikFlfBbvRosiioJ5vjMacDwzWW/RXBOxsH+aodO+pXeJygMa2Fx6cd1wNU7GMSOMo0RQ==}},
    },
    { data:      {{"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"}},
      'SHA-256': {{z1sWp3ivg4ADbOWeewSSNwskmxHo8HpRr6xFA3r+6dE=}},
      'SHA-512': {{jpWbddrjE9qM9PcoFPwUP493ecbrn3+hcpmurbaIkBhQHSieSQD35DMbmd7EtUM6x9Mp7rbdJlReluVbh0vpCQ==}},
    },
  ])


(define_check (check_vector vector algorithm)
  (lets [(data     (. vector "data")),
         (expected (. vector algorithm)),
         (actual   (lob_digest data algorithm))]
    (check === expected actual)))

(do (|vector|
      (check_vector vector "SHA-256")
      (check_vector vector "SHA-512"))
  test_vectors)


// Failure mode: bad data
(expect_argument_error (lob_digest null.blob "SHA-256"))

(expect_argument_error (lob_digest null.clob "SHA-256"))
(expect_argument_error (lob_digest [0]       "SHA-256"))
(expect_argument_error (lob_digest "abc"     "SHA-256"))

// Failure mode: bad algorithm
(expect_argument_error (lob_digest {{}} "SHA-1"))             // Not supported, it's deprecated
(expect_argument_error (lob_digest {{}} "SHA-25"))            // Not a valid digest algorithm
(expect_argument_error (lob_digest {{}} ""))                  // Not a valid digest algorithm
(expect_argument_error (lob_digest {{}} null.string))         // Not a valid digest algorithm
(expect_argument_error (lob_digest {{}} (quote 'SHA-256')))   // Symbols not allowed for algorithm argument
