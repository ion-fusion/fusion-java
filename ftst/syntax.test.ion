// Copyright (c) 2012-2013 Amazon.com, Inc.  All rights reserved.

(require
  "/check"
  "/fusion/experimental/syntax"
  "/fusion/list"
  "/fusion/sexp")

(define id (quote_syntax identifier))
(define some_syntax (quote_syntax (op arg)))

// This should strip lexical data (and per Racket, location and properties)
(datum_to_syntax some_syntax)

(datum_to_syntax some_syntax id)
(datum_to_syntax null id)
(datum_to_syntax "hello" id)
(datum_to_syntax (quote s) id)

(datum_to_syntax null.list id)
(datum_to_syntax [] id)
(datum_to_syntax [id] id)


//==========================================================================
// is_identifier

(check_false (is_identifier (quote_syntax "a")))
(check_false (is_identifier (quote a)))
(check_false (is_identifier (quote "a")))

(define (check_identifier expected_sym v)
  (check_true (is_syntax v))
  (check_true (is_identifier v))
  (let [(sym (syntax_unwrap v))]
    (check_true (is_symbol sym))
    (check = expected_sym sym)))

(check_identifier (quote a) (quote_syntax a))


//==========================================================================
// syntax_to_datum


(check = true        (syntax_to_datum (quote_syntax true)))
(check = 159         (syntax_to_datum (quote_syntax 159)))
//(check = 2.57e0      (syntax_to_datum (quote_syntax 2.57e0)))   // TODO
(check = 2.57        (syntax_to_datum (quote_syntax 2.57)))
(check = 2013-02-08T (syntax_to_datum (quote_syntax 2013-02-08T)))
(check = (quote u)   (syntax_to_datum (quote_syntax u)))
(check = "unwrap"    (syntax_to_datum (quote_syntax "unwrap")))
// TODO test blob, clob

(check ion_equals (syntax_to_datum (quote_syntax a::null.sexp))
  (quote a::null.sexp))
(check ion_equals (syntax_to_datum (datum_to_syntax (quote a::null.sexp)))
  (quote a::null.sexp))

(check ion_equals (syntax_to_datum (quote_syntax a::()))
  (quote a::()))
(check ion_equals (syntax_to_datum (datum_to_syntax (quote a::())))
  (quote a::()))
(check ion_equals (syntax_to_datum (datum_to_syntax (quote_syntax a::())))
  (quote a::()))
(check ion_equals (syntax_to_datum (datum_to_syntax (quasisyntax a::())))
  (quote a::()))
(check ion_equals (syntax_to_datum (quote_syntax a::(b)))
  (quote a::(b)))
(check ion_equals (syntax_to_datum (quasisyntax a::(b)))
  (quote a::(b)))
(check ion_equals (syntax_to_datum (datum_to_syntax (quote a::(b))))
  (quote a::(b)))
(check ion_equals (syntax_to_datum (datum_to_syntax (quote_syntax a::(b))))
  (quote a::(b)))
(check ion_equals (syntax_to_datum (datum_to_syntax (quasisyntax a::(b))))
  (quote a::(b)))
(check ion_equals (syntax_to_datum (quote_syntax a::(b c)))
  (quote a::(b c)))


(check ion_equals
  (syntax_to_datum (quasisyntax a::(b)))
  (quote a::(b)) "")
(check ion_equals
  (syntax_to_datum (quasisyntax a::(b (unsyntax (quote_syntax c)))))
  (quote a::(b c)) "")


(lets [(stx (quote_syntax [a, 2])),
       (unwrapped (syntax_to_datum stx))]
  (check_equal (quote [a, 2]) unwrapped ""))

(lets [(stx (quote_syntax (a {f:2, g:["hi"]}))),
       (unwrapped (syntax_to_datum stx))]
  (check = (quote a) (head unwrapped))
  (check = 2 (. unwrapped 1 "f") "f")
  (check_equal ["hi"] (. unwrapped 1 "g") "g"))


//==========================================================================
// syntax_unwrap   aka syntax-e


(check = true        (syntax_unwrap (quote_syntax true)))
(check = 159         (syntax_unwrap (quote_syntax 159)))
//(check = 2.57e0      (syntax_unwrap (quote_syntax 2.57e0)))   // TODO
(check = 2.57        (syntax_unwrap (quote_syntax 2.57)))
(check = 2013-02-08T (syntax_unwrap (quote_syntax 2013-02-08T)))
(check = (quote u)   (syntax_unwrap (quote_syntax u)))
(check = "unwrap"    (syntax_unwrap (quote_syntax "unwrap")))
// TODO test blob, clob

(lets [(stx (quote_syntax [a, 2])),
       (unwrapped (syntax_unwrap stx))]
  (check_true (is_list unwrapped))
  (let [(u1 (syntax_unwrap (list_ref unwrapped 1)))]
    (check_identifier (quote a) (list_ref unwrapped 0))
    (check = 2 u1)))

(check ion_equals (syntax_unwrap (quote_syntax a::null.sexp))
  (quote a::null.sexp))
(check ion_equals (syntax_unwrap (quote_syntax a::()))
  (quote a::()))

(lets [(stx (quote_syntax a::(b 2))),
       (unwrapped (syntax_unwrap stx))]
  (check_annotations unwrapped ["a"])
  (check_true (is_pair unwrapped))
  (let [(h (head unwrapped)),
        (t (tail unwrapped))]
    (check_true (is_identifier h))
    (check = (quote b) (syntax_unwrap h))
    (check_true (is_pair t))
    (check = 1 (size t))
    (check = 2 (syntax_unwrap (head t)))))

(define s (quote_syntax (1 2 3)))
(define se (syntax_unwrap s))
(check_true (is_pair (tail se)))
