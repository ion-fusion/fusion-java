// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/check"
  "/testutils"
)


//==========================================================================
// element

// Check good cases

(check === 0 (element [0,1] 0))
(check === 1 (element [0,1] 1))

(check === 0 (element (sexp 0 1) 0))
(check === 1 (element (sexp 0 1) 1))

(check === 0 (element {f:0,g:1} "f"))


// Check key out-of-bounds

(expect_argument_exn (element null.list 0))
(expect_argument_exn (element [0,1] null.int))
(expect_argument_exn (element [0,1] -1))
(expect_argument_exn (element [0,1] 2))

(expect_argument_exn (element (quote null.sexp) 0))
(expect_argument_exn (element (sexp 0 1) null.int))
(expect_argument_exn (element (sexp 0 1) -1))
(expect_argument_exn (element (sexp 0 1) 2))

(expect_argument_exn (element null.struct ""))
(expect_argument_exn (element {f:0,g:1} null.string))
(expect_argument_exn (element {f:0,g:1} "h"))


// Check key has bad type

(expect_argument_exn (element [0,1] "f"))
(expect_argument_exn (element [0,1] first))

(expect_argument_exn (element (sexp 0 1) "f"))
(expect_argument_exn (element (sexp 0 1) first))

(expect_argument_exn (element {f:0,g:1} 0))
(expect_argument_exn (element {f:0,g:1} (lambda (struct) (void))))


// Check collection has bad type

(expect_argument_exn (element false 0))
(expect_argument_exn (element (void) (void)))


//==========================================================================
// elt

// Check good cases

(check === 0 (elt [0,1] 0))
(check === 1 (elt [0,1] 1))

(check === 0 (elt (sexp 0 1) 0))
(check === 1 (elt (sexp 0 1) 1))

(check === 0 (elt {f:0,g:1} "f"))

// elt accepts a void "collection"
(check_void (elt (void) 1))


// Check key out-of-bounds

(check_void (elt null.list 0))
(check_void (elt [0,1] null.int))
(check_void (elt [0,1] -1))
(check_void (elt [0,1] 2))

(check_void (elt (quote null.sexp) 0))
(check_void (elt (sexp 0 1) null.int))
(check_void (elt (sexp 0 1) -1))
(check_void (elt (sexp 0 1) 2))

(check_void (elt null.struct ""))
(check_void (elt {f:0,g:1} null.string))
(check_void (elt {f:0,g:1} "h"))


// Check key has bad type

(check_void (elt [0,1] "f"))
(check_void (elt [0,1] first))

(check_void (elt (sexp 0 1) "f"))
(check_void (elt (sexp 0 1) first))

(check_void (elt {f:0,g:1} 0))
(check_void (elt {f:0,g:1} (lambda (struct) (void))))


// Check collection has bad type

(expect_argument_exn (elt false 0))


//==========================================================================
// dot

// No path

(check_void (. (void)))
(check === 7287 (. 7287))
(check === []   (. []  ))


// Check key parts

(check === 0 (. [0,1,2,3] 0))
(check === 1 (. [0,1,2,3] 1))

(check === 0 (. (sexp 0 1 2 3) 0))
(check === 1 (. (sexp 0 1 2 3) 1))

(check === 1   (. {f:1,g:[2]} "f"))
(check === [2] (. {f:1,g:[2]} "g"))

(check === "oy" (. {f:{g:"oy"}, h:true} "f" (quote g)))
(check === 1    (. {f:1,g:[2]} (quote f)))


// Check procedure parts

(check === 4 (. [0,1,2,3] size))
(check === 4 (. [0,1,2,3] I size))

(check === 0            (. (sexp 0 1 2 3) head))
(check === (sexp 1 2 3) (. (sexp 0 1 2 3) tail))
(check === (sexp 2 3)   (. (sexp 0 1 2 3) tail I tail))
(check === 2            (. (sexp 0 1 2 3) tail tail head))

(check === 3 (. [1,2,3] I size I))


// Check key out-of-bounds

(check_void (. {f:1} "g"))
(check_void (. {f:1,g:[2]} "g" 1 1))
(check_void (. [1] 1))
(check_void (. [1, {f:2}] 1 "g" 1))
