// Copyright (c) 2013-2014 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
)


// Here's the bindings we expect to be available:
(module check_bindings '/fusion/timestamp'
  [ '<', '<=', '=', '>=', '>',
    epoch_millis_to_timestamp, is_timestamp, string_to_timestamp,
    timestamp_now, timestamp_to_epoch_millis, timestamp_to_string
  ])


//============================================================================
// Comparisons

(define_check (check_comparisons lo hi)
  (check <  lo hi)
  (check <= lo hi)
  (check =  lo lo)
  (check =  hi hi)
  (check >= hi lo)
  (check >  hi lo))

(check_comparisons 1980T 1981T)
(check_comparisons 0001T 0001-02T)

(check_comparisons (quote f::1980T   ) (quote e::1981T))
(check_comparisons (quote f::1980-02T) (quote e::1980-03T))


//============================================================================
// timestamp_to_epoch_millis, epoch_millis_to_timestamp

// Note that it always returns a decimal
(check ===  0.    (timestamp_to_epoch_millis 1970-01-01                ))
(check ===  1.    (timestamp_to_epoch_millis 1970-01-01T00:00:00.001Z  ))
(check ===  1.23  (timestamp_to_epoch_millis 1970-01-01T00:00:00.00123Z))
(check ===  1000. (timestamp_to_epoch_millis 1970-01-01T00:00:01Z      ))
(check === -1000. (timestamp_to_epoch_millis 1969-12-31T23:59:59Z      ))

(check === (- 1.23 (* 60 /*minutes*/ 60 /*seconds*/ 1000 /*millis*/))
  (timestamp_to_epoch_millis 1970-01-01T00:00:00.00123+01:00))


(check === 1969-12-31T23:59:59.9990Z   (epoch_millis_to_timestamp -1.0))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp -0.))
// TODO FUSION-305 Checks not working due to IONJAVA-400
//(check === 1970-01-01T00:00:00Z        (epoch_millis_to_timestamp 0d3))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp 0.))
(check === 1970-01-01T00:00:00.0000Z   (epoch_millis_to_timestamp 0.0))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp 0.))
(check === 1970-01-01T00:00:00.000000Z (epoch_millis_to_timestamp 0.000))
(check === 1970-01-01T00:00:00.00123Z  (epoch_millis_to_timestamp 1.23))

(check === 1969-12-31T23:59:59.999Z    (epoch_millis_to_timestamp -1))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp 0))
//(check === 1970-01-01T00:00:01Z        (epoch_millis_to_timestamp 1d3))
(check === 1970-01-01T00:00:01.000Z    (epoch_millis_to_timestamp 1000))
(check === 1970-01-01T00:00:01.001Z    (epoch_millis_to_timestamp 1001))



//============================================================================
// string_to_timestamp

(check === null.timestamp (string_to_timestamp null.string))
(check === null.string    (timestamp_to_string null.timestamp))


(define_check (check_conversion string time)
  (check === time   (string_to_timestamp string))
  (check === string (timestamp_to_string time)))

(check_conversion "2013T"                       2013T)
(check_conversion "2013-11T"                    2013-11T)
(check_conversion "2013-11-13"                  2013-11-13T)
(check_conversion "2013-11-13T17:33Z"           2013-11-13T17:33Z)
(check_conversion "2013-11-13T17:33:12.0-08:00" 2013-11-13T17:33:12.0-08:00)


(expect_argument_exn (string_to_timestamp 12))
(expect_argument_exn (string_to_timestamp ""))
(expect_argument_exn (string_to_timestamp "not a timestamp"))
(expect_argument_exn (string_to_timestamp "null.timestamp"))

(expect_argument_exn (string_to_timestamp " 2013T"))
(expect_argument_exn (string_to_timestamp "2013T "))
(expect_argument_exn (string_to_timestamp "2013T,"))
(expect_argument_exn (string_to_timestamp "2013-11-13T "))
(expect_argument_exn (string_to_timestamp "2013-11-13T17:35Z "))
(expect_argument_exn (string_to_timestamp "2013-11-13T17:35-00:00 "))

(expect_argument_exn (timestamp_to_string 12))
