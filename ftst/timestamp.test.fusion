// Copyright (c) 2013-2018 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
)


// Here's the bindings we expect to be available:
(module check_bindings '/fusion/timestamp'
  [ '<', '<=', '=', '>=', '>',
    adjust_year, adjust_month, adjust_day,
    adjust_hour, adjust_minute, adjust_second, timestamp_put_offset,
    epoch_millis_to_timestamp, is_timestamp, string_to_timestamp,
    timestamp_now, timestamp_to_epoch_millis, timestamp_to_string,
    timestamp_at_year, timestamp_at_month, timestamp_at_day,
    timestamp_at_minute, timestamp_at_second,
    timestamp_year, timestamp_month, timestamp_day,
    timestamp_hour, timestamp_minute, timestamp_second,
    timestamp_with_offset, timestamp_offset
  ])


// Comparisons are tested in compare.test.fusion


//============================================================================

(require "/fusion/timestamp")


(define_check (check_adjust_args proc)
  (expect_arity_exn (proc))
  (expect_arity_exn (proc 2012T))
  (expect_arity_exn (proc 2012T 1 2))

  (expect_argument_exn (proc 1 1))
  (expect_argument_exn (proc 1234T 1.)

  (expect_argument_exn (proc 2014T 2147483648))))  // Bigger than Java MAX_INT

(check_adjust_args adjust_year)
(check_adjust_args adjust_month)
(check_adjust_args adjust_day)
(check_adjust_args adjust_hour)
(check_adjust_args adjust_minute)



(check === 2011T      (adjust_year 2012T      -1))
(check === 2012T      (adjust_year 2012T       0))
(check === 2013T      (adjust_year 2012T       1))
(check === 2007-02-28 (adjust_year 2012-02-29 -5))
(check === 2008-02-29 (adjust_year 2012-02-29 -4))
(check === 2016-02-29 (adjust_year 2012-02-29  4))
(check === 2017-02-28 (adjust_year 2012-02-29  5))


(check === 2013T       (adjust_month 2012T    12))
(check === 2011-12T    (adjust_month 2012-04T -4))
(check === 2012-03T    (adjust_month 2012-04T -1))
(check === 2012-05T    (adjust_month 2012-04T  1))
(check === 2013-01T    (adjust_month 2012-04T  9))
(check === 2011-12-23T (adjust_month 2012-04-23T -4))
(check === 2012-03-23T (adjust_month 2012-04-23T -1))
(check === 2012-05-23T (adjust_month 2012-04-23T  1))
(check === 2013-01-23T (adjust_month 2012-04-23T  9))

(check === 2013-01-23T19:03:23.45678+12:34
  (adjust_month 2012-04-23T19:03:23.45678+12:34  9))

(check === 2012-03-01T19:03:23.45678+12:34
  (adjust_day 2012-01-31T19:03:23.45678+12:34  30))

(check === 2012-02-29T03:03:23.45678+12:34
  (adjust_hour 2012-02-28T02:03:23.45678+12:34 25))

(check === 2012-02-29T03:03:23.45678+12:34
  (adjust_minute 2012-02-28T02:03:23.45678+12:34 (* 25 60)))

(check === 2012-02-29T03:03:23.45678+12:34
  (adjust_second 2012-02-28T02:03:23.45678+12:34 (* 25 60 60)))


//============================================================================
// timestamp_to_epoch_millis, epoch_millis_to_timestamp

// Note that it always returns a decimal
(check ===  0.    (timestamp_to_epoch_millis 1970-01-01                ))
(check ===  1.    (timestamp_to_epoch_millis 1970-01-01T00:00:00.001Z  ))
(check ===  1.23  (timestamp_to_epoch_millis 1970-01-01T00:00:00.00123Z))
(check ===  1000. (timestamp_to_epoch_millis 1970-01-01T00:00:01Z      ))
(check === -1000. (timestamp_to_epoch_millis 1969-12-31T23:59:59Z      ))

(check === (- 1.23 (* 60 /*minutes*/ 60 /*seconds*/ 1000 /*millis*/))
  (timestamp_to_epoch_millis 1970-01-01T00:00:00.00123+01:00))


(check === 1969-12-31T23:59:59.9990Z   (epoch_millis_to_timestamp -1.0))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp -0.))
(check === 1970-01-01T00:00:00Z        (epoch_millis_to_timestamp 0d3))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp 0.))
(check === 1970-01-01T00:00:00.0000Z   (epoch_millis_to_timestamp 0.0))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp 0.))
(check === 1970-01-01T00:00:00.000000Z (epoch_millis_to_timestamp 0.000))
(check === 1970-01-01T00:00:00.00123Z  (epoch_millis_to_timestamp 1.23))

(check === 1969-12-31T23:59:59.999Z    (epoch_millis_to_timestamp -1))
(check === 1970-01-01T00:00:00.000Z    (epoch_millis_to_timestamp 0))
(check === 1970-01-01T00:00:01Z        (epoch_millis_to_timestamp 1d3))
(check === 1970-01-01T00:00:01.000Z    (epoch_millis_to_timestamp 1000))
(check === 1970-01-01T00:00:01.001Z    (epoch_millis_to_timestamp 1001))



//============================================================================
// string_to_timestamp

(check === null.timestamp (string_to_timestamp null.string))
(check === null.string    (timestamp_to_string null.timestamp))


(define_check (check_conversion string time)
  (check === time   (string_to_timestamp string))
  (check === string (timestamp_to_string time)))

(check_conversion "2013T"                       2013T)
(check_conversion "2013-11T"                    2013-11T)
(check_conversion "2013-11-13"                  2013-11-13T)
(check_conversion "2013-11-13T17:33Z"           2013-11-13T17:33Z)
(check_conversion "2013-11-13T17:33:12.0-08:00" 2013-11-13T17:33:12.0-08:00)


(expect_argument_exn (string_to_timestamp 12))
(expect_argument_exn (string_to_timestamp ""))
(expect_argument_exn (string_to_timestamp "not a timestamp"))
(expect_argument_exn (string_to_timestamp "null.timestamp"))

(expect_argument_exn (string_to_timestamp " 2013T"))
(expect_argument_exn (string_to_timestamp "2013T "))
(expect_argument_exn (string_to_timestamp "2013T,"))
(expect_argument_exn (string_to_timestamp "2013-11-13T "))
(expect_argument_exn (string_to_timestamp "2013-11-13T17:35Z "))
(expect_argument_exn (string_to_timestamp "2013-11-13T17:35-00:00 "))

(expect_argument_exn (timestamp_to_string 12))

//============================================================================
// timestamp

(expect_arity_exn (timestamp 2016 7 1 10 7 45 -420 10))
(expect_arity_exn (timestamp))

(expect_argument_exn (timestamp 2016 6 6 14))
(expect_argument_exn (timestamp 0 6 6 14 46 4 -420))
(expect_argument_exn (timestamp 10000 6 6 14 46 4 -420))
(expect_argument_exn (timestamp 2016 0 6 14 46 4 -420))
(expect_argument_exn (timestamp 2016 13 6 14 46 4 -420))
(expect_argument_exn (timestamp 2016 6 0 14 46 4 -420))
(expect_argument_exn (timestamp 2016 6 31 14 46 4 -420))
(expect_argument_exn (timestamp 2016 6 6 -1 46 4 -420))
(expect_argument_exn (timestamp 2016 6 6 25 46 4 -420))
(expect_argument_exn (timestamp 2016 6 6 14 -1 4 -420))
(expect_argument_exn (timestamp 2016 6 6 14 60 4 -420))
(expect_argument_exn (timestamp 2016 6 6 14 46 -1 -420))
(expect_argument_exn (timestamp 2016 6 6 14 46 60 -420))
(expect_argument_exn (timestamp 2016 6 6 14 46 60 -1440))
(expect_argument_exn (timestamp 2016 6 6 14 46 60 1440))
(expect_argument_exn (timestamp null))
(expect_argument_exn (timestamp null.int))
(expect_argument_exn (timestamp 2016 6 6 null.int))
(expect_argument_exn (timestamp 2016 6 6 null))
(expect_argument_exn (timestamp "not an int"))
(expect_argument_exn (timestamp [2016, 6, 6, 14, 46, 4]))
(expect_argument_exn (timestamp (sexp 2016 6 6 14 46 4)))
(expect_argument_exn (timestamp 2016 (void) 6))
(expect_argument_exn (timestamp (void) (void) (void) (void) (void) (void) (void)))
(expect_argument_exn (timestamp (void)))
(expect_argument_exn (timestamp 2016 6 6 14 (void)))
(expect_argument_exn (timestamp 2016 6 6 14 (void) (void) -420))
(expect_argument_exn (timestamp 2016 6 6 14 46 -4.539 -420))
(expect_argument_exn (timestamp 2016 6 6 14 46 -0.539 -420))
(expect_argument_exn (timestamp 2016 6 6 14 46 60.0 -420))
(expect_argument_exn (timestamp 2015 2 29 0 0 0.000 0))

// expected use cases
(check === 2016-07-01T10:07:45.462-07:00 (timestamp 2016 7 1 10 7 45.462 -420))
(check === 2016-07-01T10:07:45.462-00:00 (timestamp 2016 7 1 10 7 45.462 (void)))
(check === 2016-07-01T10:07-07:00 (timestamp 2016 7 1 10 7 (void) -420))
(check === 2016-07-01T10:07:45-07:00 (timestamp 2016 7 1 10 7 45 -420))
(check === 2016-07-01T10:07:45-00:00 (timestamp 2016 7 1 10 7 45))
(check === 2016-07-01T10:07-00:00 (timestamp 2016 7 1 10 7))
(check === 2016-07-01T (timestamp 2016 7 1))
(check === 2016-07T (timestamp 2016 7))
(check === 2016T (timestamp 2016))

// acceptable edge cases
(check === 2018T (timestamp 2018 (void)))
(check === 2018T (timestamp 2018 (void) (void)))
(check === 2018T (timestamp 2018 (void) (void) (void)))
(check === 2018T (timestamp 2018 (void) (void) (void) (void)))
(check === 2018T (timestamp 2018 (void) (void) (void) (void) (void)))
(check === 2018T (timestamp 2018 (void) (void) (void) (void) (void) (void)))

(check === 2016-07-01T (timestamp 2016 7 1 (void) (void) (void) -420))
(check === 2016-07-01T10:07-00:00 (timestamp 2016 7 1 10 7 (void) (void)))
(check === 2016-07-01T10:07-00:00 (timestamp 2016 7 1 10 7 (void)))

//============================================================================
// timestamp_at_year

(expect_argument_exn (timestamp_at_year (void)))
(expect_argument_exn (timestamp_at_year null.timestamp))
(expect_argument_exn (timestamp_at_year "not a timestamp"))

(check === 2016T (timestamp_at_year 2016T))
(check === 2016T (timestamp_at_year 2016-06-06T16:25:16Z))
(check === 2016T (timestamp_at_year 2016-06-06T16:25:16-07:00))
(check === 2016T (timestamp_at_year 2016-01-01T01:00+03:00))

//============================================================================
// timestamp_at_month

(expect_argument_exn (timestamp_at_month (void)))
(expect_argument_exn (timestamp_at_month null.timestamp))
(expect_argument_exn (timestamp_at_month "not a timestamp"))

(check === 2016-01T (timestamp_at_month 2016T))

(check === 2016-06T (timestamp_at_month 2016-06T))
(check === 2016-06T (timestamp_at_month 2016-06-06T16:25:16Z))
(check === 2016-06T (timestamp_at_month 2016-06-06T16:25:16-07:00))
(check === 2016-06T (timestamp_at_month 2016-06-01T01:00+03:00))

//============================================================================
// timestamp_at_day

(expect_argument_exn (timestamp_at_day (void)))
(expect_argument_exn (timestamp_at_day null.timestamp))
(expect_argument_exn (timestamp_at_day "not a timestamp"))

(check === 2016-01-01T (timestamp_at_day 2016T))
(check === 2016-06-01T (timestamp_at_day 2016-06T))

(check === 2016-06-06T (timestamp_at_day 2016-06-06T))
(check === 2016-06-06T (timestamp_at_day 2016-06-06T16:25:16Z))
(check === 2016-06-06T (timestamp_at_day 2016-06-06T16:25:16-07:00))
(check === 2016-06-06T (timestamp_at_day 2016-06-06T01:00+03:00))

//============================================================================
// timestamp_at_minute

(expect_argument_exn (timestamp_at_minute (void)))
(expect_argument_exn (timestamp_at_minute null.timestamp))
(expect_argument_exn (timestamp_at_minute null))
(expect_argument_exn (timestamp_at_minute "not a timestamp"))

(check === 2016-01-01T00:00-00:00 (timestamp_at_minute 2016T))
(check === 2016-06-01T00:00-00:00 (timestamp_at_minute 2016-06T))
(check === 2016-06-06T00:00-00:00 (timestamp_at_minute 2016-06-06T))

(check === 2016-06-06T16:25Z (timestamp_at_minute 2016-06-06T16:25Z))
(check === 2016-06-06T16:25Z (timestamp_at_minute 2016-06-06T16:25:16Z))
(check === 2016-06-06T16:25-07:00 (timestamp_at_minute 2016-06-06T16:25:16-07:00))

//============================================================================
// timestamp_at_second

(expect_argument_exn (timestamp_at_second (void)))
(expect_argument_exn (timestamp_at_second null.timestamp))
(expect_argument_exn (timestamp_at_second null))

(check === 2016-01-01T00:00:00-00:00 (timestamp_at_second 2016T))
(check === 2016-06-01T00:00:00-00:00 (timestamp_at_second 2016-06T))
(check === 2016-06-06T00:00:00-00:00 (timestamp_at_second 2016-06-06T))
(check === 2016-06-06T16:25:00-00:00 (timestamp_at_second 2016-06-06T16:25-00:00))

(check === 2016-06-06T16:25:16Z (timestamp_at_second 2016-06-06T16:25:16Z))
(check === 2016-06-06T16:25:16-07:00 (timestamp_at_second 2016-06-06T16:25:16-07:00))

//============================================================================
// timestamp_year

(expect_argument_exn (timestamp_year (void)))
(expect_argument_exn (timestamp_year null))
(expect_argument_exn (timestamp_year null.timestamp))
(expect_argument_exn (timestamp_year {}))

(check_true (is_truthy (timestamp_year 2016T)))

(check === 2016 (timestamp_year 2016T))
(check === 2016 (timestamp_year 2016-03T))
(check === 2016 (timestamp_year 2016-03-22T))
(check === 2016 (timestamp_year 2016-03-22T18:32Z))
(check === 2016 (timestamp_year 2016-03-22T18:32:22Z))
(check === 2016 (timestamp_year 2016-03-22T18:32:22.451Z))

(check === 2016 (timestamp_year 2016-01-01T06:32+07:00))

//============================================================================
// timestamp_month

(expect_argument_exn (timestamp_month (void)))
(expect_argument_exn (timestamp_month null))
(expect_argument_exn (timestamp_month null.timestamp))
(expect_argument_exn (timestamp_month {}))

(check_true (is_untruthy (timestamp_month 2016T)))
(check_true (is_truthy (timestamp_month 2016-05T)))

(check === (void) (timestamp_month 2016T))
(check === 3 (timestamp_month 2016-03T))
(check === 3 (timestamp_month 2016-03-22T))
(check === 3 (timestamp_month 2016-03-22T18:32Z))
(check === 3 (timestamp_month 2016-03-22T18:32:22Z))
(check === 3 (timestamp_month 2016-03-22T18:32:22.451Z))

(check === 1 (timestamp_month 2016-01-01T06:32+07:00))

//============================================================================
// timestamp_day
(expect_argument_exn (timestamp_day (void)))
(expect_argument_exn (timestamp_day null))
(expect_argument_exn (timestamp_day null.timestamp))
(expect_argument_exn (timestamp_day {}))

(check_true (is_untruthy (timestamp_day 2016-05T)))
(check_true (is_truthy (timestamp_day 2016-05-31T)))

(check === (void) (timestamp_day 2016T))
(check === (void) (timestamp_day 2016-03T))
(check === 22 (timestamp_day 2016-03-22T))
(check === 22 (timestamp_day 2016-03-22T18:32Z))
(check === 22 (timestamp_day 2016-03-22T18:32:22Z))
(check === 22 (timestamp_day 2016-03-22T18:32:22.451Z))

(check === 1 (timestamp_day 2016-01-01T06:32+07:00))

//============================================================================
// timestamp_hour

(expect_argument_exn (timestamp_hour (void)))
(expect_argument_exn (timestamp_hour null))
(expect_argument_exn (timestamp_hour null.timestamp))
(expect_argument_exn (timestamp_hour {}))

(check_true (is_untruthy (timestamp_hour 2016-05-31T)))
(check_true (is_truthy (timestamp_hour 2016-05-31T19:18Z)))

(check === (void) (timestamp_hour 2016T))
(check === (void) (timestamp_hour 2016-03T))
(check === (void) (timestamp_hour 2016-03-22T))
(check === 18 (timestamp_hour 2016-03-22T18:32Z))
(check === 18 (timestamp_hour 2016-03-22T18:32:22Z))
(check === 18 (timestamp_hour 2016-03-22T18:32:22.451Z))

(check === 6 (timestamp_hour 2016-01-01T06:32+07:00))

//============================================================================
// timestamp_minute

(expect_argument_exn (timestamp_minute (void)))
(expect_argument_exn (timestamp_minute null))
(expect_argument_exn (timestamp_minute null.timestamp))
(expect_argument_exn (timestamp_minute {}))

(check_true (is_untruthy (timestamp_minute 2016-05-31T)))
(check_true (is_truthy (timestamp_minute 2016-05-31T19:18Z)))

(check === (void) (timestamp_minute 2016T))
(check === (void) (timestamp_minute 2016-03T))
(check === (void) (timestamp_minute 2016-03-22T))
(check === 32 (timestamp_minute 2016-03-22T18:32Z))
(check === 32 (timestamp_minute 2016-03-22T18:32:22Z))
(check === 32 (timestamp_minute 2016-03-22T18:32:22.451Z))

(check === 32 (timestamp_minute 2016-03-22T18:32Z))

//============================================================================
// timestamp_second

(expect_argument_exn (timestamp_second (void)))
(expect_argument_exn (timestamp_second null))
(expect_argument_exn (timestamp_second null.timestamp))
(expect_argument_exn (timestamp_second {}))

(check_true (is_untruthy (timestamp_second 2016-05-31T19:18Z)))
(check_true (is_truthy (timestamp_second 2016-05-31T19:18:06Z)))

(check === (void) (timestamp_second 2016T))
(check === (void) (timestamp_second 2016-03T))
(check === (void) (timestamp_second 2016-03-22T))
(check === (void) (timestamp_second 2016-03-22T18:32Z))
(check === 22 (timestamp_second 2016-03-22T18:32:22Z))
(check === 22 (timestamp_second 2016-03-22T18:32:22.451Z))

(check === 40 (timestamp_second 2016-01-01T06:32:40+07:00))

//============================================================================
// timestamp_with_offset

(expect_argument_exn (timestamp_with_offset (void) 60))
(expect_argument_exn (timestamp_with_offset null 60))
(expect_argument_exn (timestamp_with_offset null.timestamp 60))
(expect_argument_exn (timestamp_with_offset "not a timestamp" 60))
(expect_argument_exn (timestamp_with_offset 2016-04-01T16:20:01+07:00 null))
(expect_argument_exn (timestamp_with_offset 2016-04-01T16:20:01+07:00 {}))
(expect_argument_exn (timestamp_with_offset 2016-04-01T16:20:01+07:00 null.int))
(expect_argument_exn (timestamp_with_offset 2016-04-01T16:20:01+07:00 1440))
(expect_argument_exn (timestamp_with_offset 2016-04-01T16:20:01+07:00 -1440))

(expect_argument_exn (timestamp_with_offset 2016-03-30T 60))
(expect_argument_exn (timestamp_with_offset 2016-03-30T (void)))

(check === 2016-03-29T19:41Z (timestamp_with_offset 2016-03-29T12:41-07:00 0))
(check === 2016-03-30T02:41:22Z (timestamp_with_offset 2016-03-29T19:41:22-07:00 0))
(check === 2016-03-29T19:41:22-07:00 (timestamp_with_offset 2016-03-30T02:41:22Z (* -7 60)))
(check === 2016-03-30T16:44:14-07:00 (timestamp_with_offset 2016-03-30T16:44:14-07:00 (* -7 60)))
(check === 2016-04-01T09:20:01-00:00 (timestamp_with_offset 2016-04-01T16:20:01+07:00 (void)))
(check === 2016-04-01T09:20:01-07:00 (timestamp_with_offset 2016-04-01T16:20:01-00:00 (* -7 60)))

//============================================================================
// timestamp_put_offset

(expect_argument_exn (timestamp_put_offset (void) 0))
(expect_argument_exn (timestamp_put_offset null 0))
(expect_argument_exn (timestamp_put_offset null.timestamp 0))
(expect_argument_exn (timestamp_put_offset 2016-06-09T14:08:44Z null))
(expect_argument_exn (timestamp_put_offset 2016-06-09T14:08:44Z null.int))
(expect_argument_exn (timestamp_put_offset 2016-06-09T14:08:44Z 1440))
(expect_argument_exn (timestamp_put_offset 2016-06-09T14:08:44Z -1440))
(expect_argument_exn (timestamp_put_offset 2016-06-09T 0))
(expect_argument_exn (timestamp_put_offset 2016-06-09T (void)))
(expect_argument_exn (timestamp_put_offset 2016-06-09T14:08:44Z -420.))
(expect_argument_exn (timestamp_put_offset 2016-06-09T14:08:44Z "-420"))

(check === 2016-06-09T14:08:44-07:00 (timestamp_put_offset 2016-06-09T14:08:44Z -420))
(check === 2016-06-09T14:08:44Z (timestamp_put_offset 2016-06-09T14:08:44-07:00 0))
(check === 2016-06-09T14:08:44-07:00 (timestamp_put_offset 2016-06-09T14:08:44-07:00 -420))

// tests for "unknown offset" behavior
(check === 2016-06-09T14:08:44-07:00 (timestamp_put_offset 2016-06-09T14:08:44-00:00 -420))
(check === 2016-06-09T14:08:44-00:00 (timestamp_put_offset 2016-06-09T14:08:44Z (void)))
(check === 2016-06-09T14:08:44-00:00 (timestamp_put_offset 2016-06-09T14:08:44-00:00 (void)))

//============================================================================
// timestamp_offset

(expect_argument_exn (timestamp_offset (void)))
(expect_argument_exn (timestamp_offset null))
(expect_argument_exn (timestamp_offset null.timestamp))
(expect_argument_exn (timestamp_offset {}))
(expect_argument_exn (timestamp_offset "2016-03-29T19:41:22-07:00"))


(check === (void) (timestamp_offset 2016T))
(check === (void) (timestamp_offset 2016-03T))
(check === (void) (timestamp_offset 2016-03-30T))
(check === (void) (timestamp_offset 2016-03-30T19:41:22-00:00))

(check === (* -7 60) (timestamp_offset 2016-03-29T19:41:22-07:00))
(check === 0 (timestamp_offset 2016-03-30T02:41:22Z))
