// Copyright (c) 2022 Amazon.com, Inc.  All rights reserved.

(module require_macro "/fusion"
  '''
Various implementations of a macro that expands to a `require` form.
This is tricky to get right!

Corresponding Racket code is in rkt/require_macro.rkt
  '''

  (provide (all_defined_out))

  (require "/fusion/experimental/syntax")

  (define (capturing_syntax stx datum)
    // Transforms datum into syntax objects, using lexical context from
    // stx which should be the original syntax sexp.
    (datum_to_syntax datum
                     (syntax_get stx 0)))


  // WRONG: The resulting imports have a lexical context that's unreachable
  // by any code since it's unique to a single macro expansion.
  (define_syntax require_grain_naive
    (lambda (stx)
      (quote_syntax (require "/grain"))))

  // WRONG: Copies the original context onto just the `require` identifier.
  (define_syntax require_grain_wrong
    (lambda (stx)
      (quasisyntax ((unsyntax (capturing_syntax stx (quote require)))
                    "/grain"))))

  // RISKY: Here we copy the use-site lexical context onto the entire expansion
  // result. This works IFF the use-site has `require` bound correctly.
  (define_syntax require_grain_risky
    (lambda (stx)
      (capturing_syntax stx (quote (require "/grain")))))

  // CORRECT: Here we copy the use-site context just to the module-path subform,
  // leaving the `require` bound to its meaning in the macro tronsform code here.
  // This works even when the use-site has a different binding (or none) for
  // `require`.
  (define_syntax require_grain_best
    (lambda (stx)
      (quasisyntax (require (unsyntax (capturing_syntax stx "/grain"))))))


  // Like basic require, non-renaming only-in uses the lexical context on the
  // module path.

  (define_syntax require_only_barley_naive
    (lambda (stx)
      (quote_syntax (require (only_in "/grain" barley)))))

  // WRONG: Copies the original context onto the bind-id
  (define_syntax require_only_barley_wrong
    (lambda (stx)
    (quasisyntax
      (require (only_in "/grain"
                        (unsyntax (capturing_syntax stx (quote barley))))))))

  // CORRECT: Copies the original context onto the module path.
  (define_syntax require_only_barley_best
    (lambda (stx)
      (quasisyntax
        (require (only_in (unsyntax (capturing_syntax stx "/grain"))
                          barley)))))


  // prefix-in works the same as only-in; the context of the prefix-id is ignored.
  //
  // These macros generate lexically-distinct variants of:
  //   (require (prefix_in my_ "/grain"))

  // WRONG: Copies the original context onto the prefix-id
  (define_syntax require_prefix_barley_wrong
    (lambda (stx)
      (quasisyntax
        (require (prefix_in (unsyntax (capturing_syntax stx (quote my_))) "/grain")))))

  // CORRECT: Copies the original context onto the module path.
  (define_syntax require_prefix_barley_best
    (lambda (stx)
      (quasisyntax
        (require (prefix_in my_ (unsyntax (capturing_syntax stx "/grain")))))))


  // rename-in works a bit differently: the lexical context of the bind-id,
  // not the require-spec, matters.
  //
  // These macros generate lexically-distinct variants of:
  //   (require (rename_in "/grain" (barley barlee)))

  (define_syntax require_rename_barley_wrong
    (lambda (stx)
      (quasisyntax
        (require (rename_in (unsyntax (capturing_syntax stx "/grain"))
                   (barley barlee))))))

  (define_syntax require_rename_barley_best
    (lambda (stx)
      (quasisyntax
        (require (rename_in "/grain"
                   (barley (unsyntax (capturing_syntax stx (quote barlee)))))))))
)
