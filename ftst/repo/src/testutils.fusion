// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(module testutils "/fusion"

  (require
    "/fusion/experimental/check"
    "/fusion/experimental/defines"
    "/fusion/experimental/syntax"
    )

  (provide
    bag_equal
    remove_first
    test_equivalence
  )


  (defpub F (lambda rest false))
  (defpub T (lambda rest true))

  (defpub NULL_SYMBOL (quote null.symbol))
  (defpub NULL_SEXP   (quote null.sexp))
  (defpub EMPTY_SEXP  (quote ()))

  (defpub VOID  (void))
  (defpub UNDEF (letrec [(x y), (y 1)] x))

  (defpub I identity)


  (defpub all_nulls
    (quote (null
            null.bool
            null.int
            null.float
            null.decimal
            null.timestamp
            null.symbol
            null.string
            null.clob
            null.blob
            null.list
            null.sexp
            null.struct)))


  (defpub representative_ion_data
    (quote (null

            null.bool
            true
            false

            null.int
            0
            123456

            null.float
            -0e0
            0e0
            2.56e0

            null.decimal
            -0d0
            0d0
            2.57

            null.timestamp
            2013-02-08T

            null.symbol
            ''
            symbol

            null.string
            ""
            "a real string"

            null.clob
            {{""}}
            {{"a real clob"}}

            null.blob
            {{}}
            {{abcd}}

            null.list
            []
            [1]
            [1,2]

            null.sexp
            ()
            (1)
            (1 2)

            null.struct
            {}
            {f:1}
            {f:1, g:2})))


  (defpub_syntax check_representative_ion_data
    (lambda (stx)
      '''
      (check_representative_ion_data FORM)

Maps the given syntactic form over each entry in `representative_ion_data`.
      '''
      (let [(form_stx (syntax_get stx 1))]
        (datum_to_syntax
          (pair (quote begin)
            (let loop [(data representative_ion_data)]
              (if (is_empty data)
                (quote ())
                (let [(datum_stx (datum_to_syntax (head data)))]
                  (pair
                    (sexp form_stx (head data))
                    (loop (tail data)))))))
          (quote_syntax here)
          stx))))


(define_check (test_pairwise op vals)
  '''
Given an sexp, applies the operator `op` to each pair of elements, in both
orders, including each value paired with itself.
  '''
  (let loop [(vals vals)]
    (unless (is_empty vals)
      (let [(val1 (head vals))]
        (check op val1 val1)
        (do (|val2|
              (check op val1 val2)
              (check op val2 val1))
            (tail vals))
        (loop (tail vals))))))


(define_check (test_equivalence eqs neq equiv_sets)
  (let [(num_sets (size equiv_sets))]
    (do (|set| (do (|eq| (test_pairwise eq set)) eqs)) equiv_sets)

    // Pick each set in the loop to compare its elements to the other sets
    (let set_loop [(i 0)]
      (when (< i num_sets)
        (do (|val1|
              (let other_set_loop [(j (+ 1 i))]
                (when (< j num_sets)
                  // Now we have a different equivalence set, all of its elts
                  // must be <> our chosen elt
                  (do (|val2|
                        (check neq val1 val2)
                        (check neq val2 val1))
                    (. equiv_sets j))
                  (other_set_loop (+ 1 j)))))
          (. equiv_sets i))
        (set_loop (+ 1 i))))))


  (define (remove_first pred sequence)
    (choose (let [(looking true)]
              (lambda (e)
                (if (and looking (pred e))
                  (begin (set looking false) false)
                  true)))
       sequence))

  (define (bag_equal equal list1 list2)
    (and (same_size list1 list2)
      (let loop [(i 0), (list2 list2)]
        (if (== i (size list1))
           (is_empty list2)
           (let [(value (element list1 i))]
             (loop (+ i 1)
               (remove_first (|e| (equal value e)) list2)))))))
)
