// Copyright (c) 2012-2020 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
  "/fusion/for"
  "/fusion/list"
  "/testutils")


(define iterate_values
  (lambda vs
    (iterator_map (|v| (apply values v))
      (sexp_iterator vs))))


//=============================================================================
// for_fold, fors_fold

(check_true
  (let_values [(() (for_fold () () (values)))]
    true))
(check_true
  (let_values [(() (fors_fold () () (values)))]
    true))

(check === 9 (for_fold  ((v 0)) () 9))
(check === 9 (fors_fold ((v 0)) () 9))
(check === 9 (for_fold  [(v 0)] [] 9))
(check === 9 (fors_fold [(v 0)] [] 9))

(check === 7 (for_fold  [(v 7)] () v))
(check === 7 (fors_fold [(v 7)] () v))
(check === 7 (for_fold  [(v 7)] () (values v)))
(check === 7 (fors_fold [(v 7)] () (values v)))

(check === [2, 1]
  (let_values [((a b) (for_fold
                        [(v 1), (w 2)]
                        ()
                        (values w v)))]
    [a, b]))
(check === [2, 1]
  (let_values [((a b) (fors_fold
                        [(v 1), (w 2)]
                        ()
                        (values w v)))]
    [a, b]))

// Now, some looping
(check === 0 (for_fold  [(v 0)] [(e [])] 9))
(check === 0 (fors_fold [(v 0)] [(e [])] 9))
(check === 1 (for_fold  [(v 0)] [(e [1])] e))
(check === 1 (fors_fold [(v 0)] [(e [1])] e))
(check === 2 (for_fold  [(v 0)] [(e [1, 2])] e))
(check === 2 (fors_fold [(v 0)] [(e [1, 2])] e))
(check === 3 (for_fold  [(v 0)] [(e [1, 2])] (+ v e)))
(check === 3 (fors_fold [(v 0)] [(e [1, 2])] (+ v e)))

// Multi-value series
(check === {a:2, b:3}
  (for_fold
    [(r {})]
    [((k v) { a: 1, b:2 })]
    (put r k (+ 1 v))))
(check === {a:2, b:3}
  (fors_fold
    [(r {})]
    [((k v) { a: 1, b:2 })]
    (put r k (+ 1 v))))

// Multiple series
(check === 33
  (for_fold
    [(v 0)]
    [(e [1, 2]),
     (f [10, 20])]
    (+ v e f)))
(check === 66
  (fors_fold
    [(v 0)]
    [(e [1, 2]),
     (f [10, 20])]
    (+ v e f)))
(check === 333
  (fors_fold
    [(v 0)]
    [(e [1, 2]),
     (e [e, (* e 10), (* e 100)])]
    (+ v e)))

//  Evaluation order
//  Corresponding Racket code is in rkt/forfold_eval_order.rkt

(lets [(evaluation_order (stretchy_list)),
       (record (|v| (add_m evaluation_order v) v))]
  (check === [[1,2],[3,4]]
    (for_fold
       [(v (begin (record "v") []))]
       [(a (begin (record "a") (iterator_map record (list_iterator [1, 3])))),
        (b (begin (record "b") (iterator_map record (list_iterator [2, 4]))))]
      (record "body")
      (add v [a,b])))
  // It's unexpected that the accumulator v is initialized after the
  // sequences a and b, but that's how it works in Racket 6.5.
  (check === ["a", "b", "v", 1, 2, "body", 3, 4, "body"] evaluation_order))
(lets [(evaluation_order (stretchy_list)),
       (record (|v| (add_m evaluation_order v) v))]
  (check === [[1,2],[1,4],[3,2],[3,4]]
    (fors_fold
       [(v (begin (record "v") []))]
       [(a (begin (record "a") (iterator_map record (list_iterator [1, 3])))),
        (b (begin (record "b") (iterator_map record (list_iterator [2, 4]))))]
      (record "body")
      (add v [a,b])))
  // It's unexpected that the accumulator v is initialized after the
  // sequences a and b, but that's how it works in Racket 6.5.
  (check === ["a", "v", 1, "b", 2, "body", 4, "body", 3, "b", 2, "body", 4, "body"] evaluation_order))


(expect_syntax_error (for_fold))
(expect_syntax_error (fors_fold))
(expect_syntax_error (for_fold  ()))
(expect_syntax_error (fors_fold ()))
(expect_syntax_error (for_fold  () ()))
(expect_syntax_error (fors_fold () ()))

(expect_syntax_error (for_fold  bad_accums () (values)))
(expect_syntax_error (fors_fold bad_accums () (values)))

(expect_syntax_error (for_fold  () bad_clauses (values)))
(expect_syntax_error (fors_fold () bad_clauses (values)))

// Duplicate binding in 1 for-clause.
(expect_syntax_error (for_fold  [] [((a b a) [])] b))
(expect_syntax_error (fors_fold [] [((a b a) [])] b))

// Duplicate binding in 2 for-clauses.
(expect_syntax_error (for_fold  [] [(a []), (a [])] a))
// Not a problem for nested loops!
(check === 22 (fors_fold [(r 0)] [(a [3, 7]), (a [1, 10])] (+ r a)))

// Accumulator count mismatch
(expect_result_error (for_fold  () () 1))
(expect_result_error (fors_fold () () 1))
(expect_result_error (for_fold  () () (values 1 2)))
(expect_result_error (fors_fold () () (values 1 2)))


// Racket's documentation of `for-fold` says:
//
//   An accum-id and a binding from a for-clause can be the same identifier.
//   In that case, the accum-id binding shadows the one in a for-clause within
//   the body-or-break and body forms (even though, syntactically, a for-clause
//   is closer to to the body).
//
// However, its behavior is inconsistent.  See the bug report issue at
// https://github.com/racket/racket/issues/2703
//
// For consistency, Fusion rejects duplicate identifiers among those clauses
// within each level of nested loops.

(expect_syntax_error
  (for_fold [(DUPE 0)]
            [(DUPE [])]
    1))
(expect_syntax_error
  (for_fold [(DUPE 0)]
            [((x DUPE) [])]
    1))
(expect_syntax_error
  (for_fold [(DUPE 0)]
            [(x []), (DUPE [])]
    1))
(expect_syntax_error
  (for_fold [(DUPE 0)]
            [(x []), ((y DUPE) [])]
    1))
(expect_syntax_error
  (for_fold [(a 0), (DUPE 0)]
            [(DUPE [])]
    1))

// In fors_fold, we still allow dupes across for_clauses, since they are nested.
(expect_syntax_error
  (fors_fold [(DUPE 0)]
             [(x []), ((x DUPE) [])]
    1))


//=============================================================================
// for, fors

// Tests here are shallow, since these forms are trivial uses of for_fold
// and since the operational tests are easier using sibling derived forms that
// collect results.


(check === [155] (let [(r (stretchy_list))] (for  () (add_m r 155)) r))
(check === [156] (let [(r (stretchy_list))] (fors [] (add_m r 156)) r))

(check === [158] (let [(r (stretchy_list))] (for  [(a [158])] (add_m r a)) r))
(check === [159] (let [(r (stretchy_list))] (fors [(a [159])] (add_m r a)) r))

// Result is always void
(check === (void) (for  [] 12))
(check === (void) (fors [] 12))
(check === (void) (for  [(a (sexp 1 2))] a))
(check === (void) (fors [(a (sexp 1 2))] a))


// All the for-forms are syntactically the same; test for syntax errors once.

// Missing all subforms
(expect_syntax_exn (for))
(expect_syntax_exn (fors))

// Missing body
(expect_syntax_exn (for  ((name 1)) /* no body */))
(expect_syntax_exn (fors ((name 1)) /* no body */))

// For-clauses subform isn't a sequence of sexps
(expect_syntax_exn (for  null      13))
(expect_syntax_exn (fors null      13))
(expect_syntax_exn (for  null.sexp 13))
(expect_syntax_exn (fors null.sexp 13))
(expect_syntax_exn (for  null.list 13))
(expect_syntax_exn (fors null.list 13))
(expect_syntax_exn (for  1         13))
(expect_syntax_exn (fors 1         13))
(expect_syntax_exn (for  (1)       13))
(expect_syntax_exn (fors (1)       13))
(expect_syntax_exn (for  (1 2)     13))
(expect_syntax_exn (fors (1 2)     13))

// For-clause is a list not a sexp
// TODO split_binding allows this, but it's not tested nor used in this library.
(when false
(expect_syntax_exn (for  ([a, []]       ) 13))
(expect_syntax_exn (fors ([a, []]       ) 13))
(expect_syntax_exn (for  ([a, []] (b  2)) 13))
(expect_syntax_exn (fors ([a, []] (b  2)) 13))
(expect_syntax_exn (for  ((a  []) [b, 2]) 13))
(expect_syntax_exn (fors ((a  []) [b, 2]) 13))
)

// For-clause doesn't start with an identifier (or sexp; see below)
(expect_syntax_exn (for  (null.sexp) 13))
(expect_syntax_exn (fors (null.sexp) 13))
(expect_syntax_exn (for  (()) 13))
(expect_syntax_exn (fors (()) 13))
(expect_syntax_exn (for  ((12)) 13))
(expect_syntax_exn (fors ((12)) 13))
(expect_syntax_exn (for  ((name 1) ()) 13))
(expect_syntax_exn (fors ((name 1) ()) 13))
(expect_syntax_exn (for  ((name 1) (12)) 13))
(expect_syntax_exn (fors ((name 1) (12)) 13))

// For-clause has more than one series expression
(expect_syntax_exn (for  ((name)) 13))
(expect_syntax_exn (fors ((name)) 13))
(expect_syntax_exn (for  ((name 1 2)) 13))
(expect_syntax_exn (fors ((name 1 2)) 13))
(expect_syntax_exn (for  ((name 1) (name2)) 13))
(expect_syntax_exn (fors ((name 1) (name2)) 13))

// Duplicate identifiers across clauses of plain `for` (not `fors`)
(expect_syntax_exn (for [(name []), (name [])] 13))

// For-clause has malformed sexp-of-identifiers
(expect_syntax_exn (for  [(null.sexp [])] 1))  // No ids
(expect_syntax_exn (fors [(null.sexp [])] 1))
(expect_syntax_exn (for  [(()        [])] 1))
(expect_syntax_exn (fors [(()        [])] 1))
(expect_syntax_exn (for  [((a 9)     [])] 1))  // Not an id
(expect_syntax_exn (fors [((a 9)     [])] 1))
(expect_syntax_exn (for  [([a, b]    [])] 1))  // Not a sexp
(expect_syntax_exn (fors [([a, b]    [])] 1))

(expect_result_error
  (for [((a b) [1])] a))   // expects 2 values, returns 1
(expect_result_error
  (for [(k {f:1})] k))     // expects 1 value, returns 2


//=============================================================================
// for_list, fors_list

// Most extensive tests of iteration use `for_list` since it provides the
// easiest way to check the comprehension order.

(define_check (check_fl expected actual)
  (check_pred is_stretchy_list actual)
  (check === expected actual))

(check_fl [73]
  (for_list () 73))

(check_fl [84]
  (fors_list [] 84))

(check_fl []
  (for_list ((e [])) 73))
(check_fl []
  (for_list (((e) [])) 73))

(check_fl []
  (fors_list ((e [])) 84))
(check_fl []
  (fors_list (((e) [])) 84))

(check_fl [73]
  (for_list ((e [1])) 73))

(check_fl [84]
  (fors_list ((e [2])) 84))

(check_fl [1]
  (for_list ((e [1])) e))
(check_fl [1]
  (for_list (((e) [1])) e))

(check_fl [2]
  (fors_list ((e [2])) e))
(check_fl [2]
  (fors_list (((e) [2])) e))


// Multiple Series

(check_fl [11, 22, 33]
  (for_list ((e [1, 2, 3])
             (f [10, 20, 30]))
    (+ e f)))

(check_fl [11, 21, 31, 12, 22, 32, 13, 23, 33]
  (fors_list ((e [1, 2, 3])
              (f [10, 20, 30]))
    (+ e f)))

(check_fl [1, 10, 100, 2, 20, 200, 3, 30, 300]
  (fors_list ((e [1, 2, 3])
              (e [e, (* e 10), (* e 100)]))
    e))


// Multivalue series

(check_fl [12, 34, 56]
  (for_list [((a b) (iterate_values [1, 2] [3, 4] [5, 6]))]
    (+ (* 10 a) b)))

(check_fl [125, 346]
  (for_list [((a b) (iterate_values [1, 2] [3, 4])),
             ((c)   (iterate_values [5] [6] [7]))]
    (+ (* 100 a) (* 10 b) c)))

(check_fl [1256, 3478]
  (for_list [((a b) (iterate_values [1, 2] [3, 4])),
             ((c d) (iterate_values [5, 6] [7, 8]))]
    (+ (* 1000 a) (* 100 b) (* 10 c) d)))

(check_fl [1256, 1278, 3456, 3478]
  (fors_list [((a b) (iterate_values [1, 2] [3, 4])),
              ((c d) (iterate_values [5, 6] [7, 8]))]
    (+ (* 1000 a) (* 100 b) (* 10 c) d)))


// Series of differing lengths

(check_fl [11, 22]
  (for_list ((e [1, 2, 3])
             (f [10, 20]))
    (+ e f)))

(check_fl [11, 21, 12, 22, 13, 23]
  (fors_list ((e [1, 2, 3])
              (f [10, 20]))
    (+ e f)))


// Mixed single/multi-identifier clauses

(check_fl [11, 22]
  (for_list (((e) [1, 2])
             (f   [10, 20]))
    (+ e f)))
(check_fl [11, 22]
  (for_list ((e   [1, 2])
             ((f) [10, 20]))
    (+ e f)))

(check_fl [11, 21, 12, 22]
  (fors_list (((e) [1, 2])
              (f   [10, 20]))
    (+ e f)))
(check_fl [11, 21, 12, 22]
  (fors_list ((e   [1, 2])
              ((f) [10, 20]))
    (+ e f)))


// Sexp works too
(check_fl [11, 22]
  (for_list ((e (quote (1 2)))
             (f [10, 20, 30]))
    (+ e f)))

(check_fl [11, 21, 31, 12, 22, 32]
  (fors_list ((e (quote (1 2)))
              (f [10, 20, 30]))
    (+ e f)))


// We can iterate structs.

(define_binary_check (check_bag expected actual)
  (bag_equal === expected actual))

(check_fl []
  (for_list [((k v) null.struct)] 1))

(check_bag (quote [(f 1), (g 2), (h 3)])
  (for_list [((k v) { f:1, g:2, h:3 })]
    (sexp k v)))


// Macro in bound-value position
(check_fl [74]
  (for_list ((e (let ((list [1])) list))) (+ e 73)))

(check_fl [85]
  (fors_list ((e (let ((list [1])) list))) (+ e 84)))

// Macro in body position
(check_fl [74]
  (for_list ((e [1])) (let ((v 73)) (+ e v))))

(check_fl [85]
  (fors_list ((e [1])) (let ((v 84)) (+ e v))))

// This tests two things:
//  1) non-Ion types in the result; here, closures.
//  2) use of new locations for the bound variables each iteration.
//     The thunks are applied after iteration completes, each one should have
//     its own location for variable `e`.
(check === [2, 4, 6]
  (map (lambda (thunk) (thunk))
    (for_list ((e [1, 2, 3]))
      (lambda () (* 2 e)))))

(check === [3, 6, 9]
  (map (lambda (thunk) (thunk))
    (fors_list ((e [1, 2, 3]))
      (lambda () (* 3 e)))))

// Check access to variables in surrounding scopes.
(lets [(data         [{ amountPosted:{ amount:-39.99 }},
                      { amountPosted:{ amount:-49.99 }} ]),
       (amountPosted "amountPosted"),
       (amount       "amount")]
  (check_fl [-39.99, -49.99]
    (for_list [(x data)]
      (. x  amountPosted   amount))))

(lets [(data         [{ amountsPosted:[ { amount:-39.99 }, { amount:-29.99 } ]},
                      { amountsPosted:[ { amount:-49.99 }, { amount:-59.99 } ]} ]),
       (amountsPosted "amountsPosted"),
       (amount        "amount")]
  (check_fl [-39.99, -29.99, -49.99, -59.99]
    (fors_list [(x data),
                (y (. x amountsPosted))]
      (. y amount))))


//  Evaluation order
(lets [(evaluation_order (stretchy_list)),
       (record (|v| (add_m evaluation_order v) v))]
  (check_fl [[1,2],[3,4]]
    (for_list [(a (begin (record "a") (iterator_map record (list_iterator [1, 3])))),
               (b (begin (record "b") (iterator_map record (list_iterator [2, 4]))))]
      [a,b]))
  (check === ["a", "b", 1, 2, 3, 4] evaluation_order))


// Duplicate fors_list binding names are allowed because they shadow
// each other in order, the last of which is still meaningful.
(check_fl []
  (fors_list [(name []), (name [])] 14))
(check_fl [3,4,3,4]
  (fors_list [(name [1,2]), (name [3,4])] name))


//=============================================================================
// for_sexp, fors_sexp

(check === (sexp 454)       (for_sexp  [] 454))
(check === (sexp 454)       (fors_sexp [] 454))
(check === (sexp)           (for_sexp  [( a  [ ])] a))
(check === (sexp)           (fors_sexp [( a  [ ])] a))
(check === (sexp)           (for_sexp  [((a) [ ])] a))
(check === (sexp)           (fors_sexp [((a) [ ])] a))
(check === (sexp 1)         (for_sexp  [( a  [1])] a))
(check === (sexp 1)         (fors_sexp [( a  [1])] a))
(check === (sexp 1)         (for_sexp  [((a) [1])] a))
(check === (sexp 1)         (fors_sexp [((a) [1])] a))
(check === (sexp 5 14)      (for_sexp  [(a [1, 2]), (b [5, 7])] (* a b)))
(check === (sexp 5 7 10 14) (fors_sexp [(a [1, 2]), (b [5, 7])] (* a b)))


//=============================================================================
// for_struct, fors_struct

(check === {k:16}            (for_struct  [] (values "k" 16)))
(check === {k:16}            (fors_struct [] (values "k" 16)))
(check === {}                (for_struct  [( a  [ ])] (values "k" a)))
(check === {}                (fors_struct [( a  [ ])] (values "k" a)))
(check === {}                (for_struct  [((a) [ ])] (values "k" a)))
(check === {}                (fors_struct [((a) [ ])] (values "k" a)))
(check === {k:1}             (for_struct  [( a  [1])] (values "k" a)))
(check === {k:1}             (fors_struct [( a  [1])] (values "k" a)))
(check === {k:1}             (for_struct  [((a) [1])] (values "k" a)))
(check === {k:1}             (fors_struct [((a) [1])] (values "k" a)))
(check === {a:5, b:7}        (for_struct  [(a ["a", "b"]), (b [5, 7])] (values a b)))
(check === {a:5,a:7,b:5,b:7} (fors_struct [(a ["a", "b"]), (b [5, 7])] (values a b)))


"PASSED" // Helpful output if you run this stand-alone
