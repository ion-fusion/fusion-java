// Copyright (c) 2012-2014 Amazon.com, Inc.  All rights reserved.

(require
  "/check"
)


(check_void (begin))
(check === (begin 1)    1)
(check === (begin 1 2)  2)
(check === (begin 1 []) [])


//============================================================================
// if

(check_true  (if true  true false))
(check_false (if false true false))

(check_true  (if (quote a::true)  true false))
(check_false (if (quote a::false) true false))

// Using exit ensure we don't evaluate the other branch

(check = (if true  1 (exit)) 1)
(check = (if false (exit) 2) 2)
(check = (if (if false false true) 4 2) 4)

// Truthiness of other types

(check_true  (if 0  true false))
(check_true  (if "" true false))

(check_true (if UNDEF true false))

(check_false (if (void) true false))
(check_false (if null true false))
(check_false (if null.bool true false))


//============================================================================
// and

(check_true (and))
(check_true (and true))
(check_true (and true true))
(check_true (and (= 1 1) true))

(check_false (and false))
(check_false (and true false))
(check_false (and false (exit)))
(check_false (and true false true (exit)))


(check === (and 1  0) 0)
(check === (and 1. 0.) 0.)

(check_true (is_void (and true (void))))

(check_true (is_null (and null)))
(check_true (is_null (and true null)))


//============================================================================
// or

(check_true (or true))
(check_true (or true (exit)))
(check_true (or false (= 1 1) (exit)))

(check_false (or))
(check_false (or false))
(check_false (or false false))

(check = (or 1      0) 1)
(check = (or null   0) 0)
(check = (or (void) 0) 0)

(check_true (is_void (or false (void))))

(check_true (is_null (or null)))
(check_true (is_null (or null null)))


//============================================================================
// not

(check_true (not false))
(check_true (not null))
(check_true (not null.bool))
(check_true (not (void)))

(check_false (not true))
(check_false (not 0))
(check_false (not 1))

(check_false (not (not null.bool)))


//============================================================================
// when

(check_void (when true))
(check_void (when false 1))
(check_void (when (not true) 1 2 3 4 5))

(check === (when true 2)         2)
(check === (when true (begin 3)) 3)
(check === (when (not false) 1 2 3 4) 4)


//============================================================================
// unless

(check_void (unless false))
(check_void (unless true 1))
(check_void (unless (not false) 1 2 3 4 5))

(check === (unless false 2)         2)
(check === (unless false (begin 3)) 3)
(check === (unless (not true) 1 2 3 4) 4)


//============================================================================
// cond

(check_void (cond))

(check === (cond (true 1)) 1)
(check === (cond (true 1 2)) 2)
(check_void (cond (false 3)))

(check === (let ((x 2))
             (cond ((= 1 x) (+ x "hi"))
                   ((= x 3) x)
                   (true    (+ x 2))))
   4)

(check === (cond ((= 1 2) "bad")
                 ((= 3 3) "body stuff" 5)
                 (true    "bad"))
   5)
