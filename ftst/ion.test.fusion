// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/check"
  "/fusion/experimental/syntax"
  "/testutils"
  )


//==========================================================================
// annotate and annotations

// TODO what about mutable variants?
//   These tests apply `annotate` to quoted (therefore immutable) data, but
//   mutable types may have different implementations.

(define (checked_annotate datum annotations)
  (let [(annotated_datum (apply annotate datum annotations))]
    (check_annotations annotations annotated_datum)
    annotated_datum))


(define_syntax check_annotate1
  (lambda (stx)
    (lets [(orig_datum_stx (syntax_get stx 1)),
           (datum          (syntax_to_datum orig_datum_stx)),
           (    datum_stx (datum_to_syntax (checked_annotate datum [        ]))),
           (  a_datum_stx (datum_to_syntax (checked_annotate datum ["a"     ]))),
           (a_$_datum_stx (datum_to_syntax (checked_annotate datum ["a", "" ]))),
           (a_a_datum_stx (datum_to_syntax (checked_annotate datum ["a", "a"]))),
           (a_b_datum_stx (datum_to_syntax (checked_annotate datum ["a", "b"])))]
      (quasisyntax
        (begin
          (check ===
            (quote (unsyntax datum_stx))
            (annotate (quote (unsyntax orig_datum_stx))))
          (check ===
            (quote (unsyntax a_datum_stx))
            (annotate (quote (unsyntax orig_datum_stx)) "a"))
          (check ===
            (quote (unsyntax a_$_datum_stx))
            (annotate (quote (unsyntax orig_datum_stx)) "a" ""))
          (check ===
            (quote (unsyntax a_a_datum_stx))
            (annotate (quote (unsyntax orig_datum_stx)) "a" "a"))
          (check ===
            (quote (unsyntax a_b_datum_stx))
            (annotate (quote (unsyntax orig_datum_stx)) "a" "b")))))))

(define_syntax check_annotate
  (lambda (stx)
    (lets [(datum_stx (syntax_get stx 1)),
           (datum     (syntax_to_datum datum_stx)),
           (  a_datum_stx (datum_to_syntax (checked_annotate datum ["a"     ]))),
           (a_$_datum_stx (datum_to_syntax (checked_annotate datum ["a", "" ]))),
           (a_a_datum_stx (datum_to_syntax (checked_annotate datum ["a", "a"]))),
           (a_b_datum_stx (datum_to_syntax (checked_annotate datum ["a", "b"])))]
      (quasisyntax
        (begin
          (check_annotations [] (quote (unsyntax datum_stx)))
          (check_annotate1 (unsyntax     datum_stx))
          (check_annotate1 (unsyntax   a_datum_stx))
          (check_annotate1 (unsyntax a_$_datum_stx))
          (check_annotate1 (unsyntax a_a_datum_stx))
          (check_annotate1 (unsyntax a_b_datum_stx)))))))

(check_representative_ion_data check_annotate)


(expect_argument_exn (annotate  void  "a"))  // procedure isn't annotatable
(expect_argument_exn (annotate (void) "a"))  // void      isn't annotatable


//==========================================================================
// is_null_null

(check_pred is_null_null null.null)
(check_pred is_null_null (quote ann::null.null))

(check_false (is_null_null (void)))
(check_false (is_null_null null.struct))
(check_false (is_null_null (quote null.symbol)))


"PASSED" // Helpful output if you run this stand-alone
