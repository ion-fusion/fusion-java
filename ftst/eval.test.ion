// Copyright (c) 2012-2013 Amazon.com, Inc.  All rights reserved.

(use 'check')
(use '/fusion/eval')
(use '/fusion/namespace')
(use '/fusion/parameter')
(use '/fusion/syntax')


(define ns (make_namespace_with_language "/grain")) // In test repo

(check_equal (eval (quote_syntax barley) ns)
  "soup" "eval 1")

(check_equal
  (parameterize ((current_namespace ns))
    (eval (quote_syntax barley)))
  "soup" "eval 2")


(check_equal (eval (quote barley) ns)
  "soup" "eval 3")

(check_equal (eval [] ns)
  [] "eval 4")


(define ns (make_namespace_with_language "/fusion/base"))

(eval (quote (define something 1150)) ns)
(check_equal (eval (quote something) ns) 1150 "eval 1150")

(check_equal (eval (quote [something, something]) ns)
  [1150, 1150] "eval [1150,1150]")

(check = (eval (quote (. {f:2} "f")) ns) 2)


//==========================================================================
// expand

(check_equal
  (syntax_to_datum (expand (quote_syntax (and))))
  (quote true)
  "(and)")

(check_equal
  (syntax_to_datum (expand (quote (and))))
  (quote true)
  "(and)")

(check_equal
  (syntax_to_datum (expand (quote (let [(a 3)] a))))
  (quote ((lambda (a) a) 3))
  "let")

(check_equal
  (syntax_to_datum (expand (quote (let [(a b)] a))))
  (quote ((lambda (a) a) b))
  "let w/ unbound var")
