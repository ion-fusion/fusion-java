// Copyright (c) 2023 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
  "/fusion/private/record"
)


(define_values (R0_type R0_ctor R0_pred R0_get) (make_record_type (quote R0) null 0))
(define_values (R1_type R1_ctor R1_pred R1_get) (make_record_type (quote R1) null 1))

(check_pred is_procedure R0_ctor)
(check_pred is_procedure R0_pred)

(check_pred is_procedure R1_ctor)
(check_pred is_procedure R1_pred)

(expect_arity_error (R0_ctor 1))
(expect_arity_error (R1_ctor))
(expect_arity_error (R1_ctor 1 2))


(let [(r0 (R0_ctor)),
      (r1 (R1_ctor 11))]
  (check_pred R0_pred r0)
  (check_pred R1_pred r1)

  (check_false (R0_pred r1))
  (check_false (R1_pred r0))

  (check == 11 (R1_get r1 0))

  // type mismatch
  (expect_argument_error (R1_get r0 0))

  // Index out of bounds
  (expect_argument_error (R0_get r0  0))
  (expect_argument_error (R1_get r1 -1))
  (expect_argument_error (R1_get r1  1))

  (check == "R0::{[]}"   (display_to_string r0))
  (check == "R1::{[11]}" (display_to_string r1))
)


(expect_arity_error (make_record_type))
(expect_arity_error (make_record_type (quote T)))
(expect_arity_error (make_record_type (quote T) null))

(expect_arity_error (make_record_type (quote X) null 0 null {{"extra arg"}}))  // Too many


(expect_argument_error (make_record_type "name" null 1))         // Invalid name
(expect_argument_error (make_record_type (quote null.symbol) null 1))
(expect_argument_error (make_record_type (quote '') null 1))

(expect_argument_error (make_record_type (quote T) null -1))     // Invalid field_count


// Inheritance

(define_values (S1_type S1_ctor S1_pred S1_get)
  (make_record_type (quote S1) R0_type 2))

(expect_arity_error (S1_ctor))
(expect_arity_error (S1_ctor 1))

(define s1 (S1_ctor 20 21))
(check_true  (R0_pred s1))
(check_false (R1_pred s1))
(check_true  (S1_pred s1))

(check == 20 (S1_get s1 0))
(check == 21 (S1_get s1 1))
(expect_argument_error (S1_get s1 2))


(define_values (S2_type S2_ctor S2_pred S2_get)
  (make_record_type (quote S2) S1_type 1))

(expect_arity_error (S2_ctor))
(expect_arity_error (S2_ctor 1))
(expect_arity_error (S2_ctor 1 2))

(define s2 (S2_ctor 30 31 32))

(check_true  (R0_pred s2))
(check_true  (S1_pred s2))
(check_true  (S2_pred s2))
(check_false (S2_pred s1))

// Accessor indices don't include supertype fields.
(check == 30 (S1_get s2 0))
(check == 31 (S1_get s2 1))
(check == 32 (S2_get s2 0))
(expect_argument_error (S2_get s2 1))

(expect_argument_error (make_record_type (quote Bad) "super" 1)) // Invalid supertype


// Procedure Records

(expect_argument_error (make_record_type (quote X) null 0 -1))  // proc-index too small
(expect_argument_error (make_record_type (quote X) null 0 0))   // proc-index too large
(expect_argument_error (make_record_type (quote X) null 2 2))   // proc-index too large

(define_values (P1_type P1_ctor P1_pred P1_get)
  (make_record_type (quote P1) null 1 0))

(define (add1 v) (+ 1 v))

(define p1 (P1_ctor add1))
(check_same add1 (P1_get p1 0))

(check_pred P1_pred      p1)
(check_pred is_procedure p1)
(check === 3 (p1 2))


// A proc-record can be the proc of another proc-record.
(define p1b (P1_ctor p1))
(check_same p1 (P1_get p1b 0))

(check_pred P1_pred      p1b)
(check_pred is_procedure p1b)
(check === 3 (p1b 2))


// Subtypes can override prop:procedure
(define_values (P2_type P2_ctor P2_pred P2_get)
  (make_record_type (quote P2) P1_type 2 0))    // Subtype fields: proc and int

(define p2 (P2_ctor add1 (|| "p2") 2))
(check === "p2" (p2))

// Unlike Racket at the moment, we type-check the procedure field upon construction.
(expect_argument_error (P1_ctor "not a proc"))
(expect_argument_error (P2_ctor "not a proc" "nor this" "nor that"))


"SUCCESS (make_record_type.test)"
