// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/check"
  "/fusion/list"
  "/fusion/private/struct"
  "/fusion/struct"
  "/fusion/unsafe/list"
  "/testutils"
  )


(define _struct_copy
  (lambda (ctor s)
    (apply annotate
      (if (is_null s)
        s
        (let [(args (stretchy_list))]
          (struct_for_each
            (lambda (name value)
              (add_m args name)
              (add_m args value))
            s)
          (apply ctor args)))
      (annotations s))))

(define struct_copy
  (lambda (s)
    (_struct_copy struct s)))

(define mutable_struct_copy
  (lambda (s)
    (_struct_copy mutable_struct s)))


(define_check (check_mod op val args expect)
  "Functional modification check"
  (let [(s (struct_copy val))]
    (let [(result (apply op s args))]
      (check_pred is_immutable_struct result)
      (check === expect result "Unexpected result on immutable struct")
      (check === val s "Immutable struct was mutated")))
  (unless (is_null val)                             // There's no mutable null
    (let [(s (mutable_struct_copy val))]
      (let [(result (apply op s args))]
        (check_pred is_mutable_struct result)
        (check === expect result "Unexpected result on mutable struct")
        (check === val s)                           // s has not been modified
        (unless (ident result s)
          // Ensure there's no aliasing between the input to `op` and the results.
          (put_m result "mod" "mod")
          (check_void (. s "mod") "Unexpected mutation of original"))))))


(define_check (check_mod_m op val args expect)
  "Mutating modification check"
  (let [(s (struct_copy val))]
    (let [(result (apply op s args))]
      (check_pred is_immutable_struct result)
      (check === expect result "Unexpected result on immutable struct")
      (check === val s "Immutable struct was mutated")))
  (unless (is_null val)                             // There's no mutable null
    (let [(s (mutable_struct_copy val))]
      (let [(result (apply op s args))]
        (check_pred is_mutable_struct result)
        (check === expect result "Unexpected result on mutable struct")
        (check == s expect)))))                                // s IS mutated


(define_check (check_mods op op_m val args expect)
  "Functional and mutating modification check"
  (check_mod   op   val args expect)
  (check_mod_m op_m val args expect))


//==========================================================================


(check === [] (. (quote {f:[]}) "f"))

(check === [1] (append_m (. {f:[]} "f") [1]))


(define_check (check_predicates struct expect_mutable expect_null expect_empty)
  (check_pred is_collection struct)
  (check_pred is_struct struct)
  (check ===      expect_mutable  (is_mutable_struct   struct))
  (check === (not expect_mutable) (is_immutable_struct struct))
  (check === expect_null (is_null  struct))
  (check === expect_empty (is_empty struct))
  // TODO ...
  )


// Construction via literals

(check_predicates           null.struct  false true  true)
(check_predicates (quote    null.struct) false true  true)
(check_predicates (quote a::null.struct) false true  true)
(check_predicates           {}           false false true)
(check_predicates (quote    {})          false false true)
(check_predicates (quote a::{})          false false true)

(check_predicates (struct              ) false false true)
(check_predicates (struct "a" =        ) false false false)
(check_predicates (mutable_struct      ) true  false true)
(check_predicates (mutable_struct "a" =) true  false false)


(check_annotations []            (quote null.struct))
(check_annotations []            (quote {}))
(check_annotations [""]          (quote ''::{}))
(check_annotations ["a"]         (quote a::{}))
(check_annotations ["a","b"]     (quote a::b::{}))
(check_annotations ["a","b","a"] (quote a::b::a::{}))


//==========================================================================
// annotate

(check_mod annotate null.struct []                      null.struct)
(check_mod annotate null.struct [""]       (quote   ''::null.struct))
(check_mod annotate null.struct ["a"]      (quote a::   null.struct))
(check_mod annotate null.struct ["a", "b"] (quote a::b::null.struct))

(check_mod annotate {} []                      {})
(check_mod annotate {} [""]       (quote   ''::{}))
(check_mod annotate {} ["a"]      (quote a::   {}))
(check_mod annotate {} ["a", "b"] (quote a::b::{}))

(check_mod annotate {f:1} []                      {f:1})
(check_mod annotate {f:1} [""]       (quote   ''::{f:1}))
(check_mod annotate {f:1} ["a"]      (quote a::   {f:1}))
(check_mod annotate {f:1} ["a", "b"] (quote a::b::{f:1}))


// Replacing existing annotations
(check_mod annotate (quote x::null.struct) ["a"]      (quote a::null.struct))
(check_mod annotate (quote x::null.struct) ["a", "b"] (quote a::b::null.struct))

(check_mod annotate (quote x::{}) []                      {})
(check_mod annotate (quote x::{}) ["a"]      (quote a::   {}))
(check_mod annotate (quote x::{}) ["a", "b"] (quote a::b::{}))

(check_mod annotate (quote x::{f:1}) []                      {f:1})
(check_mod annotate (quote x::{f:1}) ["a"]      (quote a::   {f:1}))
(check_mod annotate (quote x::{f:1}) ["a", "b"] (quote a::b::{f:1}))


(expect_argument_exn (annotate null.struct null))
(expect_argument_exn (annotate null.struct null.string))
(expect_argument_exn (annotate null.struct (quote null.symbol)))
(expect_argument_exn (annotate null.struct 12))


//==========================================================================
// size

(check === 0 (size null.struct))


(define_check (check_size fields expect)
  (let [(s (apply struct fields))]
    (check === expect (size s)))
  (let [(s (apply mutable_struct fields))]
    (check === expect (size s))))

(check_size (quote (       )) 0)
(check_size (quote (f 1    )) 1)
(check_size (quote (f 2 f 2)) 2)  // repeated field
(check_size (quote (f 2 g 2)) 2)


//==========================================================================
// has_key

(check_false (has_key null.struct ""))
(check_false (has_key null.struct null.string))
(check_false (has_key null.struct 2))


(define_check (check_has_key fields key expect)
  (let [(s (apply struct fields))]
    (check === expect (has_key s key)))
  (let [(s (apply mutable_struct fields))]
    (check === expect (has_key s key))))

(check_has_key (quote ()) ""          false)
(check_has_key (quote ()) null.string false)
(check_has_key (quote ()) NULL_SYMBOL false)
(check_has_key (quote ()) 2           false)

(check_has_key (quote (a 1 b 2 c 3)) ""          false)
(check_has_key (quote (a 1 b 2 c 3)) null.string false)
(check_has_key (quote (a 1 b 2 c 3)) NULL_SYMBOL false)
(check_has_key (quote (a 1 b 2 c 3)) 2           false)
(check_has_key (quote (a 1 b 2 c 3)) "a"         true)
(check_has_key (quote (a 1 b 2 c 3)) (quote a)   true)

(check_has_key (quote (a null  )) "a"         true)
(check_has_key (quote (a false )) "a"         true)
(check_has_key (quote (a (void))) "a"         true)


(expect_arity_exn (has_key))
(expect_arity_exn (has_key {}))


//==========================================================================
// put and put_m

(define_check (check_put val key v expect)
  (check_mods put put_m val (list key v) expect)
  // Retain existing annotations
  (let [(ann_val    (annotate val    "a" "b")),
        (ann_expect (annotate expect "a" "b"))]
    (check_mods put put_m ann_val (list key v) ann_expect)))

(check_put null.struct   "f" 3 {f:3})
(check_put {}            "f" 3 {f:3})
(check_put {a:1}         "f" 3 {a:1,f:3})
(check_put {a:1,a:2}     "f" 3 {a:1,a:2,f:3})
(check_put {a:1,b:2}     ""  3 {a:1,b:2,'':3})
(check_put {a:1,'':2}    ""  3 {a:1,'':3})
(check_put {a:1,'':2,'':0} "" 3 {a:1,'':3})  // replace repeated field

(let [(s (mutable_struct))]
  (check === 0 (size s))
  (put_m s "f" 1)
  (check === 1 (size s))
  (put_m s "f" 2)
  (check === 1 (size s))
  (put_m s "g" 3)
  (check === 2 (size s)))

(let [(s (mutable_struct "f" 1 "f" 2))]
  (check === 2 (size s))
  (put_m s "" 1)
  (check === 3 (size s))
  (put_m s "f" 3)
  (check === 2 (size s))
  (put_m s "" 3)
  (check === 2 (size s)))


(expect_arity_exn (put))
(expect_arity_exn (put   {}))
(expect_arity_exn (put   {} "f"))

(expect_arity_exn (put_m))
(expect_arity_exn (put_m {}))
(expect_arity_exn (put_m {} "f"))

(expect_argument_exn (put   [] "f" 1))
(expect_argument_exn (put   {} null.string 1))
(expect_argument_exn (put   {} (quote null.symbol) 1))

(expect_argument_exn (put_m [] "f" 1))
(expect_argument_exn (put_m {} null.string 1))
(expect_argument_exn (put_m {} (quote null.symbol) 1))


//==========================================================================
// puts and puts_m

(define_check (check_unsafe_puts val key v expect)
  (check_mods unsafe_struct_puts unsafe_struct_puts_m val (list key v) expect)
  // Retain existing annotations
  (let [(ann_val    (annotate val    "a" "b")),
        (ann_expect (annotate expect "a" "b"))]
    (check_mods unsafe_struct_puts unsafe_struct_puts_m ann_val (list key v) ann_expect)))

(check_unsafe_puts null.struct "f" 3 {f:3})
(check_unsafe_puts {}          "f" 3 {f:3})
(check_unsafe_puts {a:1}       "f" 3 {f:3, a:1})
(check_unsafe_puts {f:2}       "f" 3 {f:3, f:2})
(check_unsafe_puts {'':3}      ""  3 {'':3, '':3})
(check_unsafe_puts {f:2,f:3}   "f" 3 {f:3, f:3, f:2})
(check_unsafe_puts {a:2,a:3}   "f" 3 {f:3, a:3, a:2})


//==========================================================================
// struct_merge and struct_merge_m

(define_check (check_merge val other expect)
  (check_pred is_immutable_struct other)
  (let [(other_m (mutable_struct_copy other))]
    (check_mods struct_merge struct_merge_m val [other  ] expect)
    (check_mods struct_merge struct_merge_m val [other_m] expect)
    // Retain existing annotations
    (let [(ann_val    (annotate val    "a" "b")),
          (ann_expect (annotate expect "a" "b"))]
      (check_mods struct_merge struct_merge_m ann_val [other  ] ann_expect)
      (check_mods struct_merge struct_merge_m ann_val [other_m] ann_expect)))
  (let [(s (mutable_struct_copy val)),
        (o (struct_copy other))]
    (let [(result (struct_merge s o))]
      (put_m result "mod" "mod")
      (unless (= 0 (size o))
        (check_void (. s "mod") "Unexpected mutation of 1st arg"))
      (check_void (. o "mod")   "Unexpected mutation of 2nd arg"))
    (let [(result (struct_merge_m s o))]
      (put_m result "mod" "mod")
      (check_void (. o "mod")   "Unexpected mutation of 2nd arg"))))


(check_merge null.struct null.struct null.struct)
(check_merge null.struct {}          null.struct)
(check_merge null.struct {a:1}       {a:1})
(check_merge null.struct {a:1,'':2}  {a:1,'':2})
(check_merge null.struct {a:1,a:3}   {a:1,a:3})

(check_merge {} null.struct       {})
(check_merge {} {}                {})
(check_merge {} {a:1}             {a:1})
(check_merge {} {a:1,'':2}        {a:1,'':2})
(check_merge {} {a:1,a:3}         {a:1,a:3})
(check_merge {} {a:1,b:2,a:3,b:4} {a:1,b:2,a:3,b:4})

(check_merge {a:0} null.struct       {a:0})
(check_merge {a:0} {}                {a:0})
(check_merge {a:0} {a:1}             {a:0,a:1})
(check_merge {a:0} {a:1,'':2}        {a:0,a:1,'':2})
(check_merge {a:0} {a:1,a:3}         {a:0,a:1,a:3})
(check_merge {a:0} {a:1,b:2,a:3,b:4} {a:0,a:1,b:2,a:3,b:4})

(check_merge {a:0,b:2} null.struct       {a:0,b:2})
(check_merge {a:0,b:2} {}                {a:0,b:2})
(check_merge {a:0,b:2} {a:1}             {a:0,b:2,a:1})
(check_merge {a:0,'':2} {a:1,'':2}       {a:0,'':2,a:1,'':2})
(check_merge {a:0,b:2} {a:1,a:3}         {a:0,b:2,a:1,a:3})
(check_merge {a:0,b:2} {a:1,b:2,a:3,b:4} {a:0,b:2,a:1,b:2,a:3,b:4})


(let [(s (mutable_struct))]
  (struct_merge_m s {f:1,g:2,f:1})
  (check === 3 (size s))
  (struct_merge_m s {f:1,g:2})
  (check === 5 (size s)))

(let [(s (mutable_struct "f" 1 "f" 2 "g" 3))]
  (struct_merge_m s {h:1})
  (check === 4 (size s))
  (struct_merge_m s {i:1,i:2})
  (check === 6 (size s))
  (struct_merge_m s {g:1})
  (check === 7 (size s)))


//==========================================================================
// struct_merge1 and struct_merge1_m

(require "/fusion/experimental/struct")

(define (check_merge1 val other expect)
  (check_pred is_immutable_struct other)
  (let [(other_m (mutable_struct_copy other))]
    (check_mods struct_merge1 struct_merge1_m val (list other  ) expect)
    (check_mods struct_merge1 struct_merge1_m val (list other_m) expect)
    // Retain existing annotations
    (let [(ann_val    (annotate val    "a" "b")),
          (ann_expect (annotate expect "a" "b"))]
      (check_mods struct_merge1 struct_merge1_m ann_val [other  ] ann_expect)
      (check_mods struct_merge1 struct_merge1_m ann_val [other_m] ann_expect)))
  (let [(s (mutable_struct_copy val)),
        (o (struct_copy other))]
    (let [(result (struct_merge1 s o))]
      (put_m result "mod" "mod")
      (unless (= 0 (size o))
        (check_void (. s "mod") "Unexpected mutation of 1st arg"))
      (check_void (. o "mod")   "Unexpected mutation of 2nd arg"))
    (let [(result (struct_merge1_m s o))]
      (put_m result "mod" "mod")
      (check_void (. o "mod")   "Unexpected mutation of 2nd arg"))))


(check_merge1 null.struct null.struct null.struct)
(check_merge1 null.struct {}          null.struct)
(check_merge1 null.struct {a:1}       {a:1})
(check_merge1 null.struct {a:1,b:2}   {a:1,b:2})
(check_merge1 null.struct {a:1,a:1}   {a:1})

(check_merge1 {} null.struct       {})
(check_merge1 {} {}                {})
(check_merge1 {} {a:1}             {a:1})
(check_merge1 {} {a:1,b:2}         {a:1,b:2})
(check_merge1 {} {a:1,a:1}         {a:1})
(check_merge1 {} {a:1,b:2,a:1,b:2} {a:1,b:2})

(check_merge1 {a:0} null.struct       {a:0})
(check_merge1 {a:0} {}                {a:0})
(check_merge1 {a:0} {a:1}             {a:1})
(check_merge1 {a:0} {a:1,'':2}         {a:1,'':2})
(check_merge1 {a:0} {a:1,a:1}         {a:1})
(check_merge1 {a:0} {a:1,b:2,a:1,b:2} {a:1,b:2})

(check_merge1 {a:0,b:2} null.struct       {a:0,b:2})
(check_merge1 {a:0,b:2} {}                {a:0,b:2})
(check_merge1 {a:0,b:2} {a:1}             {a:1,b:2})
(check_merge1 {a:0,'':2} {a:1,'':3}       {a:1,'':3})
(check_merge1 {a:0,b:2} {a:1,a:1}         {a:1,b:2})
(check_merge1 {a:0,b:2} {a:1,b:3,a:1,b:3} {a:1,b:3})

(check_merge1 {a:0,a:0} null.struct       {a:0})
(check_merge1 {a:0,a:0} {}                {a:0})
(check_merge1 {a:0,a:0} {a:1}             {a:1})
(check_merge1 {a:0,a:0} {a:1,'':3}        {a:1,'':3})
(check_merge1 {a:0,a:0} {a:1,a:1}         {a:1})
(check_merge1 {a:0,a:0} {a:1,b:3,a:1,b:3} {a:1,b:3})


(let [(s (mutable_struct))]
  (struct_merge1_m s {f:1,g:2,f:1})
  (check === 2 (size s))
  (struct_merge1_m s {f:1,g:2})
  (check == 2 (size s))
  (struct_merge1_m s {h:1,h:2})
  (check === 3 (size s)))

(let [(s (mutable_struct "f" 1 "f" 2 "g" 3))]
  (struct_merge1_m s {h:1})
  (check === 3 (size s))
  (struct_merge1_m s {i:1,i:2})
  (check === 4 (size s))
  (struct_merge1_m s {g:1})
  (check === 4 (size s)))


//==========================================================================
// struct_unzip

(define_check (check_unzip struct keys vals)
  (let_values [((k v) (struct_unzip struct))]
    (check_true (bag_equal === keys k))
    (check_true (bag_equal === vals v))
    (unless (is_null struct)
      (check === struct (struct_zip k v)))))


(check_unzip null.struct [] [])
(check_unzip {}          [] [])

(check_unzip {a:1}     (quote [a]  ) [1])
(check_unzip {a:1,a:1} (quote [a,a]) [1,1])
(check_unzip {a:1,a:2} (quote [a,a]) [1,2])
(check_unzip {a:1,'':2} (quote ['',a]) [2,1])


(expect_argument_exn (struct_unzip []))


//==========================================================================
// struct_zip and mutable_struct_zip

(define_check (check_zip keys values expect)
  (let [(v (struct_zip keys values))]
    (check_pred is_immutable_struct v)
    (check === expect v))
  (let [(v (mutable_struct_zip keys values))]
    (check_pred is_mutable_struct v)
    (check === expect v)))

(check_zip null.list [1] {})
(check_zip ["f"] null.list {})

(check_zip ["f"] [3] {f:3})
(check_zip [""]  [8] {'':8})
(check_zip ["hello"] ["world"] {hello:"world"})
(check_zip ["f","g"] [3,"hello"] {f:3,g:"hello"})
(check_zip ["A","B"] [3,[true,false,[]]]
  {A:3,B:[true,false,[]]})

// Repeated fields
(check_zip ["A","A","A"] [2,1,3] {A:1,A:2,A:3})

// Unequal lengths
(check_zip ["A","B"] [3] {A:3})


(expect_arity_exn (        struct_zip))
(expect_arity_exn (mutable_struct_zip))
(expect_arity_exn (        struct_zip ["f"]))
(expect_arity_exn (mutable_struct_zip ["f"]))

(expect_argument_exn (        struct_zip  "f"  [3]))
(expect_argument_exn (mutable_struct_zip  "f"  [3]))
(expect_argument_exn (        struct_zip ["f"]  3 ))
(expect_argument_exn (mutable_struct_zip ["f"]  3 ))

(expect_argument_exn (struct_zip [null.string] [0]))
(expect_argument_exn (struct_zip (quote [null.symbol]) [0]))


//==========================================================================
// struct_do (aka struct_for_each)

(define rip_and_zip
  (lambda (struct)
    (let [(names  (stretchy_list)),
          (values (stretchy_list))]
      (let [(result (struct_for_each
                      (lambda (name value)
                        (add_m names name)
                        (add_m values value))
                      struct))]
        // It returns the input struct, for some reason.
        (check ident result struct)
        (let [(zipped (struct_zip names values))]
          (check === struct zipped))))))

(rip_and_zip {})
(rip_and_zip {a:1,b:[2,3],c:{d:(quote e)}})
(rip_and_zip {a:1,b:[2,3],a:{d:(quote e)}})  // Repeated field


// struct_for_each returns its input struct.
(check === 1
  (. (struct_for_each (lambda (k v) 3) {f:1}) "f"))


//==========================================================================
// remove_keys and remove_keys_m

(define_check (check_remove_keys val keys expect)
  (check_mods remove_keys remove_keys_m val keys expect)
  // Retain existing annotations
  (let [(ann_val    (annotate val    "a" "b")),
        (ann_expect (annotate expect "a" "b"))]
    (check_mods remove_keys remove_keys_m ann_val keys ann_expect)))

(check_remove_keys null.struct [   ] null.struct)
(check_remove_keys null.struct ["f"] null.struct)

(check_remove_keys {}        [   ] {})
(check_remove_keys {}        ["f"] {})
(check_remove_keys {f:1}     [   ] {f:1})
(check_remove_keys {f:1}     ["f"] {})
(check_remove_keys {f:1,f:2} ["f"] {})
(check_remove_keys {f:1,f:2} ["g"] {f:1,f:2})

(check_remove_keys {g:2,'':1} ["", "h"      ] {g:2})
(check_remove_keys {f:1,g:2} ["f", (quote g)] {})


(let [(s (mutable_struct))]
  (remove_keys_m s "f" "g")
  (check === 0 (size s)))

(let [(s (mutable_struct "f" 1 "f" 2 "g" 3))]
  (remove_keys_m s "g")
  (check === 2 (size s))
  (remove_keys_m s "f")
  (check === 0 (size s)))


//==========================================================================
// retain_keys and retain_keys_m

(define_check (check_retain_keys val keys expect)
  (check_mods retain_keys retain_keys_m val keys expect)
  // Retain existing annotations
  (let [(ann_val    (annotate val    "a" "b")),
        (ann_expect (annotate expect "a" "b"))]
     (check_mods retain_keys retain_keys_m ann_val keys ann_expect)))

(check_retain_keys null.struct []    null.struct)
(check_retain_keys null.struct ["f"] null.struct)

(check_retain_keys {       } [   ] {})
(check_retain_keys {       } ["f"] {})
(check_retain_keys {f:1    } ["g"] {})
(check_retain_keys {f:1,f:2} ["g"] {})
(check_retain_keys {f:1,f:2} ["f"] {f:1,f:2})
(check_retain_keys {'':1,g:2} [""] {'':1})
(check_retain_keys {f:1,g:2} ["h"] {})
(check_retain_keys {f:1,g:2} [   ] {})

(check_retain_keys {a:1,b:3,c:2} [   ] {})
(check_retain_keys {a:1,b:3,c:2} [(quote a), "c"] {a:1,c:2})


(let [(s (mutable_struct))]
  (retain_keys_m s "f" "g")
  (check === 0 (size s)))

(let [(s (mutable_struct "f" 1 "f" 2 "g" 3))]
  (retain_keys_m s "g" "f")
  (check === 3 (size s))
  (retain_keys_m s "f")
  (check === 2 (size s))
  (retain_keys_m s "g")
  (check === 0 (size s)))


//==========================================================================
// any

(check_false (any T null.struct))
(check_false (any T {}))
(check_false (any F {f:1, g:2}))
(check_true  (any T {f:1, g:2}))

(check_true  (any (lambda (e) (= e "hi")) {f:"oh", g:"hi"}))
(check_false (any (lambda (e) (= e "ho")) {f:"oh", g:"hi"}))

(check ===   (any (lambda (e) (when (= e "hi") e)) {f:"oh", g:"hi"}) "hi")

// Check that it returns the truthy predicate result, not the selected element
(check === 408
  (any (lambda (e) (when (= e 204) (* e 2)))
    {f:123, f:204, f:567}))
(check === 1134
  (any (lambda (e) (when (= e 567) (* e 2)))
    {f:123, f:204, f:567}))

// Check than it returns the last predicate result if none are truthy
(check_pred (conjoin is_null is_int)
  (any (lambda (s) null.int)
    {a:false, b:(void)}))
(check_pred is_null_null
  (any (lambda (s) null)
    {a:false, b:true}))
(check_void
  (any (lambda (s) (void))
    {a:false, b:null.int, c:null.list}))


//==========================================================================
// none

(check_true  (none is_truthy {}))
(check_true  (none is_truthy {f:null, g:false}))
(check_false (none is_truthy {f:1, g:2}))

(check_false (none (lambda (e) (= e "hi")) {f:"oh", g:"hi"}))
(check_true  (none (lambda (e) (= e "ho")) {f:"oh", g:"hi"}))


//==========================================================================
// every

(check_true (every T null.struct))
(check_true (every T {}))
(check_false (every F {f:1, g:2}))
(check_true  (every T {f:1, g:2}))

(check_false (every (lambda (e) (= e "hi")) {f:"oh", g:"hi"}))
(check_true  (every (lambda (e) (= e "hi")) {f:"hi", g:"hi"}))

(check === "hi" (every (lambda (e) (when (= e "hi") e)) {f:"hi", g:"hi"}))

// Check that it returns the untruthy predicate result
(check_void
  (every (lambda (e) (when (= e 204) e))
    {f:123, f:204, f:567}))
(check_pred is_null
  (every (lambda (e) (if (= e 123) e null))
    {f:123, f:456, f:678}))


//==========================================================================
// do

(check_void (do (lambda (x) (+ 1 x)) {f:2, g:3}))

(let [(sum 0)]
  (do (lambda (x) (set sum (+ sum x))) {f:2, g:3})
  (check === 5 sum))


//==========================================================================
// find

(check_void (find F null.struct))
(check_void (find F {}))
(check_void (find F {f:1, g:2}))
(check === 1 (find T {f:1}))

(check === "hi" (find (lambda (e) (= e "hi")) {f:"oh", g:"hi"}))


//==========================================================================
// Iteration

(define (list_from_iterator2 iterator)
  "Fork of list_from_iterator that handles 2-result iterators."
  (let loop [(result (stretchy_list))]
    (if (iterator_has_next iterator)
      (let_values [((k v) (iterator_next iterator))]
        (loop (unsafe_list_add_m result [k, v])))
      result)))

(define_check (check_iter struct elements)
  (let [(actual (list_from_iterator2 (struct_iterator struct)))]
    (check_true (bag_equal === actual elements))))

(check_iter null.struct   (quote []))
(check_iter {}            (quote []))
(check_iter {a:1}         (quote [[a,1]]))
(check_iter {a:1,a:2}     (quote [[a,1],[a,2]]))
(check_iter {a:1,b:3,a:2} (quote [[b,3],[a,1],[a,2]]))

(expect_argument_exn (struct_iterator []))
