// Copyright (c) 2012-2014 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
  "/fusion/list"
  "/fusion/private/builtins"  // annotate
  "/fusion/unsafe/list"
  "/testutils")


(define _list_copy
  (lambda (ctor v)
    (apply annotate
      (if (is_null v)
        v
        (apply ctor v))
      (type_annotations v))))

(define list_copy
  (lambda (v)
    (_list_copy list v)))

(define mutable_list_copy
  (lambda (v)
    (_list_copy mutable_list v)))

(define stretchy_list_copy
  (lambda (v)
    (_list_copy stretchy_list v)))


(define_check (check_mod_f op val args expect)
  "Functional modification check"
  (let [(v (list_copy val))]
    (let [(result (apply op v args))]
      (check_pred is_immutable_list result "result should be immutable")
      (check === expect result "Unexpected result on immutable arg")
      (check === val v "Immutable arg was mutated")))
  (unless (is_null val)                             // There's no mutable null
    (let [(v (mutable_list_copy val))]
      (let [(result (apply op v args))]
        (check_pred is_mutable_list result)
        (check === expect result "Unexpected result on mutable arg")
        (check === val v "Mutable arg was mutated")
        (unless (is_empty val)
          (list_set result 0 "mod")
          (check === val v "Unexpected mutation of original"))))
    (let [(v (stretchy_list_copy val))]
      (let [(result (apply op v args))]
        (check_pred is_stretchy_list result)
        (check === expect result "Unexpected result on stretchy list")
        (check === val v "Stretchy arg was mutated")
        (add_m result "stretch")
        (check === val v "Unexpected mutation of original")
        (unless (is_empty val)
          (list_set result 0 "mod")
          (check === val v "Unexpected mutation of original"))))))



//==========================================================================
// Literals

(check_pred is_null  null.list)
(check_pred is_empty null.list)
(check_pred is_null  (quote null.list))
(check_pred is_empty (quote null.list))
(check_pred is_null  (quote a::null.list))
(check_pred is_empty (quote a::null.list))

(check_false (is_null []))
(check_false (is_null (quote [])))
(check_false (is_null (quote a::[])))


(check_annotations []            (quote []))
(check_annotations ["a"]         (quote a::[]))
(check_annotations ["a","b"]     (quote a::b::[]))
(check_annotations ["a","b","a"] (quote a::b::a::[]))

(check_false (is_list           (quote ())))
(check_false (is_mutable_list   (quote ())))
(check_false (is_immutable_list (quote ())))
(check_false (is_stretchy_list  (quote ())))


//==========================================================================
// Constructors and Predicates

(define_check (check_predicates list mutable stretchy)
  (check_pred is_list list)
  (check_pred is_collection list)
  (check_pred is_sequence list)
  (check === mutable       (is_mutable_list   list))
  (check === (not mutable) (is_immutable_list list))
  (check === stretchy      (is_stretchy_list  list)))


// Construction via literals

(define x "anything")

(check_predicates []     false false)
(check_predicates [0]    false false)
(check_predicates [0, T] false false)

(check_predicates (quote [])     false false)
(check_predicates (quote [0])    false false)
(check_predicates (quote [0, T]) false false)


// Construction via procedures

(define_check (check_makers maker mutable stretchy)
  (check_predicates (apply maker (quote ())) mutable stretchy)
  (check_predicates (apply maker (quote (0))) mutable stretchy)
  (check === []     (apply maker (quote ())))
  (check === [0, 1] (apply maker (quote (0 1)))))

(check_makers list          false false)
(check_makers mutable_list  true  false)
(check_makers stretchy_list true  true)


//==========================================================================
// annotate

(check_mod_f annotate null.list []                      null.list)
(check_mod_f annotate null.list ["a"]      (quote a::   null.list))
(check_mod_f annotate null.list ["a", "b"] (quote a::b::null.list))

(check_mod_f annotate [] []                      [])
(check_mod_f annotate [] ["a"]      (quote a::   []))
(check_mod_f annotate [] ["a", "b"] (quote a::b::[]))

(check_mod_f annotate [1] []                      [1])
(check_mod_f annotate [1] ["a"]      (quote a::   [1]))
(check_mod_f annotate [1] ["a", "b"] (quote a::b::[1]))


// Replacing existing annotations
(check_mod_f annotate (quote x::null.list) ["a"]      (quote a::null.list))
(check_mod_f annotate (quote x::null.list) ["a", "b"] (quote a::b::null.list))

(check_mod_f annotate (quote x::[]) []                      [])
(check_mod_f annotate (quote x::[]) ["a"]      (quote a::   []))
(check_mod_f annotate (quote x::[]) ["a", "b"] (quote a::b::[]))

(check_mod_f annotate (quote x::[1]) []                      [1])
(check_mod_f annotate (quote x::[1]) ["a"]      (quote a::   [1]))
(check_mod_f annotate (quote x::[1]) ["a", "b"] (quote a::b::[1]))


(expect_argument_exn (annotate null.list null))
(expect_argument_exn (annotate null.list ""))
(expect_argument_exn (annotate null.list null.string))
(expect_argument_exn (annotate null.list (quote null.symbol)))
(expect_argument_exn (annotate null.list 12))


//==========================================================================
// size

(define imm0 [])
(define imm1 [0])
(define imm2 [0, [1]])

(define mut0 (mutable_list))
(define mut1 (mutable_list 0))
(define mut2 (mutable_list 0 [1]))

(define str0 (stretchy_list))
(define str1 (stretchy_list 0))
(define str2 (stretchy_list 0 [1]))


(check === 0 (size imm0))
(check === 0 (size mut0))
(check === 0 (size str0))

(check === 1 (size imm1))
(check === 1 (size mut1))
(check === 1 (size str1))

(check === 2 (unsafe_list_size imm2))
(check === 2 (unsafe_list_size mut2))
(check === 2 (unsafe_list_size str2))


//==========================================================================
// has_key

(check_false (has_key null.list ""))
(check_false (has_key null.list null.int))
(check_false (has_key null.list -1))
(check_false (has_key null.list 0))
(check_false (has_key null.list 1))

(check_false (has_key [] ""))
(check_false (has_key [] null.int))
(check_false (has_key [] -1))
(check_false (has_key [] 0))
(check_false (has_key [] 1))

(check_false (has_key [1,2,3] null.string))
(check_false (has_key [1,2,3] -1))
(check_false (has_key [1,2,3] 3))

(check_true (has_key [1,2,3] 0))
(check_true (has_key [1,2,3] 1))
(check_true (has_key [1,2,3] 2))

(check_true (has_key [null]   0))
(check_true (has_key [false]  0))
(check_true (has_key [(void)] 0))

(expect_arity_exn (has_key))
(expect_arity_exn (has_key []))


//==========================================================================
// list_element

(define_check (check_ref vec2)
  (check === 0   (list_element vec2 0))
  (check === 0   (unsafe_list_element vec2 0))
  (check === [1] (list_element vec2 1))
  (check === [1] (list_element vec2 1))
  (check === [1] (unsafe_list_element vec2 1)))

(check_ref imm2)
(check_ref mut2)
(check_ref str2)


// Lists can hold any type!

(check_true ((list_element [F, T] 1)))
(check_true ((list_element (mutable_list F T) 1)))
(check_true ((list_element (stretchy_list F T) 1)))

// Bad arguments
(expect_argument_exn (list_element [1,2] null.int))


//==========================================================================
// list_set

(check === [1]
  (let [(v (mutable_list 0))]
    (list_set v 0 1)
    v))

(check === [1]
 (let [(v (stretchy_list 0))]
   (list_set v 0 1)
   v))


//==========================================================================
// add, add_m

(define_check (check_add add_proc v0)
  (expect_arity_exn (add_proc))
  (expect_arity_exn (add_proc []))
  (let [(mutable (is_mutable_list v0)),
        (stretchy (is_stretchy_list v0)),
        (v1 (add_proc v0 1))]
    (check_predicates v1 mutable stretchy)
    (check === []  v0 "v0 not modified")
    (check === [1] v1)
    (let [(v2 (add_proc v1 2))]
      (check_predicates v2 mutable stretchy)
      (check === []     v0 "v0 not modified")
      (check === [1]    v1 "v1 not modified")
      (check === [1, 2] v2))))

(check_add add [])
(check_add add (list))
(check_add add (mutable_list))
(check_add add (stretchy_list))

(check_add unsafe_list_add [])
(check_add unsafe_list_add (list))
(check_add unsafe_list_add (mutable_list))
(check_add unsafe_list_add (stretchy_list))


(define_check (check_add_m add_m_proc add_proc v0)
  (expect_arity_exn (add_m_proc))
  (let [(mutable (is_mutable_list v0)),
        (stretchy (is_stretchy_list v0)),
        (v1 (add_m_proc v0 1))]
    (check_predicates v1 mutable stretchy)
    (if stretchy
      (check === [1] v0 "v0 should be modified")
      (check === []  v0 "v0 not modified"))
    (check === [1] v1)
    (let [(v2 (add_m_proc v1 2))]
      (check_predicates v2 mutable stretchy)
      (if stretchy
        (begin
          (check === [1, 2] v0 "v0 should be modified")
          (check === [1, 2] v1 "v1 should be modified"))
        (begin
          (check === []  v0 "v0 not modified")
          (check === [1] v1 "v1 not modified")))
      (check === [1, 2] v2)

      // Test that we use the right size when its less than capacity
      (lets [(v3 (add_m_proc v2 3)),
             (v4 (add_proc v3 4))]  // NOT add_m!
        (check === [1,2,3,4] v4)))))


(check_add_m add_m add [])
(check_add_m add_m add (list))
(check_add_m add_m add (mutable_list))
(check_add_m add_m add (stretchy_list))

(check_add_m unsafe_list_add_m unsafe_list_add [])
(check_add_m unsafe_list_add_m unsafe_list_add (list))
(check_add_m unsafe_list_add_m unsafe_list_add (mutable_list))
(check_add_m unsafe_list_add_m unsafe_list_add (stretchy_list))


(expect_argument_exn (add_m NULL_SEXP 2))


(define str (stretchy_list 1 2))
(unsafe_list_add_m str 3)
{ a: str }  // Once broken due to the null in the stretchy list after 3


//==========================================================================
// Iteration

(check === [1,2,3]
  (list_from_iterator (list_iterator str)))


//==========================================================================
// append_m

(define_check (check_append_m v0)
  (let [(mutable (is_mutable_list v0)),
        (stretchy (is_stretchy_list v0)),
        (v1 (append_m v0 [1]))]
    (check_predicates v1 mutable stretchy)
    (if stretchy
      (check === [1] v0 "v0 should be modified")
      (check === []  v0 "v0 not modified"))
    (check === [1] v1 "v1")
    (let [(v2 (append_m v1 (stretchy_list 2 3) (mutable_list 4)))]
      (check_predicates v2 mutable stretchy)
      (if stretchy
        (begin
          (check === [1, 2, 3, 4] v0 "v0 should be modified")
          (check === [1, 2, 3, 4] v1 "v1 should be modified"))
        (begin
          (check === []  v0 "v0 not modified")
          (check === [1] v1 "v1 not modified")))
      (check === [1, 2, 3, 4] v2))))

(check_append_m [])
(check_append_m (list))
(check_append_m (mutable_list))
(check_append_m (stretchy_list))

(check === [1] (append_m null.list [1] null.list))
(check === [1] (append_m [1] null.list))


(check === (quote a::null.list)
  (append_m (quote a::null.list)))
(check === (quote a::[c::2])
  (append_m (quote a::null.list) (quote b::[c::2])))

(check === (quote a::[1])
  (append_m (quote a::[1])))
(check === (quote a::[1,c::2])
  (append_m (quote a::[1]) (quote b::[c::2])))

// TODO test annotations on mutable/stretchy lists


//==========================================================================
// first

(expect_arity_exn (first))
(expect_arity_exn (first [1] 2))

(check === 1 (first [1]))
(check === 1 (first [1, 2]))

(expect_argument_exn (first null.list))
(expect_argument_exn (first []))
(expect_argument_exn (first "boeing"))


//==========================================================================
// last

(expect_arity_exn (last))
(expect_arity_exn (last [1] 2))


(check === 1 (last [1]))
(check === 2 (last [1, 2]))

(expect_argument_exn (last []))
(expect_argument_exn (last "boeing"))


//==========================================================================
// find

(check_void (find F null.list))
(check_void (find F []))
(check_void (find F [1, 2]))
(check === 1 (find T [1, 2]))

(check === "hi" (find (lambda (e) (= e "hi")) ["oh", "hi"]))


//==========================================================================
// any

(check_false (any T null.list))
(check_false (any T []))
(check_false (any F [1, 2]))
(check_true  (any T [1, 2]))

(check_true  (any (lambda (e) (= e "hi")) ["oh", "hi"]))
(check_false (any (lambda (e) (= e "ho")) ["oh", "hi"]))

// Check that it returns the truthy predicate result, not the selected element
(check === 408
  (any (lambda (e) (when (= e 204) (* e 2)))
    [123, 204, 567]))
(check === 1134
  (any (lambda (e) (when (= e 567) (* e 2)))
    [123, 204, 567]))

// Check that `any` returns the last predicate result if none are truthy
(check_pred (conjoin is_null is_int)
  (any (lambda (s) (if (is_void s) null.int null))
    [false, (void)] ))
(check_pred (conjoin is_null is_int)
  (any (lambda (s) (if (is_null s) null.int null))
    [false, null.bool]))
(check_void
  (any (lambda (s) (if (is_null s) (void) null))
    [false, null.int, null.list]))

//==========================================================================
// none

(check_true  (none is_truthy null.list)) 
(check_true  (none is_truthy [])) 
(check_true  (none is_truthy [false]))
(check_true  (none is_truthy [false,null]))
(check_false (none is_truthy [1, 2])) 
(check_false (none is_truthy [1,"hello, world",null]))

(check_false (none (lambda (e) (= e "hi")) ["oh", "hi"]))
(check_true  (none (lambda (e) (= e "ho")) ["oh", "hi"]))


//==========================================================================
// every

(check_true (every T null.list))
(check_true (every T []))
(check_false (every F [1, 2]))
(check_true  (every T [1, 2]))

(check_false (every (lambda (e) (= e "hi")) ["oh", "hi"]))
(check_true  (every (lambda (e) (= e "hi")) ["hi", "hi"]))

// Check that it returns the untruthy predicate result
(check_void
  (every (lambda (e) (when (= e 204) e))
    [123, 204, 567]))
(check_pred is_null
  (every (lambda (e) (if (= e 123) e null))
    [123, 456, 678]))

// Check that `every` returns the last predicate result if all are truthy
(check === 1134
  (every (lambda (e) (when (or (= e 123) (= e 567)) (* e 2)))
    [123, 123, 567]))


//==========================================================================
// map

(check === []     (map + null.list))
(check === []     (map + []))
(check === [1, 2] (map + [1, 2]))
(check === [4, 5] (map (lambda (n) (+ 3 n)) [1, 2]))

(check === []    (choose T null.list))
(check === []    (choose F null.list))
(check === []    (choose T []))
(check === []    (choose F []))
(check === [1,2] (choose T [1, 2]))
(check === []    (choose F [1, 2]))

(check === [11, 12]
  (choose (lambda (n) (< 10 n)) [1, 11, 10, 12]))


//==========================================================================
// do

(check_void (do identity null.list))
(check_void (do (lambda (x) (+ 1 x)) [2, 3]))

(let [(v (stretchy_list))]
  (do (lambda (x) (add_m v (+ 1 x))) [2, 3])
  (check === [3, 4] v))
