// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/eval"
  "/fusion/experimental/check"
  "/fusion/experimental/syntax"
  )


//============================================================================
// Check use at module context

(expect_syntax_exn
  (provide eval))   // ERROR: not at module level


(expect_syntax_exn
  (module M "/fusion"
    (if true
      (provide if)  // ERROR: not at module level
      true)))

// The base case: no provide clauses.
(module NothingOut "/fusion"
  (provide))


//============================================================================
// Should be able to provide something twice

(module Twice "/fusion"
  (define twice 2)
  (provide twice)
  (provide twice))

(require Twice)
(check === 2 twice)


//============================================================================
// Check simple all_defined_out

(module M1 "/fusion"
  (define m1 1)
  (define m2 2)
  (provide (all_defined_out)))

(require M1)
(check === 1 m1)
(check === 2 m2)


(expect_syntax_exn
  (module Bad "/fusion"
    (provide (all_defined_out id))))  // ERROR: superfluous id


//============================================================================
// Check that all_defined_out filters identifiers based on lexical context.

(define top "at-top")

(module M2 "/fusion"
  (require "/fusion/experimental/syntax")
  (define_syntax deftop
    (lambda (stx)
      (quasisyntax
        (define top (unsyntax (syntax_get stx 1))))))
  (define_syntax defpubtop
    (lambda (stx)
      (quasisyntax
        (begin (define top (unsyntax (syntax_get stx 1)))
               (provide (all_defined_out))))))
  (provide (all_defined_out)))

(require M2)
(deftop "macro")         // Defines a different top, with marks from the macro
(check === "at-top" top)

(module M3 "/fusion"
  (require M2)
  (deftop "inside M3")
  // This should not export top since it was introduced via macro
  (provide (all_defined_out)))

(require M3)
(check === "at-top" top)


(module M4 "/fusion"
  (require M2)
  // This DOES export top
  (defpubtop "inside M4"))
(require M4)
(check === "inside M4" top)


// Check failure exporting two bindings w/same name
(expect_syntax_exn
  (module M5 "/fusion"
    (require M2)
    (define top "M5")
    (provide top)
    (defpubtop "macro M5")))


//============================================================================
// Check simple rename_out

(module M6 "/fusion"
  (provide (rename_out)))
(require M6)

(module M7 "/fusion"
  (define counter 508)
  (provide (rename_out (counter m7_counter)
                       (counter m7_counter2))))
(require M7)
(check === 508 m7_counter)
(check === 508 m7_counter2)
(check free_identifier_equal (quote_syntax m7_counter) (quote_syntax m7_counter2))

(module M8 "/fusion"
  (require M7)
  (provide m7_counter (rename_out (m7_counter2 m8_counter2))))
(require M8)
(check === 508 m7_counter)   // Renamed then passed through
(check === 508 m8_counter2)  // Renamed twice
(check free_identifier_equal (quote_syntax m7_counter) (quote_syntax m7_counter2))
(check free_identifier_equal (quote_syntax m7_counter) (quote_syntax m8_counter2))


(expect_syntax_exn
  (module Bad "/fusion"
    (provide (rename_out id id2))))  // ERROR: not a rename pair

(expect_syntax_exn
  (module Bad "/fusion"
    (provide (rename_out ()))))  // ERROR: Malformed rename pair

(expect_syntax_exn
  (module Bad "/fusion"
    (provide (rename_out (+ out out2)))))  // ERROR: Malformed rename pair

(expect_syntax_exn
  (module Bad "/fusion"
    (provide (rename_out (12 id)))))  // ERROR: local is not an identifier

(expect_syntax_exn
  (module Bad "/fusion"
    (provide (rename_out (+ 12)))))  // ERROR: exported is not an identifier

(expect_syntax_exn
  (module Bad "/fusion"
    (provide (rename_out (unbound out)))))  // ERROR: unbound identifier

(expect_syntax_exn
  (module Bad "/fusion"
    (provide (rename_out (+ out) (- out)))))  // ERROR: duplicate name

(expect_syntax_exn
  (module Bad "/fusion"
    (define one 1)
    (define two 2)
    (provide (all_defined_out))
    (provide (rename_out (one two)))))  // ERROR: duplicate name
