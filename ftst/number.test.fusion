// Copyright (c) 2012-2014 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/experimental/check"
  "/fusion/number")


// Here's the bindings we expect to be available:
(module check_bindings '/fusion/number'
  [ '*', '+', '-', '/',
    '<', '<=', '=', '>=', '>',
    is_decimal, is_float, is_int,
    ceiling, floor,
    int_to_string, string_to_int,
  ])


//============================================================================
// division

// TODO check precision rules
(check == 2.0 (/ 4.0 2.0))

// divide by zero
(expect_contract_exn (/ 12. 0.))

// inexact result
(expect_contract_exn (/ 12. 7.))


//============================================================================
// comparisons

(check_true (< 1   2  ))
(check_true (< 1   2.0))
(check_true (< 1.0 2  ))
(check_true (< 1.0 2.0))

(check_false (< 2   1  ))
(check_false (< 2   1.0))
(check_false (< 2.0 1  ))
(check_false (< 2.0 1.0))

(check_false (< 1   1  ))
(check_false (< 1   1.0))
(check_false (< 1.0 1  ))
(check_false (< 1.0 1.0))


//============================================================================
// ceiling

(check === -1 (ceiling -1.1))
(check === -1 (ceiling -1))
(check ===  0 (ceiling -0.1))
(check ===  0 (ceiling  0))
(check ===  0 (ceiling  0.))
(check ===  1 (ceiling  0.1))
(check ===  1 (ceiling  0.9))
(check ===  1 (ceiling  1.0))
(check ===  2 (ceiling  1.9))


(expect_arity_exn (ceiling))
(expect_arity_exn (ceiling 0 1))

(expect_argument_exn (ceiling null.int))
(expect_argument_exn (ceiling null.decimal))
(expect_argument_exn (ceiling 1e0))
(expect_argument_exn (ceiling "1"))


//============================================================================
// floor

(check === -2 (floor -1.1))
(check === -1 (floor -1))
(check === -1 (floor -0.1))
(check ===  0 (floor  0))
(check ===  0 (floor  0.))
(check ===  0 (floor  0.1))
(check ===  0 (floor  0.9))
(check ===  1 (floor  1.0))
(check ===  1 (floor  1.9))

(expect_arity_exn (floor))
(expect_arity_exn (floor 0 1))

(expect_argument_exn (floor null.int))
(expect_argument_exn (floor null.decimal))
(expect_argument_exn (floor 1e0))
(expect_argument_exn (floor "1"))


//============================================================================
// int_to_string

(check === null.string (int_to_string null.int))

(check === "0"    (int_to_string 0))
(check === "1234" (int_to_string 1234))
(check === "-99"  (int_to_string -99))

(check ===     "-123456789012345678901234567890"
 (int_to_string -123456789012345678901234567890))

(expect_argument_exn (int_to_string 1.))
(expect_argument_exn (int_to_string "1"))


//============================================================================
// string_to_int

(check === null.int (string_to_int null.string))

(check === 0    (string_to_int "0"))
(check === 1234 (string_to_int "1234"))
(check === -99  (string_to_int "-99"))

(check ===        -123456789012345678901234567890
  (string_to_int "-123456789012345678901234567890"))

(expect_argument_exn (string_to_int ""))
(expect_argument_exn (string_to_int " 0"))
(expect_argument_exn (string_to_int "0 "))
(expect_argument_exn (string_to_int " 0 "))
(expect_argument_exn (string_to_int "0-"))
(expect_argument_exn (string_to_int "0,"))
(expect_argument_exn (string_to_int "+1"))
(expect_argument_exn (string_to_int "--1"))

(expect_argument_exn (string_to_int "1."))
(expect_argument_exn (string_to_int "1.0"))
