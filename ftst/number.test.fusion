// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/check"
  "/fusion/number")


// Here's the bindings we expect to be available:
(module check_bindings '/fusion/number'
  [ '*', '+', '-', '/',
    '<', '<=', '=', '>=', '>',
    is_decimal, is_float, is_int,
    ceiling, floor,
    int_to_string, string_to_int,
  ])


// Comparisons are tested in compare.test.fusion


//============================================================================
// division

// TODO check precision rules
(check == 2.0 (/ 4.0 2.0))

// divide by zero
(expect_contract_exn (/ 12. 0.))

// inexact result
(expect_contract_exn (/ 12. 7.))

//============================================================================
// ceiling

(check === -1 (ceiling -1.1))
(check === -1 (ceiling -1))
(check ===  0 (ceiling -0.1))
(check ===  0 (ceiling  0))
(check ===  0 (ceiling  0.))
(check ===  1 (ceiling  0.1))
(check ===  1 (ceiling  0.9))
(check ===  1 (ceiling  1.0))
(check ===  2 (ceiling  1.9))


(expect_arity_exn (ceiling))
(expect_arity_exn (ceiling 0 1))

(expect_argument_exn (ceiling null.int))
(expect_argument_exn (ceiling null.decimal))
(expect_argument_exn (ceiling 1e0))
(expect_argument_exn (ceiling "1"))


//============================================================================
// floor

(check === -2 (floor -1.1))
(check === -1 (floor -1))
(check === -1 (floor -0.1))
(check ===  0 (floor  0))
(check ===  0 (floor  0.))
(check ===  0 (floor  0.1))
(check ===  0 (floor  0.9))
(check ===  1 (floor  1.0))
(check ===  1 (floor  1.9))

(expect_arity_exn (floor))
(expect_arity_exn (floor 0 1))

(expect_argument_exn (floor null.int))
(expect_argument_exn (floor null.decimal))
(expect_argument_exn (floor 1e0))
(expect_argument_exn (floor "1"))


//============================================================================
// int_to_string

(check === null.string (int_to_string null.int))

(check === "0"    (int_to_string 0))
(check === "1234" (int_to_string 1234))
(check === "-99"  (int_to_string -99))

(check ===     "-123456789012345678901234567890"
 (int_to_string -123456789012345678901234567890))

(expect_argument_exn (int_to_string 1.))
(expect_argument_exn (int_to_string "1"))


//============================================================================
// string_to_int

(check === null.int (string_to_int null.string))

(check === 0    (string_to_int "0"))
(check === 1234 (string_to_int "1234"))
(check === -99  (string_to_int "-99"))

(check ===        -123456789012345678901234567890
  (string_to_int "-123456789012345678901234567890"))

(expect_argument_exn (string_to_int ""))
(expect_argument_exn (string_to_int " 0"))
(expect_argument_exn (string_to_int "0 "))
(expect_argument_exn (string_to_int " 0 "))
(expect_argument_exn (string_to_int "0-"))
(expect_argument_exn (string_to_int "0,"))
(expect_argument_exn (string_to_int "+1"))
(expect_argument_exn (string_to_int "--1"))

(expect_argument_exn (string_to_int "1."))
(expect_argument_exn (string_to_int "1.0"))


//============================================================================
// decimal

(check === null.decimal (decimal null.float))
(check === null.decimal (decimal null.int))
(check === null.decimal (decimal null.decimal))
(check === 12.34 (decimal 12.34))
(check === 12.34 (decimal 1234e-2))

(check === null.decimal (decimal null.float 42))
(check === null.decimal (decimal null.int 23))
(check === null.decimal (decimal null.decimal 42))
(check === 12.1 (decimal 1.21e1 0))
(check === 12.34 (decimal 1234 -2))
(check === 42. (decimal 4.2 1))
(check === -12.1 (decimal -1.21e1 0))
(check === -12.34 (decimal -1234 -2))
(check === 0.  (decimal 0.0e0 1))
(check === 0.  (decimal -0.0e0 1))

(expect_argument_exn (decimal 2.05e0 null.int))
(expect_argument_exn (decimal null.blob))
(expect_argument_exn (decimal nan))
(expect_argument_exn (decimal +inf))
(expect_argument_exn (decimal -inf))

//============================================================================
/* This function implements a quick access to java.util.Random java object. A PRNG testing is not required for
fusion adapter model.

An instance of this class is used to generate a stream of pseudorandom numbers. The class uses a 48-bit seed, which
is modified using a linear congruential formula. (See Donald Knuth, The Art of Computer Programming, Volume 2,
Section 3.2.1.)

If two instances of Random are created with the same seed, and the same sequence of method calls is made for each,
they will generate and return identical sequences of numbers. In order to guarantee this property, particular
algorithms are specified for the class Random. Java implementations must use all the algorithms shown here for the
class Random, for the sake of absolute portability of Java code. However, subclasses of class Random are permitted
to use other algorithms, so long as they adhere to the general contracts for all the methods.

The algorithms implemented by class Random use a protected utility method that on each invocation can supply up to
32 pseudorandomly generated bits.

Many applications will find the method Math.random() simpler to use.

Instances of java.util.Random are threadsafe. However, the concurrent use of the same java.util.Random instance across
threads may encounter contention and consequent poor performance. Consider instead using ThreadLocalRandom in
multithreaded designs.

Instances of java.util.Random are not cryptographically secure. Consider instead using SecureRandom to get a
cryptographically secure pseudo-random number generator for use by security-sensitive applications.
*/

(check_true (<= 0 (random 5)))
(check_true (> 5 (random 5)))
(check_true (<= 0.0 (random)))
(check_true (> 1.0 (random)))
