// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/altlambda"
  "/fusion/experimental/check"
  "/fusion/experimental/ref"
  "/testutils")


(check === 4 (@? [4] 0))

(check === 4 (@? [{f:4}] 0 f))

// Mapping
(check === [4]          (@? [{f:4}] * f))
(check === [4,(void),6] (@? [{f:4},{g:5},{f:6}] * f))


(check_void (@? 1999 1))
(check_void (@? 1999 g))

(check_void (@? [{f:4}] 1 g))
(check_void (@? [{f:4}] 0 g))
(check_void (@? [{f:4}] 0 f g))

// TODO (check_void (@? [{f:4}] f))  // Key-type mismatch
// TODO (check_void (@? [{f:4}] 0 1))  // Key-type mismatch

(check === 3 (@? [1,2,3] (I size)))


(define value
  {h:{os:[{oid:1,ss:[{sid:301,is:[{iid:501},
                                  {iid:502}]},
                     {sid:311,is:[{iid:503}]}]},
          {oid:2,ss:[{sid:321,is:[{iid:504}]}]}]}}
)

(check === [[[501, 502], [503]], [[504]]]
  (@? value h os * ss * is * iid))

(check === [[501, 502], [503], [504]]
  (@? value h os + * ss * is * iid))

(check === [501, 502, 503, 504]
  (@? value h os + * ss + * is * iid))

(check === [501, 502, 503, 504]
  (@? value h os ? + * ss + * is * iid))

(check === [501, 502, 503, 504]
  (@? value h os ** ss ** is * iid))

(check === 502
  (@? value h os 0 ss 0 is 1 iid))

(check === [502]
  (@? [value] * h os 0 ss 0 is 1 iid))


(check === [4,5,6]
  (# {k1: [ [{k2: 4},{k2: 5}], [], [{k2: 6}] ] } k1 + + k2))

(check === [501, 502, 503, 504]
  (# value h os + ss + is + iid))

(check === [5]
  (# [(void), [4,5,6]] + (lambda (a) (list_element a 1))))

(check === [5,6]
  (# [4,5,6] + / (|x| (> x 4))))
(check === [5,6]
  (# [4,5,6] + / (|x| (> x 4)) / is_int))
(check === [5]
  (# [4,5,6] + / (|x| (> x 4)) / (|x| (< x 6))))
