// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(require
  "/fusion/experimental/check"
  "/fusion/experimental/string"
  "/fusion/list")



//============================================================================
// string_size_codepoints

(expect_argument_exn (string_size_codepoints (void)))
(expect_argument_exn (string_size_codepoints null))
(expect_argument_exn (string_size_codepoints null.string))
(check === 0 (string_size_codepoints ""))
(check === 1 (string_size_codepoints "1"))
(check === 10 (string_size_codepoints "1234567890"))
(check === 2 (string_size_codepoints "\u0394\u0394"))
(check === 5 (string_size_codepoints "A\u0394B\u0394C"))
(check === 3 (string_size_codepoints "\uD835\uDFCB\u006B\uD835\uDF9E"))


//============================================================================
// string_size_utf8

(check === 0  (string_size_utf8 null.string))
(check === 0  (string_size_utf8 ""))
(check === 1  (string_size_utf8 "a"))
(check === 5  (string_size_utf8 "hello"))
(check === 7  (string_size_utf8 "hello\x80"))
(check === 9  (string_size_utf8 "hello\x80\u07ff"))
(check === 12 (string_size_utf8 "hello\x80\u07ff\uffff"))
(check === 16 (string_size_utf8 "hello\x80\u07ff\uffff\U000ffff1"))

//============================================================================
// string_index_codepoints

(expect_argument_exn (string_index_codepoints (void) "a"))
(expect_argument_exn (string_index_codepoints "a" (void)))
(expect_argument_exn (string_index_codepoints null "a"))
(expect_argument_exn (string_index_codepoints "a" null))
(expect_argument_exn (string_index_codepoints null.string "a"))
(expect_argument_exn (string_index_codepoints "a" null.string))
(expect_argument_exn (string_index_codepoints null.string null.string))

(check === 0 (string_index_codepoints "" ""))
(check_void (string_index_codepoints "" "a"))
(check === 0 (string_index_codepoints "aabaabaa" "a"))
(check === 2 (string_index_codepoints "aabaabaa" "b"))
(check === 1 (string_index_codepoints "aabaabaa" "ab"))
(check === 0 (string_index_codepoints "aabaabaa" ""))
(check === 2 (string_index_codepoints "\uD835\uDFCB\u006B\uD835\uDF9E" "\uD835\uDF9E"))
(check === 1 (string_index_codepoints "\uD835\uDFCB\u006B\uD835\uDF9E" "\u006B"))


//============================================================================
// string_explode, string_implode

(define_check (check_explode str scalars)
  (check === scalars (string_explode str))
  (check === str     (string_implode scalars))
  (check === str     (string_implode (string_explode str)))
  (check === scalars (string_explode (string_implode scalars))))

(check_explode ""                     [])
(check_explode "\0"                   [0])
(check_explode "a B"                  [97, 32, 66])
(check_explode "\u1234"               [0x1234])
(check_explode "\U00100000\U0010FFFF" [0x100000, 0x10FFFF])

// Start with ASCII then switch to supplementary plane.
(check_explode "abc\U00100000"        [97, 98, 99, 0x100000])

(expect_argument_exn (string_explode null.string))
(expect_argument_exn (string_implode null.list))


//============================================================================
// string_split_noregexp

(expect_arity_exn (string_split_noregexp (void)))
(expect_arity_exn (string_split_noregexp null.string))
(expect_arity_exn (string_split_noregexp ""))
(expect_argument_exn (string_split_noregexp (void) " "))
(expect_argument_exn (string_split_noregexp null " "))
(expect_argument_exn (string_split_noregexp null.string " "))
(expect_argument_exn (string_split_noregexp "abc def" null))
(expect_argument_exn (string_split_noregexp "abc def" null.string))

(check === [] (string_split_noregexp "" " "))
(check === ["a", "b", "c", " ", "d", "e", "f"] (string_split_noregexp "abc def" ""))
(check === ["abc", "def"] (string_split_noregexp "abc def" " "))
(check === ["abc", "", "def"] (string_split_noregexp "abc  def" " "))
(check === ["ab", "cd", "ef"] (string_split_noregexp "ab:cd:ef" ":"))
(check === ["abc"] (string_split_noregexp " abc " " "))
(check === ["ab", "cd", "ef"] (string_split_noregexp "abZZZcdZZZef" "ZZZ"))

// Separator shouldn't be treated as a regular expression
(check === ["a+b",    "c"] (string_split_noregexp "a+b.c" "."))
(check === ["a", "b", "c"] (string_split_noregexp "a+b+c" "+"))
(check === ["a", "b", "c"] (string_split_noregexp "a\\b\\c" "\\"))

(check_pred is_immutable_list (string_split_noregexp "" ""))
(check_pred is_immutable_list (string_split_noregexp "a-b" "-"))
(check_pred is_immutable_list (string_split_noregexp "ab" ""))
