// Copyright (c) 2013 Amazon.com, Inc.  All rights reserved.

// Since the design for keywords isn't finalized, check that we can't use
// symbols of the form _keyword_ anywhere.
// We can't use them as bound names, nor as variable references.

(require
  "/check"
  "/fusion/eval"
  "/fusion/experimental/syntax")

// Keywords can't be used as argument names
(check_compile_exn
  (lambda (_key_) 0))
(check_compile_exn
  (lambda (_key_ arg) 0))
(check_compile_exn
  (lambda (arg _key_) 0))
(check_compile_exn
  (lambda (arg _key_ arg2) 0))
(check_compile_exn
  (lambda _key_ 0))

(check_compile_exn
  (let [(_v_ 1)] 0))
(check_compile_exn
  (let [(x 1), (_v_ 1)] 0))
(check_compile_exn
  (let _loop_ [(v 1)] 0))

(check_compile_exn
  (letrec [(_v_ 1)] 0))
(check_compile_exn
  (letrec [(x 1), (_v_ 1)] 0))

(check_compile_exn
  (let_values [((_v_) 1)] 0))
(check_compile_exn
  (let_values [((_v_ w) 1)] 0))


(check_compile_exn
  (define _top_ 1))

// TODO should use check_compile_exn but that gets AssertionError
(check_exn // exn:fail?
  (lambda ()
    (eval (quote
      (module M "/fusion"
        (define _top_ 1))))))


(check_compile_exn
  _key_)
(check_compile_exn
  (begin _key_))
(check_compile_exn
  (lambda () _key_))

(check_compile_exn
  (lambda () ('#%top' _key_)))

// Not sure if this is what we really want long-term, but its current behavior
(check = (quote _k_) (. (quote [_k_]) 0))
(check_true (is_symbol (quote _k_)))
(check = (string_append "a" (quote _k_) "z")
  "a_k_z")

// I'm even less sure about this.
(check = (string_append "a" (syntax_to_datum (quote_syntax _k_)) "z")
  "a_k_z")
