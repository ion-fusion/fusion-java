// Copyright (c) 2012-2014 Amazon.com, Inc.  All rights reserved.

// Tests referential transparency through macro expansion.

// Note that we're using the very limited 'let' language, which doesn't
// export 'lambda'.  Yet we can still use 'let' which expands to use it.


// This module tests that we can use 'let' where 'lambda' is not visible.
(module reftrans1 "/let"
  (define one
    (let ((x 1))
      x))
  (provide one)
)


// This module tests that we can use 'let' where 'lambda' is rebound.
(module reftrans2 "/let"

  (define lambda 99)

  (define two
    (let ((x 2))
      x))

  (provide two)
)


(require
  reftrans1
  reftrans2
  "/fusion/experimental/check"
)

(check === 1 one)
(check === 2 two)

(define lambda null)
(define let null)

(check === 1 one)
(check === 2 two)


(module reftrans3 "/fusion"
  (require "/fusion/experimental/syntax")

  // This tests that we can use 'my3' when it's not exported.
  (define my3 3)

  (define_syntax three
    (lambda (stx) (quasisyntax my3)))

  (provide three)
)

(require reftrans3)
(check === 3 (three))

// TODO test "export" of a lexical binding


"PASSED" // Helpful output if you run this stand-alone
