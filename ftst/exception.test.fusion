// Copyright (c) 2017-2018 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/exception"
  "/fusion/experimental/check")

// Definitions for Tests
(define (catch_all x) true)
(define (catch_none x) false)
(define myExn { field: "field in myExn", exn_type:"myExn" })


// Test raise
(expect_any_exn (raise "foo"))   // Obsolete name for this form.
(expect_any_raise (raise "foo"))

//=============================================================================
// call_with_handler

(check === "body"
  (call_with_handler (|e| (fail)) (|| "body")))

(check === "handler"
  (call_with_handler (|e| "handler") (|| (raise "raised") "body")))

(check === "raised"
  (call_with_handler (|e| e) (|| (raise "raised") "body")))

(check === "raised2"
  (call_with_handler
    (|e| e)
    (|| (call_with_handler
          (|e| (check === "raised1" e) (raise "raised2"))
          (||  (raise "raised1"))))))

// TODO Check arity of both procs before installing the handler.
//   That requires that all procedures can report their arity.
(expect_arity_exn
  (call_with_handler (|e| (raise e)) (|bad args| "body")))
(expect_arity_exn
  (call_with_handler (|e bad| e) (|| (raise "body"))))
(check === "body"
  (call_with_handler (|e bad| e) (|| "body")))

(expect_argument_exn
  (call_with_handler "not a proc" (|| "body")))
(expect_argument_exn
  (call_with_handler (|e| e) "not a proc"))


//=============================================================================
// with_handlers

// Verify with_handlers passes through body expressions that don't throw exceptions
(check ===
  "success"
  (with_handlers
    [(catch_all (|x| "failure")),]
    "success"))

// Verify that exceptions are caught
(check ===
  "handled"
  (with_handlers
    ((catch_all (|x| "handled")))
    (raise "foo")))

// Verify that both sexp and list specified handlers work
(check ===
  "listStyle"
  (with_handlers
    [(catch_all (|x| "listStyle")),]
    (raise "foo")))

// Verify that multiple handlers get processed.
(check ===
  "second"
  (with_handlers
    [(catch_none (|x| "first")),
     (catch_all (|x| "second")),]
    (raise "foo")))

// Verify that with_handlers pred-exprs actually have access to the exception raise'd
(check ===
  "field in myExn"
  (with_handlers
    [((|x|
        (=== "myExn" (. x "exn_type")))
      (|x|
        (. x "field"))),]
    (+ 2 4)
    (- 4 2)
    (raise myExn)))

// Verify that with_handlers processes predicates in order AND short-circuits
(check ===
  "second"
  (with_handlers
    [(catch_none (|x| "first")),
     (catch_all (|x| "second")),
     (catch_all (|x| "third")),]
    (raise "foo")))

// Verify that with_handlers allows 0+ handlers to be specified.
(check ===
  "foo"
  (with_handlers ()
    "foo"))

// Verify that exceptions get passed through if they are not caught.
(expect_any_raise
  (with_handlers
    [(catch_none (|x| 1)),]
    (raise "fail")))

// Verify that exceptions gets passed through.
(expect_any_raise
  (with_handlers
    []
    (raise "fail")))

// Verify that a handler must be specified in the pred-handler tuple.
(expect_syntax_exn
  (with_handlers
    [(catch_all),]
    (raise "foo")))

// Verify that the form requires at least 2 arguments
(expect_syntax_exn
  (with_handlers "foo"))

// Verify that the form requires a sequence as the second argument.
(expect_syntax_exn
  (with_handlers "foo" (raise "foo")))

// Verify that predicates only accept one argument.
(expect_arity_exn
  (with_handlers
    [((|x y| true) (|x| "bar")),]
    (raise "foo")))

// Verify that handlers only accept one argument.
(expect_arity_exn
  (with_handlers
    [((|x| true) (|x y| "bar")),]
    (raise "foo")))

// Verify that handler exceptions are thrown.
(expect_result_exn
  (with_handlers
    [(catch_all (|x| (raise_result_error "bar" "baz" "biz"))),]
    (raise "foo")))

// Verify that nested with_handlers work.
(check ===
  "outer"
  (with_handlers
    [(catch_all (|x| "outer")),]
    (with_handlers
      []
      (raise "foo"))))

// Verify that nested with_handlers passes through on successful handle
(check ===
  "inner"
  (with_handlers
    [(catch_all (|x| "outer")),]
    (with_handlers
      [(catch_all (|x| "inner")),]
      (raise "foo"))))

// Test pass through of exceptions when re-raised within a handler
(expect_contract_exn
  (with_handlers
    [(catch_all (|x| (raise x))),]
    (raise_contract_error "test" "foo")))

// Test predicates for existing Exceptions
(check ===
  "caught argument"
  (with_handlers
    [(is_argument_error (|x| "caught argument"))]
    (raise_argument_error "foo" "bar" 0 "baz")))
(check ===
  "caught arity"
  (with_handlers
    [(is_arity_error (|x| "caught arity"))]
    (raise_arity_error "foo" 0)))
(check ===
  "caught check"
  (with_handlers
    [(is_check_error (|x| "caught check"))]
    (check_true false)))
(check ===
  "caught contract"
  (with_handlers
    [(is_contract_error (|x| "caught contract")),]
    (raise_result_error "foo" "bar" "baz")))
(check ===
  "caught result"
  (with_handlers
    [(is_result_error (|x| "caught result"))]
    (raise_result_error "foo" "bar" "baz")))
(check ===
  "caught syntax"
  (with_handlers
    [(is_syntax_error (|x| "caught syntax"))]
    (unbound_identifier "foo")))

// Verify that an exception from an imported module is catchable
(module raiser "/fusion"
  (require "/fusion/exception")
  (define (nested_raise)
    (raise 10))
  (provide (all_defined_out)))

(module tester "/fusion"
  (require
    "/fusion/exception"
    "/fusion/experimental/check"
    "raiser")
  (define (run_module_test)
    (check ===
      10
      (with_handlers
        [((|x| (=== 10 x)) (|x| x))]
        (nested_raise))))
  (provide (all_defined_out)))

(require "tester")
(run_module_test)


// Verify order of operations
// https://docs.racket-lang.org/reference/exns.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._with-handlers%29%29
//  Evaluates each pred-expr and handler-expr in the order that they are
//  specified, and then evaluates the bodys with a new exception handler during
//  its dynamic extent.

(require (only_in "/fusion/list" add_m stretchy_list))

(lets [(evaluation_order (stretchy_list)),
       (doing (|v| (add_m evaluation_order v)))]
  (check === "raised exn"
    (with_handlers
      [((begin (doing "decl pred1") (|e| (doing "in pred1") false))
        (begin (doing "decl hand1") (|e| (doing "in hand1") false))),
       ((begin (doing "decl pred2") (|e| (doing "in pred2") true))
        (begin (doing "decl hand2") (|e| (doing "in hand2") e)))]
      (doing "body before raise")
      (raise "raised exn")
      (doing "body after raise")))
  (check === ["decl pred1", "decl hand1", "decl pred2", "decl hand2",
              "body before raise",
              "in pred1", "in pred2", "in hand2"]
    evaluation_order))


//=============================================================================

(require (only_in "/fusion/eval" eval))

(check_pred (conjoin is_unbound_error is_syntax_error)
  (with_handlers [(identity identity)]
    (eval (quote 'unbound identifier'))))
