// Copyright (c) 2013 Amazon.com, Inc.  All rights reserved.

(require
  "/check"
  "/fusion/eval")


(define my_top "at-top")
(check = ('#%top' my_top) "at-top")

(let [(my_top "shadow")]
  (check = ('#%top' my_top) "at-top"))


(module T "/fusion"
  (define my_top "in-T")
  (provide my_top))
(require T)
(check = ('#%top' my_top) "at-top")
(let [(my_top "shadow")]
  (check = ('#%top' my_top) "at-top"))

// Hide the binding from T
(define my_top "at-top")


(check_exn // exn:fail?
  (lambda ()
    (eval (quote
      (module M "/fusion"
        (define my_top "in-M")
        (let [(my_top "shadow")]
          ('#%top' my_top)))))))   // ERROR


(module M "/fusion"
  (require "/check" "/fusion/experimental/syntax")
  (define dummy "Force my_top here to have different address from top-level")
  (define my_top "in-M")

  (check = ('#%top' my_top) "in-M")

  (define_syntax define_accessor
    (lambda (stx)
      (quasisyntax
        (define ((unsyntax (syntax_get stx 1)))
          ('#%top' my_top)))))

  (define_syntax define_accessor2
    (lambda (stx)
      (quasisyntax
        (begin
          (define my_top "another one")
          (define ((unsyntax (syntax_get stx 1)))
            ('#%top' my_top))))))

  (define_syntax define_accessor3
    (lambda (stx)
      (quasisyntax
        (begin
          (define my_top "yet another")
          (define_accessor (unsyntax (syntax_get stx 1)))))))
  (provide define_accessor define_accessor2 define_accessor3))

(require M)
(define_accessor a1)
(check = my_top "at-top")
(check = ('#%top' my_top) "at-top")
(check = (a1) "at-top")

(define_accessor2 a2)
(check = my_top "at-top")
(check = ('#%top' my_top) "at-top")
(check = (a1) "at-top")
(check = (a2) "another one")

(define_accessor3 a3)
(check = my_top "at-top")
(check = ('#%top' my_top) "at-top")
(check = (a1) "at-top")
(check = (a2) "another one")
(check = (a3) "at-top")
