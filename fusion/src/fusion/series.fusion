// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(module series "/fusion/private/kernel2"

  '''
Abstract, ordered collections that can be consumed by
[`for` comprehensions](fusion/for.html).

A _series_ is an abstract data type that produces any number of values in
order.  Their primary use is as input to the various
[`for` comprehension forms](fusion/for.html).

A number of built-in types are usable as series:

  * [Sequences](fusion/sequence.html) (sexps and lists) are traversed in
    order, producing a single value at each step.
  * [Structs](fusion/struct.html) are traversed in an undefined order.
    Each step produces two values: the field name as a symbol, and the
    field value.
  * [Iterators](fusion/iterator.html) produce one or more values as per
    [`iterator_next`](fusion/iterator.html#iterator_next).

This module provides constructors that can make new series from other
sources of data.
  '''


  (require
    "/fusion/for"
    "/fusion/private/define"
    "/fusion/private/series"
    "/fusion/unsafe/list"
    "/fusion/void"
  )

  (provide
    empty_series
    in_port
    in_producer
    is_series
    series_to_list
    series_to_sexp
  )


  (define empty_series
    "A [series](fusion/series.html) that produces no elements."
    (make_do_series
      (lambda () (values
                   void
                   void
                   false
                   (lambda (pos) false)
                   false
                   false))))


  (define (series_to_list s)
    '''
Converts the given [series](fusion/series.html) to an immutable
[list](fusion/list.html).

Each element of the series must be a single value, so things like
`(series_to_list {a:1})` will fail.
    '''
    (unsafe_list_to_immutable_list (for_list [(v s)] v)))


  (define (series_to_sexp s)
    '''
Converts the given [series](fusion/series.html) to a [sexp](fusion/sexp.html).

Each element of the series must be a single value, so things like
`(series_to_sexp {a:1})` will fail.
    '''
    (for_sexp [(v s)] v))

)
