// Copyright (c) 2012-2016 Amazon.com, Inc.  All rights reserved.

(module procedure "/fusion/private/builtins"

  // WARNING: Doc syntax isn't supported yet.
  '''
Operators for creating and manipulating procedures.

While Fusion (and Lisps in general) are commonly perceived as functional
languages, they are built around _procedures_ that may or may not operate in
a functional manner. That is, Fusion procedures may or may not cause side
effects, and the language carefully avoids the term "function" except when
describing code known to be free of side effects.

## Multiple Results <a id="results"/>

As expected, procedures accept arguments and return values. But you may not
expect that a procedure can return _multiple_ values. This feature is distinct
from "returning a sequence of values": they are honest-to-goodness individual
return values, not wrapped up in a collection object.

While use of multiple results should be rare, there are use cases where they
are worthwhile. For example, [`struct_zip`](fusion/struct.html#struct_zip) and
[`struct_unzip`](fusion/struct.html#struct_unzip) are mirror procedures for
transforming between a struct and two lists (names and elements). Since the
whole point of `struct_unzip` is to build two lists, the most natural design
is to use multiple results, rather than a pair or list of values which
the caller must then destructure. Similarly, an integer division operator
could return the quotient and the remainder.

This feature is expressed by two forms: [`values`][values] returns zero or
more results, and [`let_values`][let_values] binds them to local names:

    (values 1 true "thing")    =>  1
                                   true
                                   "thing"
    (let_values
      [((a b c)                      // The names to bind
        (values 1 true "thing"))]    // The multiple results
      (list c b a))
                               =>  ["thing", true, 1]

To define a procedure with multiple results, use `values` in tail position:

    (define (struct_unzip s)
      // The real implementation isn't arranged this way,
      // but you get the point.
      (let [(names ...),
            (elements ...)]
        (values names elements)))

Since `struct_unzip` returns two values, it must be called in a context that
expects two values. The values don't get spliced into place as multiple
arguments:

    (struct_zip (struct_unzip {g:1,f:2,h:3}))
    =>
    ERROR: procedure argument expects 1 result but received 2
    Results were:
      [f, g, h]
      [2, 1, 3]

And since the results are not a list or sexp, you can't use `apply` either:

    (apply struct_zip (struct_unzip {g:1,f:2,h:3}))
    =>
    ERROR: procedure argument expects 1 result but received 2
    Results were:
      [f, g, h]
      [2, 1, 3]

The only context that works is a `let_values` clause with the correct number
of bound identifiers:

    (let_values
      [((names elements)
        (struct_unzip {g:1,f:2,h:3}))]
      (struct_zip names elements))        => {f:2,g:1,h:3}


  [values]:     fusion/procedure.html#values
  [let_values]: fusion/procedure.html#let_values
  '''

  (require
    "/fusion/equality"
    "/fusion/exception"
    "/fusion/experimental/defines"
    "/fusion/experimental/syntax"
    "/fusion/private/bind"
    "/fusion/private/compare"
    "/fusion/private/control"
    "/fusion/private/sexp"
    "/fusion/unsafe/list"
    "/fusion/unsafe/sexp")


  (provide apply is_procedure lambda let_values values)


  (defpub_syntax |
    '''
    (| arg ... | body ...+)

A more concise alternative to [`lambda`](fusion/procedure.html#lambda).
The `|` (pipe) identifier is followed by zero or more argument identifiers,
then another pipe, then the body of the procedure.

The translation from `|` to `lambda` is straightforward:

    (| x ... | body ...) -> (lambda (x ...) body ...)
    (| | body ...) -> (lambda () body ...)

Note that `(| | body)` and `(|| body)` generate identical code, but they are
technically not the same syntactic form.  The Ion grammar specifies that `||`
is a single, two-character symbol, so the latter expression uses the form named
[`||`](fusion/procedure.html#||), which creates a no-argument procedure.
    '''
    (lambda (stx)
      (let [(pipe (unsafe_pair_head (syntax_unwrap stx)))]
        (let loop [(args (stretchy_list)),
                   (rest (unsafe_pair_tail (syntax_unwrap stx)))]
          (unless (is_pair rest)
            (wrong_syntax stx "Didn't find closing `|`"))
          (let [(rest_head (unsafe_pair_head rest)),
                (rest_tail (unsafe_pair_tail rest))]
            (unless (is_identifier rest_head)
              (wrong_syntax stx "Expected identifier, found " rest_head))
            (if (free_identifier_equal rest_head pipe)
              (let [(body (unsafe_pair_tail rest))]
                (unless (is_pair body)
                  (wrong_syntax stx "Expected at least one body form after closing `|`"))
                (datum_to_syntax
                  (apply sexp (quote_syntax lambda) (apply sexp args) body)
                  (quote_syntax context)
                  stx))
              (loop
                (unsafe_list_add_m args rest_head)
                rest_tail)))))))


  (defpub identity
    (lambda (v)
      '''
Returns `v`.
      '''
      v))


  (defpub always
    (lambda (v)
      '''
Returns a procedure that accepts (and ignores) any number of arguments and
always returns `v`.
      '''
      (lambda rest v)))



  (defpub_syntax thunk
    '''
    (thunk body ...+)

Returns a zero-argument procedure that evaluates the `body` forms.
Equivalent to `(lambda () body ...)`.
    '''
    (lambda (stx)
      (let [(body (unsafe_pair_tail (syntax_unwrap stx)))]
        (if (== 0 (size body))
          (wrong_syntax stx "Expected at least one body form")
          (datum_to_syntax
            (pair (quote_syntax lambda)
              (pair (quote ())
                body))
            (quote_syntax context)
            stx)))))

// TODO This should use (provide (rename_out (thunk ||)))
// but the documentation is wrong.
  (defpub ||
    '''
    (|| body ...+)

Returns a zero-argument procedure that evaluates the `body` forms.
Equivalent to `(lambda () body ...)`.

See also [`|`](fusion/procedure.html#|).
    ''' thunk)

  (defpub compose
    (lambda (p1 p2)
      '''
Returns a procedure that first applies `p2` to its (single) argument, and then
applies `p1` to the (single) result.
      '''
      (lambda (x)
        (p1 (p2 x)))))

  //==========================================================================

  // Name comes from Dylan.
  (defpub conjoin
   (lambda (p1 p2)
     '''
Returns a single-argument predicate that is the conjunction of the
single-argument predicates `p1` and `p2` as with `and`, applying them left to
right until one returns an untruthy value.

In other words, the result is similar to using `and` to compose calls to the
predicates.
      '''
      (lambda (x)
        (and (p1 x) (p2 x)))))

  //==========================================================================

  // Name comes from Dylan.
  (defpub disjoin
   (lambda (p1 p2)
      '''
Returns a single-argument predicate that is the disjunction of the
single-argument predicates `p1` and `p2` as with `or`, applying them left to
right until one returns a truthy value.

In other words, the result is similar to using `or` to compose calls to the
predicates.
      '''
      (lambda (x)
        (or (p1 x) (p2 x)))))

  //==========================================================================

  // Name comes from Racket; Dylan calls this `complement`.
  (defpub negate
   (lambda (p)
      '''
Returns a single-argument procedure that applies `not` to the result of the
single-argument procedure `p`.
      '''
      (lambda (x)
        (not (p x)))))

  //==========================================================================

  (defpub curry_left
    '''
    (curry_left proc arg ...+)

Returns a prodedure based on `proc` and the given leftmost `arg`s.

    (define prepend56
      (curry_left append_m [5, 6]))
    (prepend56)                           --> [5,6]
    (prepend56 [1])                       --> [5,6,1]

    (define prepend567
      (curry_left append_m [5, 6] [7]))
    (prepend567 [1] [2,3])                --> [5,6,7,1,2,3]
    '''
    (lambda rest
      (let [(size_rest (size rest))]
        (when (< size_rest 2)
          (apply raise_arity_error "curry_left" 2 rest))
        (let [(proc (head rest)),
              (left_args (tail rest))]
          (unless (is_procedure (head rest))
            (apply raise_argument_error "curry_left" "procedure" 0 rest))
          (if (= size_rest 2)
            // Only one argument, so we can optimize the apply call.
            (let [(left_arg (head left_args))]
              (lambda args
                (apply proc left_arg args)))
            (lambda args
              (apply proc (sexp_append left_args args))))))))


  //==========================================================================

  (defpub curry_right
    '''
    (curry_right proc arg ...+)

Returns a prodedure based on `proc` and the given rightmost `arg`s.

    (define append56
      (curry_right append_m [5, 6]))
    (append56)                             --> [5,6]
    (append56 [1])                         --> [1,5,6]

    (define append567
      (curry_right append_m [5, 6] [7]))
    (append567 [1] [2,3])                  --> [1,2,3,5,6,7]
    '''
    (lambda rest
      (let [(size_rest (size rest))]
        (when (< size_rest 2)
          (apply raise_arity_error "curry_right" 2 rest))
        (let [(proc (head rest)),
              (right_args (tail rest))]
          (unless (is_procedure (head rest))
            (apply raise_argument_error "curry_right" "procedure" 0 rest))
          (lambda args
            (apply proc (sexp_append args right_args)))))))

) // end module
