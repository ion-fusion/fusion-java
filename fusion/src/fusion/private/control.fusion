// Copyright (c) 2012-2014 Amazon.com, Inc.  All rights reserved.

(module control "/fusion/private/kernel"

  (require
    "/fusion/experimental/syntax"
    "/fusion/private/compare"
    "/fusion/private/sexp"
    "/fusion/unsafe/sexp"
    "/fusion/void")

  (provide not)


  (provide and)
  (define_syntax and  // WARNING: Doc syntax isn't supported yet.
    '''
    (and expr ...)

Evaluates the `expr`s from left to right, returning the first untruthy value
that results (and ignoring further expressions). If they all return truthy
values, the last one is returned.

The last `expr` is in tail position. Given no `expr`s, the result is true.
    '''
    (let_values [((ctx) (quote_syntax context))]
      (lambda (stx)
        (let_values [((body) (tail (syntax_unwrap stx)))]
          (if (not (is_pair body))

            // (and)  -->  true
            (datum_to_syntax (quote_syntax true) ctx stx)

            (let_values [((first) (unsafe_pair_head body)),
                         ((rest)  (unsafe_pair_tail body))]
              (if (not (is_pair rest))

                // (and FIRST)  -->  FIRST
                first

                // (and FIRST REST...)  -->
                (datum_to_syntax
                  (sexp (quote_syntax let_values)        // (let_values
                    (sexp (sexp (sexp (quote a)) first)) //   (((a) FIRST))
                    (sexp (quote_syntax if) (quote a)    //   (if a
                          (pair (quote_syntax and) rest) //     (and REST...)
                          (quote a)))                    //     a))
                  ctx
                  stx))))))))


  (provide or)
  (define_syntax or  // WARNING: Doc syntax isn't supported yet.
    '''
    (or expr ...)

Evaluates the `expr`s from left to right, returning the first truthy value
that results (and ignoring further expressions). If they all return untruthy
values, the last one is returned.

The last `expr` is in tail position. Given no `expr`s, the result is false.
    '''
    (let_values [((ctx) (quote_syntax context))]
      (lambda (stx)
        (let_values [((body) (tail (syntax_unwrap stx)))]
          (if (not (is_pair body))

            // (or)  -->  false
            (datum_to_syntax (quote_syntax false) ctx stx)

            (let_values [((first) (unsafe_pair_head body)),
                         ((rest)  (unsafe_pair_tail body))]
              (if (not (is_pair rest))

                // (or FIRST)  -->  FIRST
                first

                //                                      (or FIRST REST...)  -->
                (datum_to_syntax
                  (sexp (quote_syntax let_values)         // (let_values
                    (sexp (sexp (sexp (quote a)) first))  //   (((a) FIRST))
                    (sexp (quote_syntax if) (quote a)     //   (if a
                          (quote a)                       //     a
                          (pair (quote_syntax or) rest))) //     (or REST...)))
                  ctx
                  stx))))))))


  (provide when)
  (define_syntax when  // WARNING: Doc syntax isn't supported yet.
    '''
    (when test body ...)

Evaluates the `test`, and if it is truthy, evaluates the `body` forms left
to right. The last `body` is in tail position, and its result is the result of
the entire form.  If the body isn't evaluated, the result is void.

A companion form is `unless`.
    '''
    (let_values [((ctx) (quote_syntax context))]
      (lambda (stx)
        (let_values [((body) (tail (syntax_unwrap stx)))]
          (if (not (is_pair body))
            (wrong_syntax stx "expected condition")
            (let_values [((test) (unsafe_pair_head body)),
                         ((body) (unsafe_pair_tail body))]

              //                                       (when TEST BODY...)  -->
              (datum_to_syntax
                (sexp (quote_syntax if) test          // (if TEST
                  (pair (quote_syntax begin) body)    //   (begin BODY...)
                  (sexp (quote_syntax void)))         //   (void))
                ctx
                stx)))))))


  (provide unless)
  (define_syntax unless  // WARNING: Doc syntax isn't supported yet.
    '''
    (unless test body ...)

Evaluates the `test`, and if it is _not_ truthy, evaluates the `body` forms
left to right. The last `body` is in tail position, and its result is the
result of the entire form.  If the body isn't evaluated, the result is void.

A companion form is `when`.
    '''
    (let_values [((ctx) (quote_syntax context))]
      (lambda (stx)
        (let_values [((body) (tail (syntax_unwrap stx)))]
          (if (not (is_pair body))
            (wrong_syntax stx "expected condition")
            (let_values [((test) (unsafe_pair_head body)),
                         ((body) (unsafe_pair_tail body))]

              //                                     (unless TEST BODY...)  -->
              (datum_to_syntax
                (sexp (quote_syntax if) test          // (if TEST
                  (sexp (quote_syntax void))          //   (void)
                  (pair (quote_syntax begin) body))   //   (begin BODY...))
                ctx
                stx)))))))


// TODO FUSION-36  Support internal definitions in body sequences.
// Shouldn't use begin since that doesn't delimit the new scope that's needed.

  (provide cond)
  (define_syntax cond  // WARNING: Doc syntax isn't supported yet.
    '''
    (cond (test body ...) ...)

Evaluates the `test` expressions left to right until one returns a truthy value,
then evaluates the corresponding `body` expressions in tail position.
If no `test` is truthy, the result is void.
    '''
    (let_values [((ctx) (quote_syntax context))]
      (lambda (stx)
        (let_values [((clauses) (tail (syntax_unwrap stx)))]
          (if (not (is_pair clauses))

            // (cond)  -->  (void)
            (datum_to_syntax (sexp (quote_syntax void)) ctx stx)

            (let_values [((clause) (syntax_unwrap (unsafe_pair_head clauses))),
                         ((tail  ) (unsafe_pair_tail clauses))]
              (if (not (is_pair clause))
                (wrong_syntax stx "cond: bad clause " clause)
                (let_values [((test) (unsafe_pair_head clause)),
                             ((body) (unsafe_pair_tail clause))]

                  //                         (cond (TEST BODY...) TAIL...)  -->
                  (datum_to_syntax
                    (sexp (quote_syntax if) test        // (if TEST
                      (pair (quote_syntax begin) body)  //   (begin BODY...)
                      (pair (quote_syntax cond)  tail)) //   (cond TAIL...))
                    ctx
                    stx)))))))))

)
