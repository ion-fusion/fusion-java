// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(module kernel2 "/fusion/private/kernel"

  // Pass-through most bindings from kernel
  // TODO FUSION-76 (provide (all_from_out "/fusion/private/kernel"))
  (provide
    all_defined_out
    begin
    current_directory
    current_ion_reader
    current_namespace
    current_output_port
    define_syntax
    define_values
    eof
    java_new
    lambda
    load
    module
    only_in
    prefix_in
    provide
    rename_in
    rename_out
    require)

  (provide (all_defined_out))


  (define_values (annotate)
    '''
    (annotate value text ...)

Applies the given annotations to a `value`, returning a (shallow) copy if
necessary to avoid mutating it.  Any annotations on `value` are removed,
so `(annotate value)` effectively de-annotates a value.

The `value` must be annotatable; that is, it must be one of the Ion types.
The `text` arguments must be non-null strings or symbols.

    (annotate 123 "a")              =>  a::123
    (let [(v (quote a::123))]
      (annotate v))                 =>  123
    (let [(anns ["a", (quote b)])]
      (apply annotate 123 anns))    =>  a::b::123

To extract annotations from a value, use
[`annotations`](fusion.html#annotations).
    '''
    (java_new "com.amazon.fusion.AnnotateProc"))


  (define_values (annotations)
    '''
    (annotations value)

Returns a non-null immutable list of symbols containing the user type
annotations on the `value`.

    (annotations 123)                =>  []
    (annotations (quote a::b::123))  =>  [a, b]

To put annotations onto a value, use [`annotate`](fusion.html#annotate).
    '''
    (java_new "com.amazon.fusion.TypeAnnotationsProc"))


  (define_values (apply)
    '''
    (apply proc arg ... sequence)

Calls the given `proc` with arguments that are the (optional) `arg`s prepended
to the elements of `sequence`.  The `proc` is called in tail position.

    (apply + [1, 2])             =>  3
    (apply + 10 11 (sexp 1 2))   =>  24
    '''
    (java_new "com.amazon.fusion.ApplyProc"))


  (define_values (exit)
    '''
    (exit)
Exits the running Fusion program.
    '''
    (java_new "com.amazon.fusion.ExitProc"))


  (define_syntax if
    '''
    (if test then else)

Evaluates the `test` expression first.  If the result is truthy, evaluates the
`then` expression and returns its value.  Otherwise, evaluates the `else`
expression and returns its value.

All values are \"truthy\" except for `false`, void, and any variant of `null`.

Note that only one of `then` or `else` expressions is evaluated, and both are
in tail position.

For cases that need only one outcome, use [`when`](fusion/bool.html#when) or
[`unless`](fusion/bool.html#unless).
    '''
    (java_new "com.amazon.fusion.IfForm"))


  (define_values (is_blob)
    '''
    (is_blob value)

Determines whether a `value` is of type `blob`, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionBlob$IsBlobProc"))


  (define_values (is_bool)
    '''
    (is_bool value)

Determines whether a `value` is of type `bool`, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionBool$IsBoolProc"))


  (define_values (is_clob)
    '''
    (is_clob value)

Determines whether a `value` is of type `clob`, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionClob$IsClobProc"))


  (define_values (is_immutable_list)
    '''
    (is_immutable_list value)

Determines whether `value` is an immutable list, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionList$IsImmutableListProc"))


  (define_values (is_list)
    '''
    (is_list value)

Determines whether `value` is a list, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionList$IsListProc"))


  (define_values (is_mutable_list)
    '''
    (is_mutable_list value)

Determines whether `value` is a mutable list, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionList$IsMutableListProc"))


  (define_values (is_null)
     '''
     (is_null value)

Returns `true` when `value` is _any_ Ion null, `false` otherwise.
     '''
     (java_new "com.amazon.fusion.IsNullProc"))


  (define_values (is_null_null)
    '''
    (is_null_null value)

Determines whether a `value` is `null.null`, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionNull$IsNullNullProc"))


  (define_values (is_pair)
    '''
    (is_pair value)

Determines whether `value` is a pair, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionSexp$IsPairProc"))


  (define_values (is_procedure)
    '''
    (is_procedure value)

Returns `true` when `value` is a procedure, `false` otherwise.
    '''
    (java_new "com.amazon.fusion.FusionProcedure$IsProcedureProc"))


  (define_values (is_sexp)
    '''
    (is_sexp value)

Determines whether a `value` is a sexp, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionSexp$IsSexpProc"))


  (define_values (is_stretchy_list)
    '''
    (is_stretchy_list value)

Determines whether `value` is a stretchy list, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionList$IsStretchyListProc"))


  (define_values (is_string)
    '''
    (is_string value)

Determines whether a `value` is of type `string`, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionString$IsStringProc"))


  (define_values (is_struct)
    '''
    (is_struct value)

Determines whether `value` is a struct, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionStruct$IsStructProc"))


  (define_values (is_symbol)
    '''
    (is_symbol value)

Determines whether a `value` is of type `symbol`, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionSymbol$IsSymbolProc"))


  (define_values (let_values)
    '''
    (let_values (((ident ...) expr) ...) body ...+)

Captures [multiple results](fusion/procedure.html#results), creating local
bindings for the `ident`s, with the `body` in scope.  The `expr`s are evaluated
left-to-right, and must return as many values as there are corresponding
`ident`s, which are then bound to those results.  After the bindings are
installed the `body` is evaluated.  `body` may be one or more forms; the last
form is in tail position and its result is the result of the entire expression.
    '''
    (java_new "com.amazon.fusion.LetValuesForm"))


  (define_values (letrec)
    '''
    (letrec ((ident expr) ...) body ...+)

Creates new binding locations for each `ident`, binds them to their `expr`s,
then evaluates `body`. The `expr`s are evaluated left-to-right, and the
`ident`s are bound in all `expr`s and `body`s. `body` may be one or more forms;
the result of the last form is the result of the entire expression.
    '''
    (java_new "com.amazon.fusion.LetrecForm"))


  (define_values (list)
    '''
    (list value ...)

Makes a fresh, immutable list containing the given `value`s.
    '''
    (java_new "com.amazon.fusion.FusionList$ImmutableListProc"))


  (define_values (mutable_list)
    '''
    (mutable_list value ...)

Makes a fresh, mutable list containing the given `value`s.
    '''
    (java_new "com.amazon.fusion.FusionList$MutableListProc"))


  (define_values (not)
    '''
    (not value)

Returns `true` if `value` is untruthy, `false` if `value` is truthy. Truthiness
is as defined by [`if`](fusion/bool.html#if).
    '''
    (java_new "com.amazon.fusion.NotProc"))


  (define_values (pair)
    '''
    (pair head tail)

Makes a fresh, immutable pair containing the given `head` and `tail`.
    '''
    (java_new "com.amazon.fusion.FusionSexp$PairProc"))


  (define_values (quote)
    '''
    (quote datum)

Returns the Ion `datum` as-is, without evaluation.
    '''
    (java_new "com.amazon.fusion.QuoteForm"))


  (define_values (quote_syntax)
    '''
    (quote_syntax datum)

Returns a syntax object retaining the lexical information of `datum`.
    '''
    (java_new "com.amazon.fusion.QuoteSyntaxForm"))


  (define_syntax set
    '''
    (set var value)

Mutates the given `var`iable, assigning it the `value`.
    '''
    (java_new "com.amazon.fusion.SetForm"))


  (define_values (sexp)
    '''
    (sexp value ...)

Makes a fresh, immutable sexp containing the given `value`s.
    '''
    (java_new "com.amazon.fusion.FusionSexp$SexpProc"))


  (define_values (size)
    '''
    (size collection)

Returns the number of elements in the `collection`.
The size of `null.list` (_etc._) is zero.  If `collection` is an improper sexp,
an exception is thrown.

**Warning:** Computing the size of an sexp takes linear time, since it must
traverse the linked list of pairs to count elements.
    '''
    (java_new "com.amazon.fusion.FusionCollection$SizeProc"))


  (define_values (stretchy_list)
    '''
    (stretchy_list value ...)

Makes a fresh, stretchy list containing the given `value`s.
    '''
    (java_new "com.amazon.fusion.FusionList$StretchyListProc"))


  (define_values (type_annotations)
    '''
    (type_annotations value)

*DEPRECATED* as of Fusion R20; renamed to
[`annotations`](fusion.html#annotations).
    '''
    (java_new "com.amazon.fusion.TypeAnnotationsProc"))


  (define_values (values)
    '''
    (values value ...)

Produces [multiple results](fusion/procedure.html#results), returning the zero
or more `value`s. Usually used in conjuction with `let_values` to bind the
results to names.
    '''
    (java_new "com.amazon.fusion.ValuesProc"))


  (define_syntax '#%top'
    '''
    ('#%top' id)

References a top-level definition for symbol `id`, skipping over any
surrounding local bindings.  Within a module, `id` must be defined within the
module and not locally.

As suggested by the awkward name, this form is rarely needed by application
code and is primarily an artifact of the macro-expansion process.
    '''
    (java_new "com.amazon.fusion.TopForm"))
)
