// Copyright (c) 2012-2023 Amazon.com, Inc.  All rights reserved.

(module builtins '/fusion/private/kernel2'

  (require
    "/fusion/private/metasyntax"
  )


  // Pass-through bindings from kernel
  (provide all_defined_out begin define_values lambda load module
    only_in prefix_in provide rename_in rename_out require)

  // Pass-through bindings from kernel2
  (provide
    '#%top'
    apply
    exit
    if
    is_blob
    is_bool
    is_clob
    is_immutable_list
    is_list
    is_mutable_list
    is_null
    is_null_null
    is_procedure
    is_sexp
    is_stretchy_list
    is_string
    is_struct
    is_symbol
    let_values
    letrec
    list
    mutable_list
    not
    quote
    set
    size
    stretchy_list
    values)

  (provide
    quasiquote
    unquote
  )

  (require "/fusion/private/define")
  (provide define)

  (define_syntax unquote
    '''
    (unquote expr)

Used as an escape within a `quasiquote` form; not valid in any other context.
    '''
    (lambda (stx)
      (wrong_syntax stx "must be used inside quasiquote.  Sorry, but it "
        "currently doesn't work inside a struct; see FUSION-34.")))

  (define_syntax quasiquote
    '''
    (quasiquote template)

Like `quote`, but the `template` datum may contain nested `unquote`
forms that act as escapes.  The `unquote`d expression is evaluated when the
containing `quasiquote` is evaluated, and its result is inserted into the
containing quoted datum.

    (quasiquote [(+ 1 2), (unquote (+ 1 2))])

    ==> [(+ 1 2), 3]

`unquote` forms only escape one "level" of quasiquotation:

    (let [(v 1)]
      (quasiquote (a (quasiquote (b (unquote v) (unquote (unquote v)))))))

    ==> (a (quasiquote (b (unquote v) (unquote 1))))
    '''
    (java_new "com.amazon.fusion.QuasiQuoteForm"
              (quote_syntax quasiquote)
              (quote_syntax unquote)))
)
