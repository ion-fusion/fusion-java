// Copyright (c) 2012-2016 Amazon.com, Inc.  All rights reserved.

(module builtins '/fusion/private/kernel'

  (require
    "/fusion/experimental/defines"
    "/fusion/private/kernel2"
    "/fusion/private/metasyntax"
  )


  // Pass-through bindings from kernel
  (provide all_defined_out begin define lambda load module
    only_in prefix_in provide rename_in rename_out require)

  // Pass-through bindings from kernel2
  (provide if is_list is_null is_sexp is_string is_struct
    let_values letrec not quote)

  (define_syntax unquote
    '''
    (unquote expr)

Used as an escape within a `quasiquote` form; not valid in any other context.
    '''
    (lambda (stx)
      (wrong_syntax stx "must be used inside quasiquote.  Sorry, but it "
        "currently doesn't work inside a struct; see FUSION-34.")))

  (define_syntax quasiquote
    '''
    (quasiquote template)

Like `quote`, but the `template` datum may contain nested `unquote`
forms that act as escapes.  The `unquote`d expression is evaluated when the
containing `quasiquote` is evaluated, and its result is inserted into the
containing quoted datum.

    (quasiquote [(+ 1 2), (unquote (+ 1 2))])

    ==> [(+ 1 2), 3]

`unquote` forms only escape one "level" of quasiquotation:

    (let [(v 1)]
      (quasiquote (a (quasiquote (b (unquote v) (unquote (unquote v)))))))

    ==> (a (quasiquote (b (unquote v) (unquote 1))))
    '''
    (java_new "com.amazon.fusion.QuasiQuoteForm"
              (quote_syntax quasiquote)
              (quote_syntax unquote)))

  (provide quasiquote unquote)


  (provide set)
  (define_syntax set
    '''
    (set var value)

Mutates the given `var`iable, assigning it the `value`.
    '''
    (java_new "com.amazon.fusion.SetForm"))

  (provide '#%top')
  (define_syntax '#%top'
    '''
    ('#%top' id)

References a top-level definition for symbol `id`, skipping over any
surrounding local bindings.  Within a module, `id` must be defined within the
module and not locally.

As suggested by the awkward name, this form is rarely needed by application
code and is primarily an artifact of the macro-expansion process.
    '''
    (java_new "com.amazon.fusion.TopForm"))


  (defpub_j apply
    '''
    (apply proc arg ... sequence)

Calls the given `proc` with arguments that are the (optional) `arg`s prepended
to the elements of `sequence`.  The `proc` is called in tail position.

    (apply + [1, 2])             =>  3
    (apply + 10 11 (sexp 1 2))   =>  24
    '''
    "com.amazon.fusion.ApplyProc")

  (defpub_j values
    '''
    (values value ...)

Produces [multiple results](fusion/procedure.html#results), returning the zero
or more `value`s. Usually used in conjuction with `let_values` to bind the
results to names.
    '''
    "com.amazon.fusion.ValuesProc")

  (defpub_j exit
    '''
    (exit)
Exits the running Fusion program.
    '''
    "com.amazon.fusion.ExitProc")


  //===========================================================================
  // Basic predicates

  (defpub_j is_blob
    '''
    (is_blob value)

Determines whether a `value` is of type `blob`, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionBlob$IsBlobProc")

  (defpub_j is_bool
    '''
    (is_bool value)

Determines whether a `value` is of type `bool`, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionBool$IsBoolProc")

  (defpub_j is_clob
    '''
    (is_clob value)

Determines whether a `value` is of type `clob`, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionClob$IsClobProc")

  (defpub_j is_null_null
    '''
    (is_null_null value)

Determines whether a `value` is `null.null`, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionNull$IsNullNullProc")

  (defpub_j is_symbol
    '''
    (is_symbol value)

Determines whether a `value` is of type `symbol`, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionSymbol$IsSymbolProc")

  (defpub is_procedure
    '''
    (is_procedure value)

Returns `true` when `value` is a procedure, `false` otherwise.
    '''
    (java_new "com.amazon.fusion.FusionProcedure$IsProcedureProc"))


  //===========================================================================
  // Collection primitives

  (defpub_j size
    '''
    (size collection)

Returns the number of elements in the `collection`.
The size of `null.list` (_etc._) is zero.  If `collection` is an improper sexp,
an exception is thrown.
    '''
    "com.amazon.fusion.FusionCollection$SizeProc")

  (defpub_j is_immutable_list
    '''
    (is_immutable_list value)

Determines whether `value` is an immutable list, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionList$IsImmutableListProc")

  (defpub_j is_mutable_list
    '''
    (is_mutable_list value)

Determines whether `value` is a mutable list, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionList$IsMutableListProc")

  (defpub_j is_stretchy_list
    '''
    (is_stretchy_list value)

Determines whether `value` is a stretchy list, returning `true` or `false`.
    '''
    "com.amazon.fusion.FusionList$IsStretchyListProc")

  (defpub_j list
    '''
    (list value ...)

Makes a fresh, immutable list containing the given `value`s.
    '''
    "com.amazon.fusion.FusionList$ImmutableListProc")

  (defpub_j mutable_list
    '''
    (mutable_list value ...)

Makes a fresh, mutable list containing the given `value`s.
    '''
    "com.amazon.fusion.FusionList$MutableListProc")

  (defpub_j stretchy_list
    '''
    (stretchy_list value ...)

Makes a fresh, stretchy list containing the given `value`s.
    '''
    "com.amazon.fusion.FusionList$StretchyListProc")
)
