// Copyright (c) 2013-2014 Amazon.com, Inc.  All rights reserved.

(module bind "/fusion/private/builtins"


  (require
    "/fusion/sequence"
    "/fusion/experimental/defines"
    "/fusion/experimental/syntax"
    "/fusion/number"
    "/fusion/private/compare"
    "/fusion/private/sexp"
    "/fusion/unsafe/sexp")

  (provide let let_values letrec values)


  (define ctx  // PRIVATE!
    "Lexical context for expanded macros."
    (quote_syntax context))


  (defpub_syntax lets
    '''
    (lets [(ident expr), ...] body ...+)

Like `let`, but each binding is created (and its `expr` evaluated) one by one,
and the `ident`s are bound in the following `expr`s as well as the `body`.

    (lets [(a 1),
           (b (+ a 1))]
      [a, b])            => [1, 2]
    '''
    (lambda (stx)
      (if (< (syntax_size stx) 3)
        (wrong_syntax stx "expecting bindings and body")
        (let_values [((content) (unsafe_pair_tail (syntax_unwrap stx)))]
          (let_values [((bindings) (syntax_unwrap (unsafe_pair_head content))),
                       ((body)     (unsafe_pair_tail content))]
            // TODO FUSION-120 check type of bindings, bound identifier
            (if (= 0 (size bindings))

              //                                       (lets [] BODY...)  -->
              (datum_to_syntax
                (pair (quote_syntax begin) body)    // (begin BODY...)
                ctx
                stx)
              (let_values [((binding) (element bindings 0)),
                           ((others)  (subseq bindings 1 (size bindings)))]

                //                     (lets [BINDING, OTHERS...] BODY...)  -->
                (datum_to_syntax
                  (sexp (quote_syntax let)       // (let
                    (sexp binding)               //    (BINDING)
                    (pair (quote_syntax lets)    //    (lets
                      (pair others               //      OTHERS
                            body)))              //      BODY...))
                  ctx
                  stx))))))))
)
