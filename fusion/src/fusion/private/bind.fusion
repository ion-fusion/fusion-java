// Copyright (c) 2013-2019 Amazon.com, Inc.  All rights reserved.

(module bind "/fusion/private/builtins"


  (require
    "/fusion/experimental/syntax"
    "/fusion/private/compare"
    "/fusion/private/sexp"
    "/fusion/unsafe/list"
    "/fusion/unsafe/sexp"
    )


  // From builtins
  (provide let_values letrec values)

  (provide
    binding_ids
    check_multi_id
    check_single_id
    check_single_or_multi_id
    let
    lets
    split_binding
    split_letlike_subforms
    unzip_bindings
  )


  (define ctx  // PRIVATE!
    "Lexical context for expanded macros."
    (quote_syntax context))


  (define (is_seq v)
    (if (is_sexp v) true (is_list v)))

  (define (let_loop_name stx)
    (let_values [((first) (syntax_get stx 1))]
      (if (is_symbol (syntax_unwrap first))
        first
        false)))


  (define (check_single_id stx ids)
    (if (is_identifier ids)
      true
      (wrong_syntax stx "bound name isn't an identifier: " ids)))

  (define (check_multi_id stx ids_stx)
    (let_values [((ids) (syntax_unwrap ids_stx))]
      (if (is_pair ids)
        (check_sexp_of_ids stx ids)
        (wrong_syntax stx "expected sexp of bound identifiers: " ids_stx))))

  (define (check_single_or_multi_id stx ids)
    (if (is_identifier ids)
      true
      (check_multi_id stx ids)))

  (define (check_sexp_of_ids stx ids)
    (if (is_pair ids)
      (begin (check_single_id   stx (unsafe_pair_head ids))
             (check_sexp_of_ids stx (unsafe_pair_tail ids)))
      true))


  (define (split_binding stx binding check_ids)
    '''
Checks the syntax of a binding initializer form `(ids expr)`; returns
`(values ids expr)` if the form is valid.

`(check_ids stx ids)` must raise syntax_error if the `ids` are malformed.
    '''
    (if (not (if (is_seq (syntax_unwrap binding))
               (= 2 (syntax_size binding))
               false))
      (wrong_syntax stx "bad binding form: " binding)
      (let_values [((name) (syntax_get binding 0)),
                   ((expr) (syntax_get binding 1))]
        (check_ids stx name)
        (values name expr))))

  (define (binding_ids stx binding check_ids)
    (let_values [((ids expr) (split_binding stx binding check_ids))]
      ids))

  (define (bindings_as_sexp stx bindings)
    (if (is_null bindings)
      (wrong_syntax stx "bad sequence of bindings: " bindings)
      (if (is_sexp bindings)
        bindings
        (if (is_list bindings)
          (apply sexp bindings)
          (wrong_syntax stx "bad sequence of bindings: " bindings)))))

  (define (split_letlike_subforms stx subforms)

    '''
Splits the bindings and body forms of a `let`-style form, normalizing the
bindings to a sexp. In other words it accepts either of:

    ( ( binding  ... ) body ... )   // Bindings in a sexp
    ( [ binding, ... ] body ... )   // Bindings in a list

and returns

    (values sexp-of-bindings sexp-of-body)
    '''

    (let_values [((bindings) (syntax_unwrap (unsafe_pair_head subforms))),
                 ((body)     (unsafe_pair_tail subforms))]
      (values (bindings_as_sexp stx bindings) body)))

  (define (unzip_bindings stx bindings check_ids)
    '''
Deconstructs the binding subforms of a `let`-style form, transforming a
`bindings` sexp of the form:

    ((ids expr) ...)

and returning:

    (values (ids ...) (expr ...))

`(check_ids stx ids)` must raise syntax_error if the `ids` are malformed.
    '''
    (if (not (is_pair bindings))
      (values (quote ()) (quote ()))
      (let_values [((id expr)
                    (split_binding stx (unsafe_pair_head bindings) check_ids)),
                   ((tail_ids tail_exprs)
                    (unzip_bindings stx (unsafe_pair_tail bindings) check_ids))]
        (values (pair id   tail_ids)
                (pair expr tail_exprs)))))


  //==========================================================================

  (define_syntax let
    '''
    (let ((ident expr) ...) body ...+)

Evaluates the `expr`s left to right, then binds each `ident` to its
corresponding result, then evaluates `body`.  The scope of the `ident`s only
covers the `body`, not the `expr`s.

`body` may be one or more forms; the last form is in tail position and its
result is the result of the entire expression.

    (let loop_id [(ident expr), ...] body ...+)

This variant also creates a procedure, bound to the given name `loop_id`, that
accepts the same number of arguments as there are `ident`s. When invoked, the
procedure binds the `ident`s to the arguments and evaluates the body.

For example, this snippet loops through the standard input stream and writes
the `title` field of each item:

    (let loop [(item (read))]
      (unless (is_eof item)
        (let [(title (. item \"title\"))]
          (writeln title)
          (loop (read)))))
    '''
    (lambda (stx)
      (if (< (syntax_size stx) 3)
        (wrong_syntax stx "expected bindings and body")
        (let_values [((loop) (let_loop_name stx)),
                     ((subforms) (unsafe_pair_tail (syntax_unwrap stx)))]
          (let_values [((bindings body)
                        (split_letlike_subforms stx (if loop
                                                      (unsafe_pair_tail subforms)
                                                      subforms)))]
            (let_values [((ids exprs)
                          (unzip_bindings stx bindings check_single_id))]
              (let_values [((lambda_stx)
                            (pair (quote_syntax lambda)
                                  (pair ids body)))]
                (syntax_property
                  (datum_to_syntax
                    (if loop
                      (pair (sexp (quote_syntax letrec)
                                  (sexp (sexp loop lambda_stx))
                                  loop)
                            exprs)
                      (pair lambda_stx exprs))
                    ctx
                    stx)
                  (quote '#%plain_app retain arg locations') true))))))))

  (define_syntax lets
    '''
    (lets [(ident expr), ...] body ...+)

Like `let`, but each binding is created (and its `expr` evaluated) one by one,
and the `ident`s are bound in the following `expr`s as well as the `body`.

    (lets [(a 1),
           (b (+ a 1))]
      [a, b])            => [1, 2]
    '''
    (lambda (stx)
      (if (< (syntax_size stx) 3)
        (wrong_syntax stx "expecting bindings and body")
        (let_values [((subforms) (unsafe_pair_tail (syntax_unwrap stx)))]
          (let_values [((bindings body) (split_letlike_subforms stx subforms))]
            (datum_to_syntax
              (if (is_pair bindings)

                //                     (lets [BINDING, OTHERS...] BODY...)  -->
                (let_values [((binding) (unsafe_pair_head bindings)),
                             ((others)  (unsafe_pair_tail bindings))]
                  (sexp (quote_syntax let)           // (let
                    (sexp binding)                   //    (BINDING)
                    (pair (quote_syntax lets)        //    (lets
                      (pair others                   //      OTHERS
                            body))))                 //      BODY...))

                //                                      (lets [] BODY...)  -->
                (pair (quote_syntax begin) body))    // (begin BODY...)
              ctx
              stx))))))
)
