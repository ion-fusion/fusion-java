// Copyright (c) 2012-2014 Amazon.com, Inc.  All rights reserved.

(module sexp '/fusion/private/builtins'

  (require
    "/fusion/exception"
    "/fusion/experimental/defines"
    "/fusion/unsafe/sexp"
    "/fusion/void")

  // Pass-through bindings from /fusion/private/kernel
  (provide is_sexp)


  // TODO FUSION-102 mutable_sexp

  (defpub_j sexp    "com.amazon.fusion.FusionSexp$SexpProc")
  (defpub_j pair    "com.amazon.fusion.FusionSexp$PairProc")
  (defpub_j is_pair "com.amazon.fusion.FusionSexp$IsPairProc")


  (defpub head
    (lambda (sexp)
      '''
Returns the first element of `sexp`.  If `sexp` is a pair, the result is its
head slot.  If `sexp` isn't a pair (that is, it's zero-length or `null.sexp`),
the result is void.
      '''
      (if (is_pair sexp)
        (unsafe_pair_head sexp)
        (if (is_sexp sexp)
          (void)
          (raise_argument_error "head" "sexp" 0 sexp)))))


  (defpub tail
    (lambda (sexp)
      '''
Returns the elements _after_ the first element of `sexp`.  If `sexp` is a
pair, the result is its tail slot.  If `sexp` isn't a pair (that is, it's
zero-length or `null.sexp`), the result is void.
      '''
      (if (is_pair sexp)
        (unsafe_pair_tail sexp)
        (if (is_sexp sexp)
          (void)
          (raise_argument_error "tail" "sexp" 0 sexp)))))


  (defpub sexp_append
    (lambda (front back)
      '''
Appends two sexps, reusing the second.

This is a temporary, limited implementation for internal use.
      '''
      (let loop [(s1 front), (s2 back)]
        (if (is_pair s1)
          (pair (head s1) (sexp_append (tail s1) s2))
          (if (is_sexp s1)
            // s1 must be () or null.sexp
            (if (is_sexp s2)
              (if (is_null s2) (quote ()) s2)
              (raise_argument_error "sexp_append" "sexp" 1 front back))
            (raise_argument_error "sexp_append" "sexp" 0 front back))))))
)
