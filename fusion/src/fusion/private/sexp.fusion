// Copyright (c) 2012-2018 Amazon.com, Inc.  All rights reserved.

(module sexp '/fusion/private/kernel'

  (require
    "/fusion/private/kernel2"
    "/fusion/private/raise"
    "/fusion/unsafe/sexp"
    "/fusion/void")

  // Pass-through bindings from /fusion/private/kernel2
  (provide is_sexp)


  (provide sexp)
  (define sexp
    '''
    (sexp value ...)

Makes a fresh, immutable sexp containing the given `value`s.
    '''
    (java_new "com.amazon.fusion.FusionSexp$SexpProc"))

  (provide pair)
  (define pair
    '''
    (pair head tail)

Makes a fresh, immutable pair containing the given `head` and `tail`.
    '''
    (java_new "com.amazon.fusion.FusionSexp$PairProc"))

  (provide is_pair)
  (define is_pair
    '''
    (is_pair value)

Determines whether `value` is a pair, returning `true` or `false`.
    '''
    (java_new "com.amazon.fusion.FusionSexp$IsPairProc"))


  (provide head)
  (define (head sexp)
    '''
Returns the first element of `sexp`.  If `sexp` is a pair, the result is its
head slot.  If `sexp` isn't a pair (that is, it's zero-length or `null.sexp`),
the result is void.
    '''
    (if (is_pair sexp)
      (unsafe_pair_head sexp)
      (if (is_sexp sexp)
        (void)
        (raise_argument_error "head" "sexp" 0 sexp))))


  (provide tail)
  (define (tail sexp)
    '''
Returns the elements _after_ the first element of `sexp`.  If `sexp` is a
pair, the result is its tail slot.  If `sexp` isn't a pair (that is, it's
zero-length or `null.sexp`), the result is void.
    '''
    (if (is_pair sexp)
      (unsafe_pair_tail sexp)
      (if (is_sexp sexp)
        (void)
        (raise_argument_error "tail" "sexp" 0 sexp))))


  (provide sexp_append)
  (define (sexp_append front back)
    '''
Appends two sexps, reusing the second.

This is a temporary, limited implementation for internal use.
    '''
    (letrec
      [(loop
        (lambda (s1 s2)
          (if (is_pair s1)
            (pair (unsafe_pair_head s1)
                  (loop (unsafe_pair_tail s1) s2))
            (if (is_sexp s1)
              // s1 must be () or null.sexp
              (if (is_sexp s2)
                (if (is_null s2) (quote ()) s2)
                (raise_argument_error "sexp_append" "sexp" 1 front back))
              (raise_argument_error "sexp_append" "sexp" 0 front back)))))]
      (loop front back)))

)
