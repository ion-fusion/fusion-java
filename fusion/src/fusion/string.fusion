// Copyright (c) 2012-2016 Amazon.com, Inc.  All rights reserved.

(module string '/fusion/private/builtins'

  '''
Operations for strings.

Mirroring Ion, a Fusion string is a _[Unicode coded character sequence][CCS]_.

At this time, the core libraries do not treat `string` as one of the
[`sequence`](sequence.html) types, to avoid surprising performance complexity
when addressing elements of the sequence.
Specifically, indexed access to a selected character in a string takes O(_n_)
time, since the implementation is unlikely to use the inefficient UTF-32
representation required for constant-time access.

[CCS]: http://www.unicode.org/glossary/#coded_character_sequence
  '''

  // Pass-through bindings from kernel
  (provide is_string)

  (require "/fusion/experimental/defines")


  (defpub_j string_append
    '''
    (string_append text ...)

Concatenates the `text` values (strings or symbols), returning a string.
All arguments must be actual strings.

If no arguments are supplied, the result is `""`.
    '''
    "com.amazon.fusion.FusionString$AppendProc")

  (defpub_j string_to_lower
    '''
    (string_to_lower string)

Converts all the characters in a `string` to lower-case letters.
    '''
    "com.amazon.fusion.FusionString$ToLowerProc")

  (defpub_j string_to_upper
    '''
    (string_to_upper string)

Converts all the characters in a `string` to upper-case letters.
    '''
    "com.amazon.fusion.FusionString$ToUpperProc")

  (defpub_j string_to_symbol
    '''
    (string_to_symbol string)

Converts a `string` to a symbol with the same text.  Returns `null.symbol` when
given `null.string`.  Raises an exception when given an empty string.
    '''
    "com.amazon.fusion.FusionString$ToSymbolProc")

  (defpub_j symbol_to_string
    '''
    (symbol_to_string symbol)

Converts a `symbol` to a string with the same text. Returns `null.string` when
given `null.symbol`.
    '''
    "com.amazon.fusion.FusionSymbol$ToStringProc")

  (defpub_j string_contains
    '''
    (string_contains string substring)

Returns true if and only if `string` contains the `substring`.
Both arguments must be actual strings.
    '''
    "com.amazon.fusion.FusionString$ContainsProc")

  (defpub_j string_ends_with
    '''
    (string_ends_with string suffix)

Returns true if and only if `string` ends with `suffix`.
Both arguments must be actual strings.
    '''
    "com.amazon.fusion.FusionString$EndsWithProc")

  (defpub_j string_is_lower
    '''
    (string_is_lower string)

Returns whether `string` contains only lower-case code points.

A list of lower-case code points can be found [online](http://www.fileformat.info/info/unicode/category/Ll/list.htm).
    '''
    "com.amazon.fusion.FusionString$IsLowerCaseProc")

  (defpub_j string_is_upper
    '''
    (string_is_upper string)

Returns whether `string` contains only upper-case code points.

A list of upper-case code points can be found [online](http://www.fileformat.info/info/unicode/category/Lu/list.htm).
    '''
    "com.amazon.fusion.FusionString$IsUpperCaseProc")

  (defpub_j string_join
    '''
    (string_join separator part ...)

Appends the `part`s in order into a single string, inserting the `separator`
between adjacent `part`s.
All arguments must be actual strings or symbols.

No `separator` is added before or after the result.
If no `part`s are supplied, the result is `""`.
    '''
    "com.amazon.fusion.FusionString$JoinProc")

  (defpub_j string_split
    '''
    (string_split string separator)

Splits `string` into an immutable list of strings using `separator`.
Both arguments must be actual strings.

Returns an empty list when `string` is an empty string.
    '''
    "com.amazon.fusion.FusionString$SplitProc")

  (defpub_j string_starts_with
    '''
    (string_starts_with string prefix)

Returns true if and only if `string` begins with `prefix`.
Both arguments must be actual strings.
    '''
    "com.amazon.fusion.FusionString$StartsWithProc")
)
