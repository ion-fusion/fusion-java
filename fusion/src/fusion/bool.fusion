// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(module bool '/fusion/private/builtins'

  '''
Boolean operations and related conditional forms.

<!-- FUSION-185 This comment forces FusionDoc to stop the one-liner here. -->

## Conditionals

Fusion's [`if`][if] form is an expression not a statement, so it's closer to
the "ternary operator" (`?:`) of C-like languages than to their
`if`/`then`/`else` statement:

    (if true  "yes" "no")  ==> "yes"
    (if false "yes" "no")  ==> "no"

An [`if`][if] expression takes three sub-expressions, the test
expression, the "then-expression", and the "else-expression". Only one of the
latter two is evaluated, and both are required. Because of that evaluation
rule, `if` is a syntactic form, not a procedure; otherwise both branches would
be evaluated, which would defeat the purpose.

When you don't want to supply both result clauses, you can use [`when`][when]
or [`unless`][unless]:

    (when (is_null some_value)
      (displayln "The value is null."))

    (unless (is_null some_value)
      (displayln "The value is not null."))

Both examples either display a line of text or do nothing.


## Truthiness <a id="truthiness"/>

Fusion's conditional expressions branch based on the "truthiness" of the
condition value, which means the result of the condition expression
doesn't need to be strictly `true` or `false`.  It can be any kind of value,
which is then treated as either "truthy" or "untruthy" for the purposes of the
condition.

To see the difference between "truth" and "truthy", consider these expressions:

    (if   0    "yes" "no")
    (if   ""   "yes" "no")
    (if  null  "yes" "no")
    (if (void) "yes" "no")

This sort of thing is a common idiom in dynamic languages, a shortcut
to checking the presence of a meaningful value. In Java the program must have
an explicit comparison to achieve a true/false value. Fusion has the added
hiccup of `null.bool`. Early versions of Fusion forced the programmer to ensure
that the value is exactly `true` or `false`, but that caused an abundance of
null checks and void checks for very common use cases. (Users of the IonJava
APIs will surely recognize this problem!) Scheme languages don't have `null`,
and they generally say that everything is truthy except for `false`. That's
more forgiving, but not necessarily more convenient, especially when you throw
in all those nulls.

Fusion defines truthiness as follows:

  * Every value is truthy except for `false`, [void][], and any variant of
    `null`.

Given historical experience in working with Ion data, we believe this will be
the most convenient approach to the issue.  This definition is more lax (and
hopefully more convenient) than Java, but less lenient (and hopefully less
error-prone) than C or C++.

Fusion supports the usual boolean combinators [`and`][and], [`or`][or], and
[`not`][not], which also observe truthiness in the same manner. The operators
`and` and `or` are syntactic forms (not procedures) that perform
short-circuiting _a la_ Java's `&&` and `||` operators.  Unlike Java, these
forms return the result of the last expression evaluated rather than always
`true` or `false`.

    (and true false)             ==> false
    (and 2 "truthy")             ==> "truthy"
    (and 2 "truthy" null false)  ==> null
    (or false true false)        ==> true
    (or false null.blob 0 1)     ==> 0

  [and]:    fusion/bool.html#and
  [if]:     fusion/bool.html#if
  [not]:    fusion/bool.html#not
  [or]:     fusion/bool.html#or
  [unless]: fusion/bool.html#unless
  [void]:   fusion/void.html
  [when]:   fusion/bool.html#when
  '''

  // Pass-through bindings from kernel
  (provide if is_bool)

  // Pass-through bindings from builtins
  (provide not)

  (require "/fusion/private/control")
  (provide and cond or unless when)


  (require
    "/fusion/equality"
    "/fusion/experimental/defines"
  )


  (defpub (is_truthy v)
    '''
Returns `true` when the argument is truthy, or `false` otherwise.
Fusion defines truthiness as follows:

  * Every value is truthy except for `false`, void, and any variant of `null`.

Equivalent to:

    (if v true false)

See also: <a href="fusion/bool.html#truthiness">Truthiness</a>
    '''
    (if v true false))


  (defpub (is_untruthy v)
    '''
Returns `true` when the argument is _not_ truthy, or `false` otherwise.
The untruthy values are `false`, void, and any variant of `null`.

Equivalent to:

    (if v false true)

See also: <a href="fusion/bool.html#truthiness">Truthiness</a>
    '''
    (if v false true))


  (defpub (is_true v)
    '''
Returns `true` when the argument is `true` (annotated or not), or `false`
otherwise.

Equivalent to:

    (== v true)
    '''
    (== v true))


  (defpub (is_false v)
    '''
Returns `true` when the argument is `false` (annotated or not), or `false`
otherwise.

Equivalent to:

    (== v false)
    '''
    (== v false))

)
