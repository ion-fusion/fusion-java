// Copyright (c) 2014-2017 Amazon.com, Inc.  All rights reserved.

(module syntax_rules "/fusion"
  '''
Like [Racket's pattern macros](http://docs.racket-lang.org/guide/pattern-macros.html).

Known notable differences (beyond stylistic - vs. _ separators):
  * define_syntax_rules does not have a Racket-based equivalent
  * (syntax_rules and define_syntax_rule do have Racket-based precedents)
  * Racket's syntax_rules seems to have restriction that the variable before
    ... in the pattern must also come before it in the template.  Not here.
  * Racket's define_syntax_alias -- define-type -- likely not rule-based

Also of note is that the ... (aka ellipsis or syntax Kleene star) can only
occur at the end of a pattern, but can occur 0+ times anywhere in the template,
even in the beginning or middle of a piece of the template.

For convenience -- like for shorthand accessing structs, symbols can be
interpreted as strings instead (i.e. not evaluated in default Fusion context
of binding/variable) by adding convert_symbols_to_strings:: annotation to
applicable parts of the rule pattern.

The syntax rules procedures give nearly as much power/simplicity as a grammar.
The ease of expressing re-write/transforms comes at performance cost though.
This performance gap however may be substantially narrowed over time.

WARNING: This module while in experimental mode is unsupported and may change
in behavior without notice.  Also no strong guarantees of being defect-free.
Of note that Racket has `variable ...` whereas these syntax rules do just `...`
This was an unnoticed interface difference that will eventually be remedied.
  '''
  (require
    "/fusion/private/syntax_rules"
    "/fusion/experimental/syntax"
    "/fusion/list"
    "/fusion/collection")

  (define_syntax syntax_rules
    (lambda (rules_definition_stx)
      (when
        (not
          (=
            (syntax_size rules_definition_stx)
            3))
        (wrong_syntax rules_definition_stx "Expecting only literals and rules"))
      (lets [(literals
               (syntax_to_datum
                 (syntax_get rules_definition_stx 1))),
             (rules_stx
               (syntax_get rules_definition_stx 2))]
        (do
          (lambda (rule_stx)
            (check_syntax_rule_validity rule_stx literals))
          (syntax_unwrap rules_stx))
        (quasisyntax
          (lambda (pre_substitution_stx)
            (lets [(literals_inner_copy
                    (quote
                      (unsyntax
                        (datum_to_syntax literals)))),
                   (matching_rule (find
                                    (lambda (rule_stx)
                                      (matches_syntax_rule_pattern
                                        literals_inner_copy
                                        rule_stx
                                        pre_substitution_stx))
                                    (syntax_unwrap
                                      (quote_syntax
                                        (unsyntax rules_stx)))))]
              (when
                (is_void matching_rule)
                (wrong_syntax pre_substitution_stx "No matching syntax rule found"))
              (lets [(pattern_stx
                       (syntax_get matching_rule 0)),
                     (template_stx
                       (syntax_get matching_rule 1)),
                     (substitution_map
                       (symbol_to_syntax_sequence_substitution_map
                         literals_inner_copy
                         (syntax_to_datum
                           (syntax_subseq pattern_stx 1))
                         (syntax_subseq pre_substitution_stx 1)))]
               (deep_substitute_syntax_sequence_substitutions
                 template_stx
                 substitution_map))))))))

  (define_syntax define_syntax_rules
    (lambda (rules_definition_stx)
      (lets [(literals_stx (syntax_get rules_definition_stx 1)),
             (rules_stx    (syntax_get rules_definition_stx 2)),
             (any_name_stx (syntax_get                  // First piece -- i.e. name -- of pattern
                             (syntax_get                // First half -- i.e. pattern -- of rule
                               (syntax_get rules_stx 0) // First rule
                               0)
                                 0))]
        (quasisyntax
          (define_syntax (unsyntax any_name_stx)
            (syntax_rules
              (unsyntax
                literals_stx)
              (unsyntax
                rules_stx)))))))

  (define_syntax define_syntax_rule
    (lambda (stx)
      (let [(pattern_stx  (syntax_get stx 1)),
            (template_stx (syntax_get stx 2))]
        (quasisyntax
          (define_syntax (unsyntax (syntax_get pattern_stx 0))
            (syntax_rules
              ()
              [
                (
                  (unsyntax pattern_stx)
                  (unsyntax template_stx))]))))))

  (provide (all_defined_out))
)
