// Copyright Ion Fusion contributors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

(module syntax '/fusion/private/kernel2'

  '''
Experimental operators for macros and syntax manipulation.

<!-- #61 This comment forces FusionDoc to stop the one-liner here. -->

## WARNING

This module contains unstable, experimental features.
There is **NO SUPPORT** for this module.

## Overview

Fusion’s macro system is intended to be operationally identical to that of
Racket, so we strongly recommend taking advantage of the extensive
documentation Racket provides.

Fusion does not yet implement Racket's higher-level macro facilities like
`define-syntax-rule` so one has to work with more primitive tools.

Fusion’s current feature-set generally aligns with the content of these parts
of the [Racket Guide](http://docs.racket-lang.org/guide/index.html):

  * [Lexical Scope](http://docs.racket-lang.org/guide/pattern-macros.html#%28part._.Lexical_.Scope%29)
  * [Macro Transformer Procedures](http://docs.racket-lang.org/guide/macro-transformers.html)
  * [Syntax Objects](http://docs.racket-lang.org/guide/stx-obj.html)

To write low-level macros you'll want to be familiar with these parts of the
[Racket Reference](http://docs.racket-lang.org/reference/index.html):

  * [Syntax Model](http://docs.racket-lang.org/reference/syntax-model.html)
  * [Syntax Objects](http://docs.racket-lang.org/reference/stxops.html),
    especially `datum->syntax` and `syntax-e` (which Fusion calls `syntax_unwrap`).
  * [Syntax Quoting](http://docs.racket-lang.org/reference/Syntax_Quoting__quote-syntax.html)
  * [Expanding Top-Level Forms](http://docs.racket-lang.org/reference/Expanding_Top-Level_Forms.html)

## Limitations

Here’s some notable things missing from Fusion’s current macro system compared
to Racket:

  * There’s only one [expansion phase](http://docs.racket-lang.org/reference/syntax-model.html#%28part._mod-parse%29),
    which primarily means one must generally import a macro from another module
    before using it.
  * Not all [expansion contexts](http://docs.racket-lang.org/reference/syntax-model.html#%28part._expand-context-model%29)
    are implemented. There’s no internal definitions yet; see [issue #67](https://github.com/ion-fusion/fusion-java/issues/67).
  * Tamper status (aka [tainting](http://docs.racket-lang.org/reference/stxcerts.html))
    is not implemented.

These are the primary reasons this module is “experimental”. Of particular
concern is that extant code may break when phases are introduced.

## Internals

Fusion implements the lexical-context algorithms used by Racket 6.2 and earlier,
which is best described by Matthew Flatt's paper,
[_Composable and Compilable Macros_](https://www.cs.utah.edu/plt/publications/macromod.pdf).

Racket 6.3 introduced a new mechanism for tracking lexical context. Quoting the
[Racket Blog](http://blog.racket-lang.org/2015/11/racket-v63.html):

> Racket’s macro expander uses a new representation of binding called “set of
> scopes”. The new binding model provides a simpler explanation of how macros
> preserve binding, especially across module boundaries and in hygiene-bending
> expansions. The new expander is mostly compatible with existing Racket
> macros, but there are some incompatibilities. For the formally inclined, a
> research paper on this macro system will appear at POPL next year:
> http://www.cs.utah.edu/plt/scope-sets/

We intend for Fusion to migrate to this algorithm, too, since it is
significantly simpler to implement and easier to understand.
  '''


  // This is split into two files because the compiler requires that built-in
  // syntactic forms must be imported from another module.
  // That's true everywhere except for these low-level modules.
  // TODO I think that only quasisyntax is relevant?

  (require
    "/fusion/private/define"
    "/fusion/private/metasyntax"
    "/fusion/private/raise"
    "/fusion/private/sexp"
    "/fusion/private/syntax"
    "/fusion/void"
  )

  (provide
    bound_identifier_equal
    check_duplicate_identifier
    datum_to_syntax
    define_syntax
    expand_once
    free_identifier_equal
    is_identifier
    is_syntax
    quasisyntax
    quote_syntax
    syntax_append
    syntax_column
    syntax_cons_q
    syntax_get
    syntax_is_original
    syntax_line
    syntax_origin
    syntax_property
    syntax_size
    syntax_subseq
    syntax_to_datum
    syntax_track_origin
    syntax_unwrap
    unsyntax
    wrong_syntax)


  // TODO Should probably remove; it's unnecessary.  Racket doesn't have it.
  (define (syntax_origin stx)
    "DEPRECATED as of FusionJava R23"
    (syntax_property stx (quote origin)))


  // '_q' suffix intended to denote that the car is quoted by the syntax form.
  // Otherwise this would be a procedure.
  (define_syntax syntax_cons_q
    (lambda (stx)
      (quasisyntax
        (syntax_append (quote_syntax ((unsyntax (syntax_get stx 1))))
                       (unsyntax (syntax_get stx 2))))))


  (define (check_duplicate_identifier ids)
    '''
Given a sexp of identifiers `ids`, compares each pair of identifiers with
`bound_identifier_equal`.  If any comparison returns `true`, the result is the
first duplicate identifier (_i.e._, the first with a preceding match);
otherwise the result is void.
    '''
    // TODO Improve performance: this is O(n²). Should use a bound-id-set.
    //   This is okay for now since most local binding environments are small.
    (letrec [(is_sexp_of_ids
               (lambda (ids)
                 (if (is_sexp ids)
                   (if (is_pair ids)
                     (if (is_identifier (head ids))
                       (is_sexp_of_ids (tail ids))
                       false)
                     true)
                   false))),
             (has_duplicate_identifier
               (lambda (id ids)
                 "Is `id` `bound_identifier_equal` to any element of `ids`?"
                 (if (is_pair ids)
                   (if (bound_identifier_equal id (head ids))
                     true
                     (has_duplicate_identifier id (tail ids)))
                   false))),
             (find_dupe
               (lambda (no_dupes ids)
                 (if (is_pair ids)
                   (let_values [((id) (head ids))]
                     (if (has_duplicate_identifier id no_dupes)
                       id
                       (find_dupe (pair id no_dupes) (tail ids))))
                   (void))))]             // Empty sexp has no duplicates
      (if (is_sexp_of_ids ids)
        (find_dupe (quote ()) ids)
        (raise_argument_error "check_duplicate_identifier" "sexp of identifiers" 0 ids))))
)
