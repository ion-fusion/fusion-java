// Copyright (c) 2012-2024 Amazon.com, Inc.  All rights reserved.

(module timestamp '/fusion/private/kernel2'

  '''
Immutable point-in-time values with local offset.

The semantics of Fusion timestamp values are identical to [Ion timestamps][ts].

[ts]: https://amzn.github.io/ion-docs/docs/spec.html#timestamp
  '''

  (require
    "/fusion/exception"
    "/fusion/experimental/defines"
    "/fusion/number"
    "/fusion/private/control"
    "/fusion/private/define"
    "/fusion/void")


  (require "/fusion/private/compare")
  (provide < <= = >= >)

  (defpub_j is_timestamp
    '''
    (is_timestamp value)

Determines whether a `value` is of type `timestamp`, returning `true` or
`false`.
    '''
    "com.amazon.fusion.FusionTimestamp$IsTimestampProc")

  (defpub_j string_to_timestamp
    '''
    (string_to_timestamp string)

Converts a `string` to a timestamp, recognizing (only) Ion formatted data.
Returns `null.timestamp` when given `null.string`.

    (string_to_timestamp null.string)        ==> null.timestamp
    (string_to_timestamp "2013-11-13T")      ==> 2013-11-13
    (string_to_timestamp "null.timestamp")   ==> ERROR
    '''
    "com.amazon.fusion.FusionTimestamp$StringToTimestampProc")

  (defpub_j timestamp_now
    '''
    (timestamp_now)

Returns a timestamp representing "now".  At present the local offset is
unspecified, but that may change in the future.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampNowProc")

  (defpub_j epoch_millis_to_timestamp
    '''
    (epoch_millis_to_timestamp epoch_millis)

Returns a timestamp for the point in time given as the number of milliseconds
since 1970-01-01T00:00Z. The `epoch_millis` may be a decimal or int.
    '''
    "com.amazon.fusion.FusionTimestamp$EpochMillisToTimestampProc")

  (defpub_j timestamp_to_epoch_millis
    '''
    (timestamp_to_epoch_millis timestamp)

Given a non-null timestamp, returns the same point in time represented as the
number of milliseconds since 1970-01-01T00:00Z.  The result is a decimal.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampToEpochMillisProc")

  (defpub_j timestamp_to_string
    '''
    (timestamp_to_string timestamp)

Converts a `timestamp` to a string in Ion format.
Returns `null.string` when given `null.timestamp`.

    (timestamp_to_string null.timestamp)   ==> null.string
    (timestamp_to_string 2013-11-13T)      ==> "2013-11-13"
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampToStringProc")


  (defpub_j timestamp
    '''
    (timestamp year month? day? hour? minute? second? offset?)

Returns a timestamp representing a specified point in time.

The `year` is required, and other fields can be added in increasing precision.
Acceptable combinations of arguments being present or absent align with the
combinations of fields allowed by [Ion timestamps][ts]. Optional arguments that are
not present are equivalent to being void.

  * When present, `month` must be an actual integer.
  * When present, `day` must be an actual integer and `month` must be present.
  * When either is present, `hour` and `minute` must both be actual integers,
    and `month` and `day` must be present.
  * When present, `second` must be an actual integer or decimal, and all
    preceding arguments must be present.
  * When present, `offset` must be an actual integer denoting the minutes of
    local offset; void denotes the unknown local offset `-00:00`.  The offset
    is ignored when the hour and minutes are not provided.

For example:

    (timestamp 2016)                       ==> 2016T
    (timestamp 2016 7)                     ==> 2016-07T
    (timestamp 2016 7 1)                   ==> 2016-07-01
    (timestamp 2016 7 1 9 5)               ==> 2016-07-01T09:05-00:00
    (timestamp 2016 7 1 9 5 (void) -420)   ==> 2016-07-01T09:05-07:00
    (timestamp 2016 7 1 9 5 6. 0)          ==> 2016-07-01T09:05:06+00:00
    (timestamp 2016 7 1 9 5 6. (void))     ==> 2016-07-01T09:05:06-00:00
    (timestamp 2016 7 1 9 5 6.123)         ==> 2016-07-01T09:05:06.123-00:00

[ts]: https://amzn.github.io/ion-docs/docs/spec.html#timestamp
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampProc")


  (defpub_j timestamp_year
    '''
    (timestamp_year ts)

Returns the year of `ts` in its local time.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampYearProc")


  (defpub_j timestamp_month
    '''
    (timestamp_month ts)

Returns the month of `ts` in its local time if its precision is `MONTH` or finer, returns void otherwise.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampMonthProc")


  (defpub_j timestamp_day
    '''
    (timestamp_day ts)

Returns the day of `ts` in its local time if its precision is `DAY` or finer, returns void otherwise.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampDayProc")


  (defpub_j timestamp_hour
    '''
    (timestamp_hour ts)

Returns the hour in the day of `ts` in its local time if its precision is `MINUTE` or finer, returns void otherwise.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampHourProc")


  (defpub_j timestamp_minute
    '''
    (timestamp_minute ts)

Returns the number of minutes past the hour of `ts` in its local time if its precision is `MINUTE` or finer, returns void otherwise.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampMinuteProc")


  (defpub_j timestamp_second
    '''
    (timestamp_second ts)

Returns the number of seconds past the minute in `ts` in its local time if its precision is `SECOND`, returns void otherwise.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampSecondProc")


  (defpub_j timestamp_offset
    '''
    (timestamp_offset ts)

Returns the local offset of `ts` as an integer in minutes if its offset is known, returns void otherwise.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampOffsetProc")


  (defpub (timestamp_at_year ts)
    '''
Returns a timestamp that represents the same point-in-time as `ts`, with precision `YEAR`.
    '''
    (timestamp (timestamp_year ts)))


  (defpub (timestamp_at_month ts)
    '''
Returns a timestamp that represents the same point-in-time as `ts`, with precision `MONTH`.
    '''
    (timestamp (timestamp_year ts)
               (or (timestamp_month ts) 1)))


  (defpub (timestamp_at_day ts)
    '''
Returns a timestamp that represents the same point-in-time as `ts`, with precision `DAY`.
    '''
    (timestamp (timestamp_year ts)
               (or (timestamp_month ts) 1)
               (or (timestamp_day ts) 1)))


  (defpub (timestamp_at_minute ts)
    '''
Returns a timestamp that represents the same point-in-time as `ts`, with precision `MINUTE`.
Local offset is preserved.
    '''
    (timestamp (timestamp_year ts)
               (or (timestamp_month ts) 1)
               (or (timestamp_day ts) 1)
               (or (timestamp_hour ts) 0)
               (or (timestamp_minute ts) 0)
               (void)
               (timestamp_offset ts)))


  (defpub (timestamp_at_second ts)
    '''
Returns a timestamp that represents the same point-in-time as `ts`, with precision `SECOND`.
Local offset is preserved.
    '''
    (timestamp (timestamp_year ts)
               (or (timestamp_month ts) 1)
               (or (timestamp_day ts) 1)
               (or (timestamp_hour ts) 0)
               (or (timestamp_minute ts) 0)
               (or (timestamp_second ts) 0)
               (timestamp_offset ts)))


  (defpub_j timestamp_with_offset
    '''
    (timestamp_with_offset ts offset)

Returns a timestamp at the same point-in-time as `ts`, but with local offset equal to `offset` minutes.
The returned timestamp may have different time fields to maintain the same point-in-time.
Expects `ts` to have precision `MINUTE` or finer.
    '''
    "com.amazon.fusion.FusionTimestamp$TimestampWithOffsetProc")

  (define unsafe_adjust_year
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddYearProc"))
  (define unsafe_adjust_month
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddMonthProc"))
  (define unsafe_adjust_day
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddDayProc"))
  (define unsafe_adjust_hour
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddHourProc"))
  (define unsafe_adjust_minute
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddMinuteProc"))
  (define unsafe_adjust_second
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddSecondProc"))


  (define (safe_add name unsafe_proc ts period)
    (if (or (not (is_timestamp ts)) (is_null ts))
      (raise_argument_error name "actual timestamp" 0 ts period)
      (if (or (not (is_int period)) (is_null period))
        (raise_argument_error name "actual int" 1 ts period)
        (unsafe_proc ts period))))


  (defpub (adjust_year ts period)
    '''
Returns a timestamp that's `period` years after (or before, if negative) `ts`.
The result will have the same precision and local offset. In general, only
the year field will change, but the day may change to account for leap-days.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_year" unsafe_adjust_year ts period))


  (defpub (adjust_month ts period)
    '''
Returns a timestamp that's `period` months after (or before, if negative) `ts`.
The result will have the same precision and local offset. In general, only
the year and month fields will change, but the day may change to account for
leap-days.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_month" unsafe_adjust_month ts period))


  (defpub (adjust_day ts period)
    '''
Returns a timestamp that's `period` days after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_day" unsafe_adjust_day ts period))


  (defpub (adjust_hour ts period)
    '''
Returns a timestamp that's `period` hours after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_hour" unsafe_adjust_hour ts period))


  (defpub (adjust_minute ts period)
    '''
Returns a timestamp that's `period` minutes after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_minute" unsafe_adjust_minute ts period))


  (defpub (adjust_second ts period)
    '''
Returns a timestamp that's `period` seconds after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_second" unsafe_adjust_second ts period))


  (defpub (timestamp_put_offset ts offset)
    '''
Returns a timestamp that has the same time fields (year, month, ...) as `ts`, with local offset equal to `offset` minutes.
The result may represent a point-in-time different from `ts`.
`offset` must have magnitude less than 1440 (24 hours).
    '''
    (unless (and ts (is_timestamp ts))
      (raise_argument_error "timestamp_put_offset" "non-null timestamp" 0 ts offset))
    (if (is_void offset)
      (timestamp_with_offset (timestamp_put_offset ts 0)
                             offset)
      (if (or (is_null offset)
              (>= offset 1440)
              (<= offset -1440))
        (raise_argument_error "timestamp_put_offset" "non-null integer between -1440 and 1440 (exclusive)" 1 ts offset)
        (timestamp_with_offset (adjust_minute ts
                                              (- (or (timestamp_offset ts) 0)
                                                 offset))
                               offset))))

)
