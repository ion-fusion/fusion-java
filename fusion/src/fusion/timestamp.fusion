// Copyright (c) 2012-2014 Amazon.com, Inc.  All rights reserved.

(module timestamp '/fusion/private/kernel'

  '''
Point-in-time values with local offset.

Fusion timestamp values are identical to Ion timestamps.
  '''

  (require
    "/fusion/exception"
    "/fusion/experimental/defines"
    "/fusion/number"
    "/fusion/private/control")


  (require "/fusion/private/compare")
  (provide < <= = >= >)

  (defpub_j is_timestamp
    "com.amazon.fusion.FusionTimestamp$IsTimestampProc")
  (defpub_j string_to_timestamp
    "com.amazon.fusion.FusionTimestamp$StringToTimestampProc")
  (defpub_j timestamp_now
    "com.amazon.fusion.FusionTimestamp$TimestampNowProc")
  (defpub_j epoch_millis_to_timestamp
    "com.amazon.fusion.FusionTimestamp$EpochMillisToTimestampProc")
  (defpub_j timestamp_to_epoch_millis
    "com.amazon.fusion.FusionTimestamp$TimestampToEpochMillisProc")
  (defpub_j timestamp_to_string
    "com.amazon.fusion.FusionTimestamp$TimestampToStringProc")


  (define unsafe_adjust_year
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddYearProc"))
  (define unsafe_adjust_month
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddMonthProc"))
  (define unsafe_adjust_day
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddDayProc"))
  (define unsafe_adjust_hour
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddHourProc"))
  (define unsafe_adjust_minute
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddMinuteProc"))
  (define unsafe_adjust_second
    (java_new "com.amazon.fusion.FusionTimestamp$UnsafeTimestampAddSecondProc"))


  (define (safe_add name unsafe_proc ts period)
    (if (or (not (is_timestamp ts)) (is_null ts))
      (raise_argument_error name "actual timestamp" 0 ts period)
      (if (or (not (is_int period)) (is_null period))
        (raise_argument_error name "actual int" 1 ts period)
        (unsafe_proc ts period))))


  (defpub (adjust_year ts period)
    '''
Returns a timestamp that's `period` years after (or before, if negative) `ts`.
The result will have the same precision and local offset. In general, only
the year field will change, but the day may change to account for leap-days.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_year" unsafe_adjust_year ts period))


  (defpub (adjust_month ts period)
    '''
Returns a timestamp that's `period` months after (or before, if negative) `ts`.
The result will have the same precision and local offset. In general, only
the year and month fields will change, but the day may change to account for
leap-days.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_month" unsafe_adjust_month ts period))


  (defpub (adjust_day ts period)
    '''
Returns a timestamp that's `period` days after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_day" unsafe_adjust_day ts period))


  (defpub (adjust_hour ts period)
    '''
Returns a timestamp that's `period` hours after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_hour" unsafe_adjust_hour ts period))


  (defpub (adjust_minute ts period)
    '''
Returns a timestamp that's `period` minutes after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_minute" unsafe_adjust_minute ts period))


  (defpub (adjust_second ts period)
    '''
Returns a timestamp that's `period` seconds after (or before, if negative) `ts`.
The result will have the same precision and local offset.

`ts` must be a non-null timestamp and `period` must be a non-null int (limited
to the 32-bit range).
    '''
    (safe_add "adjust_second" unsafe_adjust_second ts period))


  // TODO FUSION-106 timestamp slot accessors
)
