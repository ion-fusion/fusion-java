// Copyright (c) 2012-2016 Amazon.com, Inc.  All rights reserved.

(module base "/fusion/private/builtins"

  // WARNING: Doc syntax isn't supported yet.
  '''
A reduced language that may be preferable to using the full
[`/fusion`](fusion.html) language in some situations. In particular, this
dialect may exhibit faster startup time since it requires fewer parts of the
full library.

To use this dialect for your module, declare it as follows:

    (module my_module "/fusion/base"
      // ...
    )
  '''


  // Pass-through bindings from kernel
  (provide all_defined_out begin define if lambda letrec module only_in
    prefix_in provide rename_in rename_out require)
  (provide is_bool is_int is_float is_decimal is_symbol
      is_string is_clob is_blob is_list is_sexp is_struct)
  // Note that there's no is_null type checker, since that's used to
  // check for *any* null value.


  // Pass-through bindings from builtins
  (provide let let_values quasiquote quote unquote values '#%top')
  (provide apply exit is_null is_null_null is_procedure not)


  (require "/fusion/collection")
  (provide element elt is_empty size)

  (require "/fusion/private/bind")
  (provide lets)

  (require "/fusion/private/compare")
  (provide < <= = >= >)

  (require "/fusion/private/control")
  (provide and or when unless cond)

  (require "/fusion/equality")
  (provide = == === same ident)

  (require "/fusion/number")
  (provide + - * /)

  (require "/fusion/timestamp")
  (provide is_timestamp)

  (require "/fusion/void")
  (provide is_void void)


  (require "/fusion/ffi/java")

  (provide annotate)
  (define annotate
    '''
    (annotate value text ...)

Applies the given annotations to a `value`, returning a (shallow) copy if
necessary to avoid mutating it.  If no annotations are provided, then any
extant annotations are effectively removed.

The `value` must be annotatable; that is, it must be one of the Ion types.
The `text` arguments must be non-null, non-empty strings or symbols.

    (annotate 123 "a")              =>  a::123
    (let [(v (quote a::123))]
      (annotate v))                 =>  123
    (let [(anns ["a", (quote b)])]
      (apply annotate 123 anns))    =>  a::b::123

To extract annotations from a value, use
[`annotations`](fusion.html#annotations).
    '''
    (java_new "com.amazon.fusion.AnnotateProc"))


  (provide annotations)
  (define annotations
    '''
    (annotations value)

Returns a non-null immutable list of symbols containing the user type
annotations on the `value`.

    (annotations 123)                =>  []
    (annotations (quote a::b::123))  =>  [a, b]

To put annotations onto a value, use [`annotate`](fusion.html#annotate).
    '''
    (java_new "com.amazon.fusion.TypeAnnotationsProc"))


  (provide type_annotations)
  (define type_annotations
    '''
    (type_annotations value)

*DEPRECATED* as of Fusion R20; renamed to
[`annotations`](fusion.html#annotations).
    '''
    (java_new "com.amazon.fusion.TypeAnnotationsProc"))
)
