// Copyright (c) 2012-2013 Amazon.com, Inc.  All rights reserved.

(module collection '/fusion/base'

  '''
Generic operations over collection types.

The built-in collection types are [list](fusion/list.html),
[sexp](fusion/sexp.html), and [struct](fusion/struct.html).

See also [sequence](fusion/sequence.html).
  '''

  (require
    "/fusion/experimental/defines"
    "/fusion/unsafe/struct"
    "/fusion/void")


  (defpub_j size "com.amazon.fusion.SizeProc")


  // Name per Dylan and SRFI-1.
  (defpub any
    (lambda (pred collection)
      '''
Applies the one-parameter predicate `pred` to the elements of `collection`;
the first time `pred` returns a truthy value that truthy value is returned and
no more elements are visited.  If no call returns a truthy value, then the
result is `false`.

When `collection` is a sequence, the elements are visited in order.
      '''
      (cond
        ((is_struct collection)
         (let [(result false)]
           // WARNING!  This unsafe procedure is UNSUPPORTED!
           (unsafe_struct_visit (lambda (key elt)
                                  (let [(elt_result (pred elt))]
                                    (when elt_result (set result elt_result))
                                    elt_result))
             collection)
           result))
        (true    // TODO FUSION-141 optimize for list vs sexp
         (let [(len (size collection))]
           (let loop [(i 0)]
             (if (= i len)
               false
               (lets [(elt (. collection i)),
                      (result (pred elt))]
                 (if result result
                   (loop (+ i 1)))))))))))


  (defpub is_empty
    (lambda (collection)
      '''
Returns `true` if the size of the `collection` is zero, otherwise returns
`false`.
      '''
      (= 0 (size collection))))


  // Name per SRFI-1
  (defpub find
    (lambda (pred collection)
      '''
Applies the one-parameter predicate `pred` to each element of `collection`;
the first time `pred` returns a truthy value that element is returned.
If no such element is found, the result is void.

When `collection` is a sequence, the elements are visited in order.
      '''
      (cond
        ((is_struct collection)
         (let [(result (void))]
           // WARNING!  This unsafe procedure is UNSUPPORTED!
           (unsafe_struct_visit (lambda (key elt)
                                  (let [(elt_result (pred elt))]
                                    (when elt_result (set result elt))
                                    elt_result))
             collection)
           result))
        (true    // TODO FUSION-141 optimize for list vs sexp
         (let [(len (size collection))]
           (let loop [(i 0)]
             (if (= i len)
               (void)
               (let [(elt (. collection i))]
                 (if (pred elt)
                   elt
                   (loop (+ i 1)))))))))))


  // Name per Dylan.  Equivalent to SRFI-1 `for_each` but I don't want this to
  // be confused with the `for` syntax from Racket (which I intend to provide).
  (defpub do
    (lambda (proc collection)
      '''
Applies the one-parameter procedure `proc` to the elements of `collection`,
ignoring any results.  Returns void.

When `collection` is a sequence, the elements are visited in order.
      '''
      // We return void (rather than the collection) because this should
      // eventually accept multiple collections to walk in parallel, and then
      // it doesn't make sense to return the first one.
      (cond
        ((is_struct collection)
         // WARNING!  This unsafe procedure is UNSUPPORTED!
         (unsafe_struct_visit
           (lambda (key elt) (proc elt) false)
           collection)
         (void))
        (true    // TODO FUSION-141 optimize for list vs sexp
         (let [(len (size collection))]
           (let loop [(i 0)]
             (if (= i len)
               (void)
               (begin
                 (proc (. collection i))
                 (loop (+ 1 i))))))))))

)
