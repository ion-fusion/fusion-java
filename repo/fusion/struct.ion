// Copyright (c) 2012-2013 Amazon.com, Inc.  All rights reserved.

(module struct '/fusion/base'

  '''
Operations for structs.

A _struct_ is an unordered [collection](fusion/collection.html) of values,
keyed by strings.  Since Fusion structs are based on Ion structs, these
collections are multi-maps: the same key can map to multiple values, or even
multiple mappings to the same value.

The _elements_ of a struct are its values, but not the associated field names.

At present, all structs are immutable.  Issue FUSION-93 covers mutable structs.


## Creating Structs

In standard Fusion, Ion struct syntax denotes immutable values, treating field
names as literals and field values as expressions.  Thus
`{}` denotes an immutable struct of size zero, and `{f:[x]}` denotes an
immutable struct of size 1 holding a list whose only element is the value of
the variable `x`.  The value of a struct
literal is immutable even when some child values are evaluated at run-time,
but elements of such a struct may be mutable.
Quoted forms are also immutable; in `(quote {f:x})` the struct's sole element
is the symbol `'x'`.

The procedure `struct` works like a struct literal, creating an immutable
struct from names and elements:

    (struct "name" "Steve" "age" 29)  =>  {name:"Steve", age:29}

`struct_zip` is similar, but accepts lists containing the names and
elements:

    (struct ["name", "age"] ["Doug", 38])  =>  {age:38, name:"Doug"}

The procedures `remove_keys` and `retain_keys` functionally eliminate fields
from a struct without modifying the input.  `struct_merge` combines the fields
from two structs.

## Accessing Structs

The basic operation for retrieving values from a struct is `struct_ref` which
accepts a (string or symbol) field name and a default result for use when the
field doesn't exist in the struct:

    (struct_ref {city:"Seattle", zip:98102} "zip" 0)  =>  98102
    (struct_ref {city:"Seattle", zip:98102} "zap" 0)  =>  0

If the default result is a procedure, it's called with no arguments for the
default value:

    (struct_ref {city:"Seattle", zip:98102} "zap" (lambda () 0))  => 0

Most often, you'll want to use `void` which is a procedure that returns the
void value:

    (struct_ref {city:"Seattle", zip:98102} "zap" void)  =>  {{{void}}}


## Iterating Struct Fields

The procedure `struct_for_each` iterates the name/value pairs within a struct,
but since the input isn't modified one must use side effects.

More general [collection](fusion/collection.html) operations like `any` and
`find` can be applied to structs, in which case the field names are ignored
while the field values are iterated.
  '''

  (require
    "/fusion/collection"
    "/fusion/experimental/defines"
    "/fusion/ffi/java"
    "/fusion/private/builtins"   // unsafe_struct_visit
    "/fusion/unsafe/struct")


  // Pass-through bindings from /fusion/private/kernel
  (provide is_struct)

  // Pass-through bindings from /fusion/collection
  (provide any do find is_empty size)


  (defpub_j remove_keys       "com.amazon.fusion.FusionStruct$RemoveKeysProc")
  (defpub_j retain_keys       "com.amazon.fusion.FusionStruct$RetainKeysProc")
  (defpub_j struct            "com.amazon.fusion.FusionStruct$StructProc")
  (defpub_j struct_merge      "com.amazon.fusion.FusionStruct$StructMergeProc")
  (defpub_j struct_zip        "com.amazon.fusion.FusionStruct$StructZipProc")


  (provide struct_ref)
  (define (struct_ref struct name default)
    '''
    (struct_ref struct name default)

Returns the value associated with `name` in `struct`.  The `name` must be a
string or symbol.  If no field exists with the name, the `default` is used; if
it is _not_ a procedure, it's returned as-is:

    (struct_ref {city:"Seattle", zip:98102} "zip" 0)  =>  98102
    (struct_ref {city:"Seattle", zip:98102} "zap" 0)  =>  0

If `default` _is_ a procedure, it's called (in tail position) with no
arguments:

    (struct_ref {city:"Seattle", zip:98102} "zap" (lambda () 0))  => 0

Most often, you'll want to use `void` so as to default to the void value:

    (struct_ref {city:"Seattle", zip:98102} "zap" void)  =>  {{{void}}}
    '''
    (unless (is_struct struct)
      (raise_argument_error "struct_ref" "struct" 0 struct name default))
    (unless (and (or (is_string name) (is_symbol name))
                 name)  // null check
      (raise_argument_error "struct_ref" "non-null string or symbol"
        1 struct name default))
    (unsafe_struct_ref struct name default))


  // TODO FUSION-93 struct mutability
  //   * remove_keys_m

  // Name per Racket, where for-each is for side effects.
  (defpub struct_for_each
    (lambda (proc struct)
      '''
Iterates the fields of `struct` for side-effects, applying `proc` to each
name/value field.  Returns `struct`.  The `proc` must accept two arguments, a
field name symbol and a value; any results from applying the procedure are
ignored.
      '''
      // This is pretty much the same as struct_visit except we never return early.
      (unless (is_procedure proc)
        (raise_argument_error "struct_for_each" "procedure" 0 proc struct))
      (unless (is_struct struct)
        (raise_argument_error "struct_for_each" "struct" 1 proc struct))
      (unsafe_struct_visit
        (lambda (name elt) (proc name elt) false)
        struct)))

)
